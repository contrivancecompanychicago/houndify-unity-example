/* file "SportsStatsTypeJSON.cs" */

/* Generated automatically by Classy JSON. */


using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.IO;


public class SportsStatsTypeJSON : JSONBase
  {
    public enum TypeValueKnownValues
      {
        Value_MLBBaserunningCaughtStealing,
        Value_MLBBaserunningPickoffs,
        Value_MLBBaserunningStolenBasePerc,
        Value_MLBBaserunningStolenBases,
        Value_MLBFieldingAssists,
        Value_MLBFieldingCompleteGames,
        Value_MLBFieldingDoublePlays,
        Value_MLBFieldingErrors,
        Value_MLBFieldingFieldingPercentage,
        Value_MLBFieldingGamesFinished,
        Value_MLBFieldingGamesPlayed,
        Value_MLBFieldingGamesStarted,
        Value_MLBFieldingPassedBalls,
        Value_MLBFieldingPutouts,
        Value_MLBFieldingRangeFactor,
        Value_MLBFieldingTotalChances,
        Value_MLBFieldingTriplePlays,
        Value_MLBHittingAtBats,
        Value_MLBHittingAtBatsPerHomeRun,
        Value_MLBHittingAtBatsPerStrikeout,
        Value_MLBHittingAtBatsWithRunnersInScoringPosition,
        Value_MLBHittingBalls,
        Value_MLBHittingBallsInPlay,
        Value_MLBHittingBattingAverage,
        Value_MLBHittingBattingAverageOnBallsInPlay,
        Value_MLBHittingCompleteGames,
        Value_MLBHittingCycles,
        Value_MLBHittingDirtBallsFaced,
        Value_MLBHittingDoubles,
        Value_MLBHittingEarnedRunsScored,
        Value_MLBHittingExtraBaseHits,
        Value_MLBHittingFieldersChoice,
        Value_MLBHittingFlyBalls,
        Value_MLBHittingFlyOuts,
        Value_MLBHittingFlyOutsIntoDoublePlays,
        Value_MLBHittingFoulBalls,
        Value_MLBHittingGamesFinished,
        Value_MLBHittingGamesPlayed,
        Value_MLBHittingGamesStarted,
        Value_MLBHittingGroundBallToFlyBallRatio,
        Value_MLBHittingGroundBalls,
        Value_MLBHittingGroundOuts,
        Value_MLBHittingGroundedIntoDoublePlay,
        Value_MLBHittingHitByPitch,
        Value_MLBHittingHits,
        Value_MLBHittingHitsWithRunnersInScoringPosition,
        Value_MLBHittingHomeRuns,
        Value_MLBHittingIntentionalBalls,
        Value_MLBHittingIntentionalWalks,
        Value_MLBHittingIsolatedPower,
        Value_MLBHittingLineDrives,
        Value_MLBHittingLineOuts,
        Value_MLBHittingLineOutsIntoDoublePlay,
        Value_MLBHittingOnBasePlusSluggingPerc,
        Value_MLBHittingOnBasePerc,
        Value_MLBHittingPitchesFaced,
        Value_MLBHittingPlateAppearances,
        Value_MLBHittingPopOuts,
        Value_MLBHittingPopUps,
        Value_MLBHittingReachedOnError,
        Value_MLBHittingRunnersLeftOnBase,
        Value_MLBHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition,
        Value_MLBHittingRunsBattedIn,
        Value_MLBHittingRunsBattedInWithTwoOuts,
        Value_MLBHittingSacrificeFlys,
        Value_MLBHittingSacrificeHits,
        Value_MLBHittingSecondaryAverage,
        Value_MLBHittingSingles,
        Value_MLBHittingSluggingPerc,
        Value_MLBHittingStrikeoutsLooking,
        Value_MLBHittingStrikeoutsSwinging,
        Value_MLBHittingStrikesLooking,
        Value_MLBHittingStrikesSwinging,
        Value_MLBHittingTotalBases,
        Value_MLBHittingTotalRunsScored,
        Value_MLBHittingTotalStrikeouts,
        Value_MLBHittingTotalStrikes,
        Value_MLBHittingTriples,
        Value_MLBHittingUnearnedRunsScored,
        Value_MLBHittingWalks,
        Value_MLBHittingWalksPerPlaceAppearance,
        Value_MLBHittingWalksPerStrikeout,
        Value_MLBPitchingBalks,
        Value_MLBPitchingBalls,
        Value_MLBPitchingBattersFaced,
        Value_MLBPitchingBlownSaves,
        Value_MLBPitchingCompleteGames,
        Value_MLBPitchingDirtBallsThrown,
        Value_MLBPitchingDoublesAllowed,
        Value_MLBPitchingEarnedRunAverage,
        Value_MLBPitchingEarnedRunsAllowed,
        Value_MLBPitchingErrors,
        Value_MLBPitchingFieldersChoice,
        Value_MLBPitchingFlyOuts,
        Value_MLBPitchingFlyOutsIntoDoublePlays,
        Value_MLBPitchingFoulBalls,
        Value_MLBPitchingGamesFinished,
        Value_MLBPitchingGamesPlayed,
        Value_MLBPitchingGamesStarted,
        Value_MLBPitchingGroundBallToFlyBallRatio,
        Value_MLBPitchingGroundOuts,
        Value_MLBPitchingGroundOutsIntoDoublePlays,
        Value_MLBPitchingHitBatters,
        Value_MLBPitchingHitsAllowed,
        Value_MLBPitchingHolds,
        Value_MLBPitchingHomeRunsAllowed,
        Value_MLBPitchingInningsPitchedCompletePartial,
        Value_MLBPitchingInningsPitchedTotalOuts,
        Value_MLBPitchingIntentionalBalls,
        Value_MLBPitchingIntentionalWalks,
        Value_MLBPitchingLineOuts,
        Value_MLBPitchingLineOutsIntoDoublePlays,
        Value_MLBPitchingLosses,
        Value_MLBPitchingOpponentsBattingAverage,
        Value_MLBPitchingOpponentRunnersLeftOnBase,
        Value_MLBPitchingPickoffs,
        Value_MLBPitchingPitchCount,
        Value_MLBPitchingPopOutsForced,
        Value_MLBPitchingQualityStarts,
        Value_MLBPitchingReachedOnError,
        Value_MLBPitchingRunnersCaughtStealing,
        Value_MLBPitchingSacrificeFlys,
        Value_MLBPitchingSacrificeHits,
        Value_MLBPitchingSaveOpportunities,
        Value_MLBPitchingSaves,
        Value_MLBPitchingShutouts,
        Value_MLBPitchingSinglesAllowed,
        Value_MLBPitchingStolenBasesAllowed,
        Value_MLBPitchingStrikeoutsLooking,
        Value_MLBPitchingStrikeoutsPer9Innings,
        Value_MLBPitchingStrikeoutsPerWalk,
        Value_MLBPitchingStrikeoutsSwinging,
        Value_MLBPitchingStrikesLooking,
        Value_MLBPitchingStrikesSwinging,
        Value_MLBPitchingTotalBasesAllowed,
        Value_MLBPitchingTotalRunsAllowed,
        Value_MLBPitchingTotalStrikeouts,
        Value_MLBPitchingTotalStrikes,
        Value_MLBPitchingTriplesAllowed,
        Value_MLBPitchingUnearnedRunsAllowed,
        Value_MLBPitchingWalks,
        Value_MLBPitchingWalksPlusHitsPerInningPitched,
        Value_MLBPitchingWildPitches,
        Value_MLBPitchingWins,
        Value_NHLAssists,
        Value_NHLAssistsPerGame,
        Value_NHLAverageTimeOnIce,
        Value_NHLBlockedAttempts,
        Value_NHLBlockedAttemptsPerGame,
        Value_NHLBlockedShots,
        Value_NHLBlockedShotsPerGame,
        Value_NHLEvenStrengthAssists,
        Value_NHLEvenStrengthFaceoffWinPerc,
        Value_NHLEvenStrengthFaceoffs,
        Value_NHLEvenStrengthFaceoffsLost,
        Value_NHLEvenStrengthFaceoffsWon,
        Value_NHLEvenStrengthGoals,
        Value_NHLEvenStrengthMissedShots,
        Value_NHLEvenStrengthShotsOnGoal,
        Value_NHLEvenStrengthTimeOnIce,
        Value_NHLFaceoffWinPerc,
        Value_NHLFaceoffs,
        Value_NHLFaceoffsWon,
        Value_NHLFaceoffsLost,
        Value_NHLGameWinningGoalFlag,
        Value_NHLGameWinningGoals,
        Value_NHLGamesPlayed,
        Value_NHLGiveaways,
        Value_NHLGiveawaysPerGame,
        Value_NHLGoals,
        Value_NHLGoalsPerGame,
        Value_NHLHits,
        Value_NHLHitsPerGame,
        Value_NHLMissedShots,
        Value_NHLMissedShotsPerGame,
        Value_NHLPenalties,
        Value_NHLPenaltiesPerGame,
        Value_NHLPenaltyGoals,
        Value_NHLPenaltyMinutes,
        Value_NHLPenaltyMinutesPerGame,
        Value_NHLPenaltyMissedShots,
        Value_NHLPenaltyShotsOnGoal,
        Value_NHLPlusMinus,
        Value_NHLPoints,
        Value_NHLPointsPerGame,
        Value_NHLPowerPlayAssists,
        Value_NHLPowerPlayFaceoffWinPerc,
        Value_NHLPowerPlayFaceoffs,
        Value_NHLPowerPlayFaceoffsLost,
        Value_NHLPowerPlayFaceoffsWon,
        Value_NHLPowerPlayGoals,
        Value_NHLPowerPlayMissedShots,
        Value_NHLPowerPlayOpportunities,
        Value_NHLPowerPlayPoints,
        Value_NHLPowerPlayShotsOnGoal,
        Value_NHLPowerPlayTimeOnIce,
        Value_NHLScratches,
        Value_NHLShifts,
        Value_NHLShiftsPerGame,
        Value_NHLShootingPerc,
        Value_NHLShootoutGoals,
        Value_NHLShootoutMissedShots,
        Value_NHLShootoutShotsOnGoal,
        Value_NHLShortHandedAssists,
        Value_NHLShortHandedFaceoffWinPerc,
        Value_NHLShortHandedFaceoffs,
        Value_NHLShortHandedFaceoffsLost,
        Value_NHLShortHandedFaceoffsWon,
        Value_NHLShortHandedGoals,
        Value_NHLShortHandedMissedShots,
        Value_NHLShortHandedPoints,
        Value_NHLShortHandedShotsOnGoal,
        Value_NHLShortHandedTimeOnIce,
        Value_NHLShotsOnGoal,
        Value_NHLShotsOnGoalPerGame,
        Value_NHLTakeaways,
        Value_NHLTakeawaysPerGame,
        Value_NHLTeamPenalties,
        Value_NHLTeamPenaltiesPerGame,
        Value_NHLTeamPenaltyMinutes,
        Value_NHLTeamPenaltyMinutesPerGame,
        Value_NHLTotalTimeOnIce,
        Value_NHLTotalTimeOnIcePerGame,
        Value_NHLGoaltendingEmptyNetEvenStrengthGoalsAgainst,
        Value_NHLGoaltendingEmptyNetGoalsAgainst,
        Value_NHLGoaltendingEmptyNetPowerPlayGoalsAgainst,
        Value_NHLGoaltendingEmptyNetShortHandedGoalsAgainst,
        Value_NHLGoaltendingEmptyNetShotsAgainst,
        Value_NHLGoaltendingEvenStrengthGoalsAgainst,
        Value_NHLGoaltendingEvenStrengthSavePerc,
        Value_NHLGoaltendingEvenStrengthSaves,
        Value_NHLGoaltendingEvenStrengthShotsAgainst,
        Value_NHLGoaltendingGoalsAgainst,
        Value_NHLGoaltendingGoalsAgainstAverage,
        Value_NHLGoaltendingGoalsAgainstPerGame,
        Value_NHLGoaltendingLosses,
        Value_NHLGoaltendingOutcome,
        Value_NHLGoaltendingOvertimeLosses,
        Value_NHLGoaltendingPenaltyGoalsAgainst,
        Value_NHLGoaltendingPenaltySavePerc,
        Value_NHLGoaltendingPenaltySaves,
        Value_NHLGoaltendingPenaltyShotsAgainst,
        Value_NHLGoaltendingPowerPlayGoalsAgainst,
        Value_NHLGoaltendingPowerPlaySavePerc,
        Value_NHLGoaltendingPowerPlaySaves,
        Value_NHLGoaltendingPowerPlayShotsAgainst,
        Value_NHLGoaltendingSavePerc,
        Value_NHLGoaltendingSaves,
        Value_NHLGoaltendingShootoutGoalsAgainst,
        Value_NHLGoaltendingShootoutSavePerc,
        Value_NHLGoaltendingShootoutSaves,
        Value_NHLGoaltendingShootoutShotsAgainst,
        Value_NHLGoaltendingShortHandedGoalsAgainst,
        Value_NHLGoaltendingShortHandedSavePerc,
        Value_NHLGoaltendingShortHandedSaves,
        Value_NHLGoaltendingShortHandedShotsAgainst,
        Value_NHLGoaltendingShotsAgainst,
        Value_NHLGoaltendingShotsAgainstPerGame,
        Value_NHLGoaltendingShutoutFlag,
        Value_NHLGoaltendingShutouts,
        Value_NHLGoaltendingTotalGoalsAgainst,
        Value_NHLGoaltendingTotalShotsAgainst,
        Value_NHLGoaltendingWins,
        Value_NFL3rdDownConversionAttempts,
        Value_NFL3rdDownConversions,
        Value_NFL3rdDownConversionPerc,
        Value_NFL3rdDownConversionsViaPass,
        Value_NFL3rdDownConversionsViaPenalty,
        Value_NFL3rdDownConversionsViaRush,
        Value_NFL4thDownConversionAttempts,
        Value_NFL4thDownConversions,
        Value_NFL4thDownConversionPerc,
        Value_NFL4thDownConversionsViaPass,
        Value_NFL4thDownConversionsViaPenalty,
        Value_NFL4thDownConversionsViaRush,
        Value_NFLGamesPlayed,
        Value_NFLGamesStarted,
        Value_NFLGoalEfficiencyAttempts,
        Value_NFLGoalEfficiencyPerc,
        Value_NFLGoalEfficiencyTouchdowns,
        Value_NFLPassing10PlusYards,
        Value_NFLPassing20PlusYards,
        Value_NFLPassing30PlusYards,
        Value_NFLPassing40PlusYards,
        Value_NFLPassing50PlusYards,
        Value_NFLPassingAttempts,
        Value_NFLPassingAverageYardsPerCompletion,
        Value_NFLPassingAverageYardsPerAttempt,
        Value_NFLPassingCompletionPerc,
        Value_NFLPassingCompletions,
        Value_NFLPassing1stDowns,
        Value_NFLPassingGrossYards,
        Value_NFLPassingInterceptionPerc,
        Value_NFLPassingInterceptions,
        Value_NFLPassingInterceptionsReturnedForTouchdown,
        Value_NFLPassingLongestPass,
        Value_NFLPassingNetYards,
        Value_NFLPassingRating,
        Value_NFLPassingRedZoneAttempts,
        Value_NFLPassingSacked,
        Value_NFLPassingSackedYardsLost,
        Value_NFLPassingTackledForSafety,
        Value_NFLPassingTotalYards,
        Value_NFLPassingTouchdownPerc,
        Value_NFLPassingTouchdowns,
        Value_NFLReceiving10PlusYards,
        Value_NFLReceiving20PlusYards,
        Value_NFLReceiving30PlusYards,
        Value_NFLReceiving40PlusYards,
        Value_NFLReceiving50PlusYards,
        Value_NFLReceivingAverageReception,
        Value_NFLReceiving1stDowns,
        Value_NFLReceivingFumbledOnReception,
        Value_NFLReceivingLongestReception,
        Value_NFLReceivingReceptions,
        Value_NFLReceivingRedZoneTargets,
        Value_NFLReceivingTargets,
        Value_NFLReceivingTotalYards,
        Value_NFLReceivingTouchdowns,
        Value_NFLReceivingYardsAfterCompletion,
        Value_NFLRedZoneEfficiencyAttempts,
        Value_NFLRedZoneEfficiencyConversions,
        Value_NFLRedZoneEfficiencyPerc,
        Value_NFLRushing10PlusYards,
        Value_NFLRushing20PlusYards,
        Value_NFLRushing30PlusYards,
        Value_NFLRushing40PlusYards,
        Value_NFLRushing50PlusYards,
        Value_NFLRushingAttempts,
        Value_NFLRushingAverageRush,
        Value_NFLRushing1stDownPerc,
        Value_NFLRushing1stDowns,
        Value_NFLRushingFumbledOnRush,
        Value_NFLRushingLongestRush,
        Value_NFLRushingRedZoneAttempts,
        Value_NFLRushingTackledForSafety,
        Value_NFLRushingTotalYards,
        Value_NFLRushingTouchdowns,
        Value_NFL1stDowns,
        Value_NFL2PointConversionsAttempted,
        Value_NFL2PointConversionsFailed,
        Value_NFL2PointConversionsMade,
        Value_NFL2PointConversionsPassing,
        Value_NFL2PointConversionsReceiving,
        Value_NFL2PointConversionsRushing,
        Value_NFL1PointSafety,
        Value_NFLBlockedKicks,
        Value_NFLConversionAttempts,
        Value_NFLConversionsCompleted,
        Value_NFLConversionsFailed,
        Value_NFLForcedFumbles,
        Value_NFLFumblesRecovered,
        Value_NFLFumblesRecoveredForTouchdowns,
        Value_NFLInterceptions,
        Value_NFLInterceptionsLongestInterception,
        Value_NFLInterceptionsTouchdowns,
        Value_NFLInterceptionsYards,
        Value_NFLMiscAssistedTackles,
        Value_NFLMiscCombinedTackles,
        Value_NFLMiscForcedFumbles,
        Value_NFLMiscFumblesRecovered,
        Value_NFLMiscTackles,
        Value_NFLPassesDefended,
        Value_NFLQuarterbackHits,
        Value_NFLSacks,
        Value_NFLSackYards,
        Value_NFLSafeties,
        Value_NFLSpecialTeamsAssistedTackles,
        Value_NFLSpecialTeamsCombinedTackles,
        Value_NFLSpecialTeamsForcedFumbles,
        Value_NFLSpecialTeamsFumblesRecovered,
        Value_NFLSpecialTeamsTotalTackles,
        Value_NFLTacklesAssisted,
        Value_NFLTacklesCombined,
        Value_NFLTacklesForLoss,
        Value_NFLTackles,
        Value_NFLBlockedFieldGoalReturns10PlusYards,
        Value_NFLBlockedFieldGoalReturns20PlusYards,
        Value_NFLBlockedFieldGoalReturns30PlusYards,
        Value_NFLBlockedFieldGoalReturns40PlusYards,
        Value_NFLBlockedFieldGoalReturns50PlusYards,
        Value_NFLBlockedFieldGoalReturnsAverageReturn,
        Value_NFLBlockedFieldGoalReturnsLongestReturn,
        Value_NFLBlockedFieldGoalReturns,
        Value_NFLBlockedFieldGoalReturnsTotalYards,
        Value_NFLBlockedFieldGoalReturnsTouchdowns,
        Value_NFLBlockedPuntReturn10PlusYards,
        Value_NFLBlockedPuntReturn20PlusYards,
        Value_NFLBlockedPuntReturn30PlusYards,
        Value_NFLBlockedPuntReturn40PlusYards,
        Value_NFLBlockedPuntReturn50PlusYards,
        Value_NFLBlockedPuntReturnsAverageReturn,
        Value_NFLBlockedPuntReturnsLongestReturn,
        Value_NFLBlockedPuntReturns,
        Value_NFLBlockedPuntReturnsTotalYards,
        Value_NFLBlockedPuntReturnsTouchdowns,
        Value_NFLExtraPointsAttempted,
        Value_NFLExtraPointsAttemptedKicking,
        Value_NFLExtraPointsAttempted2PointConversion,
        Value_NFLExtraPointsBlocked,
        Value_NFLExtraPointsMade,
        Value_NFLExtraPointsMadeKicking,
        Value_NFLExtraPointsMade2PointConversion,
        Value_NFLExtraPointsPerc,
        Value_NFLFieldGoalReturns10PlusYards,
        Value_NFLFieldGoalReturns20PlusYards,
        Value_NFLFieldGoalReturns30PlusYards,
        Value_NFLFieldGoalReturns40PlusYards,
        Value_NFLFieldGoalReturns50PlusYards,
        Value_NFLFieldGoalReturnsAverageReturn,
        Value_NFLFieldGoalReturnsLongestReturn,
        Value_NFLFieldGoalReturns,
        Value_NFLFieldGoalReturnsTotalYards,
        Value_NFLFieldGoalReturnsTouchdowns,
        Value_NFLFieldGoalsAttempted,
        Value_NFLFieldGoalsAttempted1to19Yards,
        Value_NFLFieldGoalsAttempted20to29Yards,
        Value_NFLFieldGoalsAttempted30to39Yards,
        Value_NFLFieldGoalsAttempted40to49Yards,
        Value_NFLFieldGoalsAttempted50PlusYards,
        Value_NFLFieldGoalsBlocked,
        Value_NFLFieldGoalsLongestMade,
        Value_NFLFieldGoalsMade,
        Value_NFLFieldGoalsMade1to19Yards,
        Value_NFLFieldGoalsMade20to29Yards,
        Value_NFLFieldGoalsMade30to39Yards,
        Value_NFLFieldGoalsMade40to49Yards,
        Value_NFLFieldGoalsMade50PlusYards,
        Value_NFLFieldGoalsPerc,
        Value_NFLKickoffReturns10PlusYards,
        Value_NFLKickoffReturns20PlusYards,
        Value_NFLKickoffReturns30PlusYards,
        Value_NFLKickoffReturns40PlusYards,
        Value_NFLKickoffReturns50PlusYards,
        Value_NFLKickoffReturnsAverageRun,
        Value_NFLKickoffReturnsFairCatches,
        Value_NFLKickoffReturnsLongestKickReturn,
        Value_NFLKickoffReturnsReturns,
        Value_NFLKickoffReturnsTouchdowns,
        Value_NFLKickoffReturnsYards,
        Value_NFLKickoffsAverageGrossYards,
        Value_NFLKickoffsAverageNetYards,
        Value_NFLKickoffsAverageReturnYards,
        Value_NFLKickoffsEndZoneKicks,
        Value_NFLKickoffsGrossYards,
        Value_NFLKickoffsInsideOpponents20YardLine,
        Value_NFLKickoffsKicks,
        Value_NFLKickoffsLongestKick,
        Value_NFLKickoffsNetYards,
        Value_NFLKickoffsInsideOpponents20YardLinePerc,
        Value_NFLKickoffsTouchbacksPerc,
        Value_NFLKickoffsReturned,
        Value_NFLKickoffsTotalReturnYards,
        Value_NFLKickoffsTouchbacks,
        Value_NFLPuntReturns10PlusYards,
        Value_NFLPuntReturns20PlusYards,
        Value_NFLPuntReturns30PlusYards,
        Value_NFLPuntReturns40PlusYards,
        Value_NFLPuntReturns50PlusYards,
        Value_NFLPuntReturnsAverageRun,
        Value_NFLPuntReturnsFairCatches,
        Value_NFLPuntReturnsLongestKickReturn,
        Value_NFLPuntReturns,
        Value_NFLPuntReturnsTouchdowns,
        Value_NFLPuntReturnsYards,
        Value_NFLPuntingAverageGrossYards,
        Value_NFLPuntingAverageNetYards,
        Value_NFLPuntingAverageReturnYards,
        Value_NFLPuntingBlocked,
        Value_NFLPuntingGrossYards,
        Value_NFLPuntingInsideOpponents20YardLine,
        Value_NFLPuntingLongestPunt,
        Value_NFLPuntingNetYards,
        Value_NFLPuntingInsideOpponents20YardLinePerc,
        Value_NFLPuntingTouchbacksPerc,
        Value_NFLPuntingPunts,
        Value_NFLPuntingReturnYards,
        Value_NFLPuntingReturned,
        Value_NFLPuntingTouchbacks,
        Value_NFLFumblesForced,
        Value_NFLFumbles,
        Value_NFLFumblesLost,
        Value_NFLFumblesOpponentRecovery,
        Value_NFLFumblesOpponentTouchdownsFromRecovery,
        Value_NFLFumblesOutOfBounds,
        Value_NFLFumblesOwnRecovery,
        Value_NFLFumblesOwnTouchdownsFromRecovery,
        Value_NFLFumblesYardsFromOpponentRecovery,
        Value_NFLFumblesYardsFromOwnRecovery,
        Value_NFLPenalties1stDowns,
        Value_NFLPenalties,
        Value_NFLPenaltiesYards,
        Value_NCAAFB3rdDownConversionAttempts,
        Value_NCAAFB3rdDownConversions,
        Value_NCAAFB3rdDownConversionPerc,
        Value_NCAAFB3rdDownConversionsViaPass,
        Value_NCAAFB3rdDownConversionsViaPenalty,
        Value_NCAAFB3rdDownConversionsViaRush,
        Value_NCAAFB4thDownConversionAttempts,
        Value_NCAAFB4thDownConversions,
        Value_NCAAFB4thDownConversionPerc,
        Value_NCAAFB4thDownConversionsViaPass,
        Value_NCAAFB4thDownConversionsViaPenalty,
        Value_NCAAFB4thDownConversionsViaRush,
        Value_NCAAFBGamesPlayed,
        Value_NCAAFBGamesStarted,
        Value_NCAAFBGoalEfficiencyAttempts,
        Value_NCAAFBGoalEfficiencyPerc,
        Value_NCAAFBGoalEfficiencyTouchdowns,
        Value_NCAAFBPassing10PlusYards,
        Value_NCAAFBPassing20PlusYards,
        Value_NCAAFBPassing30PlusYards,
        Value_NCAAFBPassing40PlusYards,
        Value_NCAAFBPassing50PlusYards,
        Value_NCAAFBPassingAttempts,
        Value_NCAAFBPassingAverageYardsPerCompletion,
        Value_NCAAFBPassingAverageYardsPerAttempt,
        Value_NCAAFBPassingCompletionPerc,
        Value_NCAAFBPassingCompletions,
        Value_NCAAFBPassing1stDowns,
        Value_NCAAFBPassingGrossYards,
        Value_NCAAFBPassingInterceptionPerc,
        Value_NCAAFBPassingInterceptions,
        Value_NCAAFBPassingInterceptionsReturnedForTouchdown,
        Value_NCAAFBPassingLongestPass,
        Value_NCAAFBPassingNetYards,
        Value_NCAAFBPassingRating,
        Value_NCAAFBPassingRedZoneAttempts,
        Value_NCAAFBPassingSacked,
        Value_NCAAFBPassingSackedYardsLost,
        Value_NCAAFBPassingTackledForSafety,
        Value_NCAAFBPassingTotalYards,
        Value_NCAAFBPassingTouchdownPerc,
        Value_NCAAFBPassingTouchdowns,
        Value_NCAAFBReceiving10PlusYards,
        Value_NCAAFBReceiving20PlusYards,
        Value_NCAAFBReceiving30PlusYards,
        Value_NCAAFBReceiving40PlusYards,
        Value_NCAAFBReceiving50PlusYards,
        Value_NCAAFBReceivingAverageReception,
        Value_NCAAFBReceiving1stDowns,
        Value_NCAAFBReceivingFumbledOnReception,
        Value_NCAAFBReceivingLongestReception,
        Value_NCAAFBReceivingReceptions,
        Value_NCAAFBReceivingRedZoneTargets,
        Value_NCAAFBReceivingTargets,
        Value_NCAAFBReceivingTotalYards,
        Value_NCAAFBReceivingTouchdowns,
        Value_NCAAFBReceivingYardsAfterCompletion,
        Value_NCAAFBRedZoneEfficiencyAttempts,
        Value_NCAAFBRedZoneEfficiencyConversions,
        Value_NCAAFBRedZoneEfficiencyPerc,
        Value_NCAAFBRushing10PlusYards,
        Value_NCAAFBRushing20PlusYards,
        Value_NCAAFBRushing30PlusYards,
        Value_NCAAFBRushing40PlusYards,
        Value_NCAAFBRushing50PlusYards,
        Value_NCAAFBRushingAttempts,
        Value_NCAAFBRushingAverageRush,
        Value_NCAAFBRushing1stDownPerc,
        Value_NCAAFBRushing1stDowns,
        Value_NCAAFBRushingFumbledOnRush,
        Value_NCAAFBRushingLongestRush,
        Value_NCAAFBRushingRedZoneAttempts,
        Value_NCAAFBRushingTackledForSafety,
        Value_NCAAFBRushingTotalYards,
        Value_NCAAFBRushingTouchdowns,
        Value_NCAAFB1stDowns,
        Value_NCAAFB2PointConversionsAttempted,
        Value_NCAAFB2PointConversionsFailed,
        Value_NCAAFB2PointConversionsMade,
        Value_NCAAFB2PointConversionsPassing,
        Value_NCAAFB2PointConversionsReceiving,
        Value_NCAAFB2PointConversionsRushing,
        Value_NCAAFBBlockedKicks,
        Value_NCAAFBForcedFumbles,
        Value_NCAAFBFumblesRecovered,
        Value_NCAAFBFumblesRecoveredForTouchdowns,
        Value_NCAAFBInterceptions,
        Value_NCAAFBInterceptionsLongestInterception,
        Value_NCAAFBInterceptionsTouchdowns,
        Value_NCAAFBInterceptionsYards,
        Value_NCAAFBMiscAssistedTackles,
        Value_NCAAFBMiscCombinedTackles,
        Value_NCAAFBMiscForcedFumbles,
        Value_NCAAFBMiscFumblesRecovered,
        Value_NCAAFBMiscTackles,
        Value_NCAAFBPassesDefended,
        Value_NCAAFBQuarterbackHits,
        Value_NCAAFBSacks,
        Value_NCAAFBSackYards,
        Value_NCAAFBSafeties,
        Value_NCAAFBSpecialTeamsAssistedTackles,
        Value_NCAAFBSpecialTeamsCombinedTackles,
        Value_NCAAFBSpecialTeamsForcedFumbles,
        Value_NCAAFBSpecialTeamsFumblesRecovered,
        Value_NCAAFBSpecialTeamsTotalTackles,
        Value_NCAAFBTacklesAssisted,
        Value_NCAAFBTacklesCombined,
        Value_NCAAFBTacklesForLoss,
        Value_NCAAFBTackles,
        Value_NCAAFBBlockedFieldGoalReturns10PlusYards,
        Value_NCAAFBBlockedFieldGoalReturns20PlusYards,
        Value_NCAAFBBlockedFieldGoalReturns30PlusYards,
        Value_NCAAFBBlockedFieldGoalReturns40PlusYards,
        Value_NCAAFBBlockedFieldGoalReturns50PlusYards,
        Value_NCAAFBBlockedFieldGoalReturnsAverageReturn,
        Value_NCAAFBBlockedFieldGoalReturnsLongestReturn,
        Value_NCAAFBBlockedFieldGoalReturns,
        Value_NCAAFBBlockedFieldGoalReturnsTotalYards,
        Value_NCAAFBBlockedFieldGoalReturnsTouchdowns,
        Value_NCAAFBBlockedPuntReturn10PlusYards,
        Value_NCAAFBBlockedPuntReturn20PlusYards,
        Value_NCAAFBBlockedPuntReturn30PlusYards,
        Value_NCAAFBBlockedPuntReturn40PlusYards,
        Value_NCAAFBBlockedPuntReturn50PlusYards,
        Value_NCAAFBBlockedPuntReturnsAverageReturn,
        Value_NCAAFBBlockedPuntReturnsLongestReturn,
        Value_NCAAFBBlockedPuntReturns,
        Value_NCAAFBBlockedPuntReturnsTotalYards,
        Value_NCAAFBBlockedPuntReturnsTouchdowns,
        Value_NCAAFBExtraPointsAttempted,
        Value_NCAAFBExtraPointsAttemptedKicking,
        Value_NCAAFBExtraPointsAttempted2PointConversion,
        Value_NCAAFBExtraPointsBlocked,
        Value_NCAAFBExtraPointsMade,
        Value_NCAAFBExtraPointsMadeKicking,
        Value_NCAAFBExtraPointsMade2PointConversion,
        Value_NCAAFBExtraPointsPerc,
        Value_NCAAFBFieldGoalReturns10PlusYards,
        Value_NCAAFBFieldGoalReturns20PlusYards,
        Value_NCAAFBFieldGoalReturns30PlusYards,
        Value_NCAAFBFieldGoalReturns40PlusYards,
        Value_NCAAFBFieldGoalReturns50PlusYards,
        Value_NCAAFBFieldGoalReturnsAverageReturn,
        Value_NCAAFBFieldGoalReturnsLongestReturn,
        Value_NCAAFBFieldGoalReturns,
        Value_NCAAFBFieldGoalReturnsTotalYards,
        Value_NCAAFBFieldGoalReturnsTouchdowns,
        Value_NCAAFBFieldGoalsAttempted,
        Value_NCAAFBFieldGoalsAttempted1to19Yards,
        Value_NCAAFBFieldGoalsAttempted20to29Yards,
        Value_NCAAFBFieldGoalsAttempted30to39Yards,
        Value_NCAAFBFieldGoalsAttempted40to49Yards,
        Value_NCAAFBFieldGoalsAttempted50PlusYards,
        Value_NCAAFBFieldGoalsBlocked,
        Value_NCAAFBFieldGoalsLongestMade,
        Value_NCAAFBFieldGoalsMade,
        Value_NCAAFBFieldGoalsMade1to19Yards,
        Value_NCAAFBFieldGoalsMade20to29Yards,
        Value_NCAAFBFieldGoalsMade30to39Yards,
        Value_NCAAFBFieldGoalsMade40to49Yards,
        Value_NCAAFBFieldGoalsMade50PlusYards,
        Value_NCAAFBFieldGoalsPerc,
        Value_NCAAFBKickoffReturns10PlusYards,
        Value_NCAAFBKickoffReturns20PlusYards,
        Value_NCAAFBKickoffReturns30PlusYards,
        Value_NCAAFBKickoffReturns40PlusYards,
        Value_NCAAFBKickoffReturns50PlusYards,
        Value_NCAAFBKickoffReturnsAverageRun,
        Value_NCAAFBKickoffReturnsFairCatches,
        Value_NCAAFBKickoffReturnsLongestKickReturn,
        Value_NCAAFBKickoffReturnsReturns,
        Value_NCAAFBKickoffReturnsTouchdowns,
        Value_NCAAFBKickoffReturnsYards,
        Value_NCAAFBKickoffsAverageGrossYards,
        Value_NCAAFBKickoffsAverageNetYards,
        Value_NCAAFBKickoffsAverageReturnYards,
        Value_NCAAFBKickoffsEndZoneKicks,
        Value_NCAAFBKickoffsGrossYards,
        Value_NCAAFBKickoffsInsideOpponents20YardLine,
        Value_NCAAFBKickoffsKicks,
        Value_NCAAFBKickoffsLongestKick,
        Value_NCAAFBKickoffsNetYards,
        Value_NCAAFBKickoffsInsideOpponents20YardLinePerc,
        Value_NCAAFBKickoffsTouchbacksPerc,
        Value_NCAAFBKickoffsReturned,
        Value_NCAAFBKickoffsTotalReturnYards,
        Value_NCAAFBKickoffsTouchbacks,
        Value_NCAAFBPuntReturns10PlusYards,
        Value_NCAAFBPuntReturns20PlusYards,
        Value_NCAAFBPuntReturns30PlusYards,
        Value_NCAAFBPuntReturns40PlusYards,
        Value_NCAAFBPuntReturns50PlusYards,
        Value_NCAAFBPuntReturnsAverageRun,
        Value_NCAAFBPuntReturnsFairCatches,
        Value_NCAAFBPuntReturnsLongestKickReturn,
        Value_NCAAFBPuntReturns,
        Value_NCAAFBPuntReturnsTouchdowns,
        Value_NCAAFBPuntReturnsYards,
        Value_NCAAFBPuntingAverageGrossYards,
        Value_NCAAFBPuntingAverageNetYards,
        Value_NCAAFBPuntingAverageReturnYards,
        Value_NCAAFBPuntingBlocked,
        Value_NCAAFBPuntingGrossYards,
        Value_NCAAFBPuntingInsideOpponents20YardLine,
        Value_NCAAFBPuntingLongestPunt,
        Value_NCAAFBPuntingNetYards,
        Value_NCAAFBPuntingInsideOpponents20YardLinePerc,
        Value_NCAAFBPuntingTouchbacksPerc,
        Value_NCAAFBPuntingPunts,
        Value_NCAAFBPuntingReturnYards,
        Value_NCAAFBPuntingReturned,
        Value_NCAAFBPuntingTouchbacks,
        Value_NCAAFBFumblesForced,
        Value_NCAAFBFumbles,
        Value_NCAAFBFumblesLost,
        Value_NCAAFBFumblesOpponentRecovery,
        Value_NCAAFBFumblesOpponentTouchdownsFromRecovery,
        Value_NCAAFBFumblesOutOfBounds,
        Value_NCAAFBFumblesOwnRecovery,
        Value_NCAAFBFumblesOwnTouchdownsFromRecovery,
        Value_NCAAFBFumblesYardsFromOpponentRecovery,
        Value_NCAAFBFumblesYardsFromOwnRecovery,
        Value_NCAAFBPenalties1stDowns,
        Value_NCAAFBPenalties,
        Value_NCAAFBPenaltiesYards,
        Value_NBAAssists,
        Value_NBAAssistsPerGame,
        Value_NBAAssistsToTurnoverRatio,
        Value_NBABlockedAttempts,
        Value_NBABlockedAttemptsPerGame,
        Value_NBABlockedShots,
        Value_NBABlockedShotsPerGame,
        Value_NBACoachTechnicalFouls,
        Value_NBADefensiveRebounds,
        Value_NBADefensiveReboundsPerGame,
        Value_NBAEjections,
        Value_NBAFastBreakPoints,
        Value_NBAFastBreakPointsPerGame,
        Value_NBAFieldGoalAttempts,
        Value_NBAFieldGoalAttemptsPerGame,
        Value_NBAFieldGoalPercentage,
        Value_NBAFieldGoalsMade,
        Value_NBAFieldGoalsMadePerGame,
        Value_NBAFlagrantFouls,
        Value_NBAFlagrantFoulsPerGame,
        Value_NBAFreeThrowAttempts,
        Value_NBAFreeThrowAttemptsPerGame,
        Value_NBAFreeThrowPercentage,
        Value_NBAFreeThrowsMade,
        Value_NBAFreeThrowsMadePerGame,
        Value_NBAGamesPlayed,
        Value_NBAGamesStarted,
        Value_NBAMinutesPlayed,
        Value_NBAMinutesPlayedPerGame,
        Value_NBAOffensiveRebounds,
        Value_NBAOffensiveReboundsPerGame,
        Value_NBAPersonalFouls,
        Value_NBAPersonalFoulsPerGame,
        Value_NBAPoints,
        Value_NBAPointsPerGame,
        Value_NBAPointsInPaint,
        Value_NBAPointsInPaintPerGame,
        Value_NBAPointsOffTurnovers,
        Value_NBAPointsOffTurnoversPerGame,
        Value_NBARebounds,
        Value_NBAReboundsPerGame,
        Value_NBASecondChancePoints,
        Value_NBASecondChancePointsPerGame,
        Value_NBASteals,
        Value_NBAStealsPerGame,
        Value_NBATeamTechnicalFouls,
        Value_NBAPlayerTechnicalFouls,
        Value_NBAThreePointAttempts,
        Value_NBAThreePointAttemptsPerGame,
        Value_NBAThreePointPercentage,
        Value_NBAThreePointsMade,
        Value_NBAThreePointsMadePerGame,
        Value_NBATurnovers,
        Value_NBATurnoversPerGame,
        Value_NBATwoPointAttempts,
        Value_NBATwoPointAttemptsPerGame,
        Value_NBATwoPointPercentage,
        Value_NBATwoPointsMade,
        Value_NBATwoPointsMadePerGame,
        Value_NCAAMBAssists,
        Value_NCAAMBAssistsPerGame,
        Value_NCAAMBAssistsToTurnoverRatio,
        Value_NCAAMBBlockedAttempts,
        Value_NCAAMBBlockedAttemptsPerGame,
        Value_NCAAMBBlockedShots,
        Value_NCAAMBBlockedShotsPerGame,
        Value_NCAAMBCoachTechnicalFouls,
        Value_NCAAMBDefensiveRebounds,
        Value_NCAAMBDefensiveReboundsPerGame,
        Value_NCAAMBEjections,
        Value_NCAAMBFastBreakPoints,
        Value_NCAAMBFastBreakPointsPerGame,
        Value_NCAAMBFieldGoalAttempts,
        Value_NCAAMBFieldGoalAttemptsPerGame,
        Value_NCAAMBFieldGoalPercentage,
        Value_NCAAMBFieldGoalsMade,
        Value_NCAAMBFieldGoalsMadePerGame,
        Value_NCAAMBFlagrantFouls,
        Value_NCAAMBFlagrantFoulsPerGame,
        Value_NCAAMBFreeThrowAttempts,
        Value_NCAAMBFreeThrowAttemptsPerGame,
        Value_NCAAMBFreeThrowPercentage,
        Value_NCAAMBFreeThrowsMade,
        Value_NCAAMBFreeThrowsMadePerGame,
        Value_NCAAMBGamesPlayed,
        Value_NCAAMBGamesStarted,
        Value_NCAAMBMinutesPlayed,
        Value_NCAAMBMinutesPlayedPerGame,
        Value_NCAAMBOffensiveRebounds,
        Value_NCAAMBOffensiveReboundsPerGame,
        Value_NCAAMBPersonalFouls,
        Value_NCAAMBPersonalFoulsPerGame,
        Value_NCAAMBPoints,
        Value_NCAAMBPointsPerGame,
        Value_NCAAMBPointsInPaint,
        Value_NCAAMBPointsInPaintPerGame,
        Value_NCAAMBPointsOffTurnovers,
        Value_NCAAMBPointsOffTurnoversPerGame,
        Value_NCAAMBRebounds,
        Value_NCAAMBReboundsPerGame,
        Value_NCAAMBSecondChancePoints,
        Value_NCAAMBSecondChancePointsPerGame,
        Value_NCAAMBSteals,
        Value_NCAAMBStealsPerGame,
        Value_NCAAMBTeamTechnicalFouls,
        Value_NCAAMBPlayerTechnicalFouls,
        Value_NCAAMBThreePointAttempts,
        Value_NCAAMBThreePointAttemptsPerGame,
        Value_NCAAMBThreePointPercentage,
        Value_NCAAMBThreePointsMade,
        Value_NCAAMBThreePointsMadePerGame,
        Value_NCAAMBTurnovers,
        Value_NCAAMBTurnoversPerGame,
        Value_NCAAMBTwoPointAttempts,
        Value_NCAAMBTwoPointAttemptsPerGame,
        Value_NCAAMBTwoPointPercentage,
        Value_NCAAMBTwoPointsMade,
        Value_NCAAMBTwoPointsMadePerGame,
        Value_SoccerBallPossessions,
        Value_SoccerCardsGiven,
        Value_SoccerCornerKicks,
        Value_SoccerFreeKicks,
        Value_SoccerGoalAttempts,
        Value_SoccerGoalsByFoot,
        Value_SoccerGoalsByHeaders,
        Value_SoccerGoalsByTime00To15,
        Value_SoccerGoalsByTime16To30,
        Value_SoccerGoalsByTime31To45,
        Value_SoccerGoalsByTime46To60,
        Value_SoccerGoalsByTime61To75,
        Value_SoccerGoalsByTime76To90,
        Value_SoccerGoalsConceded,
        Value_SoccerGoalsConcededByTime00To15,
        Value_SoccerGoalsConcededByTime16To30,
        Value_SoccerGoalsConcededByTime31To45,
        Value_SoccerGoalsConcededByTime46To60,
        Value_SoccerGoalsConcededByTime61To75,
        Value_SoccerGoalsConcededByTime76To90,
        Value_SoccerGoalsScored,
        Value_SoccerMatchesPlayed,
        Value_SoccerOffsides,
        Value_SoccerOwnGoals,
        Value_SoccerShotsBlocked,
        Value_SoccerShotsOffGoal,
        Value_SoccerShotsOnGoal,
        Value_SoccerSubstitutedIn,
        Value_SoccerSubstitutedOut,
        Value__none
      };
    public struct TypeValue
      {
        public bool in_known_list;
        public string string_value;
        public TypeValueKnownValues list_value;
      };

    public static TypeValueKnownValues  stringToValue(string chars)
      {
        switch (chars[0])
          {
            case 'M':
                if (String.Compare(chars, 1, "LB", 0, 2, false) == 0)
                  {
                    switch (chars[3])
                      {
                        case 'B':
                            if (String.Compare(chars, 4, "aserunning", 0, 10, false) == 0)
                              {
                                switch (chars[14])
                                  {
                                    case 'C':
                                        if ((String.Compare(chars, 15, "aughtStealing", 0, 13, false) == 0) && (chars.Length == 28))
                                            return TypeValueKnownValues.Value_MLBBaserunningCaughtStealing;
                                        break;
                                    case 'P':
                                        if ((String.Compare(chars, 15, "ickoffs", 0, 7, false) == 0) && (chars.Length == 22))
                                            return TypeValueKnownValues.Value_MLBBaserunningPickoffs;
                                        break;
                                    case 'S':
                                        if (String.Compare(chars, 15, "tolenBase", 0, 9, false) == 0)
                                          {
                                            switch (chars[24])
                                              {
                                                case 'P':
                                                    if ((String.Compare(chars, 25, "erc", 0, 3, false) == 0) && (chars.Length == 28))
                                                        return TypeValueKnownValues.Value_MLBBaserunningStolenBasePerc;
                                                    break;
                                                case 's':
                                                    if (chars.Length == 25)
                                                        return TypeValueKnownValues.Value_MLBBaserunningStolenBases;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'F':
                            if (String.Compare(chars, 4, "ielding", 0, 7, false) == 0)
                              {
                                switch (chars[11])
                                  {
                                    case 'A':
                                        if ((String.Compare(chars, 12, "ssists", 0, 6, false) == 0) && (chars.Length == 18))
                                            return TypeValueKnownValues.Value_MLBFieldingAssists;
                                        break;
                                    case 'C':
                                        if ((String.Compare(chars, 12, "ompleteGames", 0, 12, false) == 0) && (chars.Length == 24))
                                            return TypeValueKnownValues.Value_MLBFieldingCompleteGames;
                                        break;
                                    case 'D':
                                        if ((String.Compare(chars, 12, "oublePlays", 0, 10, false) == 0) && (chars.Length == 22))
                                            return TypeValueKnownValues.Value_MLBFieldingDoublePlays;
                                        break;
                                    case 'E':
                                        if ((String.Compare(chars, 12, "rrors", 0, 5, false) == 0) && (chars.Length == 17))
                                            return TypeValueKnownValues.Value_MLBFieldingErrors;
                                        break;
                                    case 'F':
                                        if ((String.Compare(chars, 12, "ieldingPercentage", 0, 17, false) == 0) && (chars.Length == 29))
                                            return TypeValueKnownValues.Value_MLBFieldingFieldingPercentage;
                                        break;
                                    case 'G':
                                        if (String.Compare(chars, 12, "ames", 0, 4, false) == 0)
                                          {
                                            switch (chars[16])
                                              {
                                                case 'F':
                                                    if ((String.Compare(chars, 17, "inished", 0, 7, false) == 0) && (chars.Length == 24))
                                                        return TypeValueKnownValues.Value_MLBFieldingGamesFinished;
                                                    break;
                                                case 'P':
                                                    if ((String.Compare(chars, 17, "layed", 0, 5, false) == 0) && (chars.Length == 22))
                                                        return TypeValueKnownValues.Value_MLBFieldingGamesPlayed;
                                                    break;
                                                case 'S':
                                                    if ((String.Compare(chars, 17, "tarted", 0, 6, false) == 0) && (chars.Length == 23))
                                                        return TypeValueKnownValues.Value_MLBFieldingGamesStarted;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'P':
                                        switch (chars[12])
                                          {
                                            case 'a':
                                                if ((String.Compare(chars, 13, "ssedBalls", 0, 9, false) == 0) && (chars.Length == 22))
                                                    return TypeValueKnownValues.Value_MLBFieldingPassedBalls;
                                                break;
                                            case 'u':
                                                if ((String.Compare(chars, 13, "touts", 0, 5, false) == 0) && (chars.Length == 18))
                                                    return TypeValueKnownValues.Value_MLBFieldingPutouts;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'R':
                                        if ((String.Compare(chars, 12, "angeFactor", 0, 10, false) == 0) && (chars.Length == 22))
                                            return TypeValueKnownValues.Value_MLBFieldingRangeFactor;
                                        break;
                                    case 'T':
                                        switch (chars[12])
                                          {
                                            case 'o':
                                                if ((String.Compare(chars, 13, "talChances", 0, 10, false) == 0) && (chars.Length == 23))
                                                    return TypeValueKnownValues.Value_MLBFieldingTotalChances;
                                                break;
                                            case 'r':
                                                if ((String.Compare(chars, 13, "iplePlays", 0, 9, false) == 0) && (chars.Length == 22))
                                                    return TypeValueKnownValues.Value_MLBFieldingTriplePlays;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'H':
                            if (String.Compare(chars, 4, "itting", 0, 6, false) == 0)
                              {
                                switch (chars[10])
                                  {
                                    case 'A':
                                        if (String.Compare(chars, 11, "tBats", 0, 5, false) == 0)
                                          {
                                            if (chars.Length == 16)
                                              {
                                                return TypeValueKnownValues.Value_MLBHittingAtBats;
                                              }
                                            switch (chars[16])
                                              {
                                                case 'P':
                                                    if (String.Compare(chars, 17, "er", 0, 2, false) == 0)
                                                      {
                                                        switch (chars[19])
                                                          {
                                                            case 'H':
                                                                if ((String.Compare(chars, 20, "omeRun", 0, 6, false) == 0) && (chars.Length == 26))
                                                                    return TypeValueKnownValues.Value_MLBHittingAtBatsPerHomeRun;
                                                                break;
                                                            case 'S':
                                                                if ((String.Compare(chars, 20, "trikeout", 0, 8, false) == 0) && (chars.Length == 28))
                                                                    return TypeValueKnownValues.Value_MLBHittingAtBatsPerStrikeout;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'W':
                                                    if ((String.Compare(chars, 17, "ithRunnersInScoringPosition", 0, 27, false) == 0) && (chars.Length == 44))
                                                        return TypeValueKnownValues.Value_MLBHittingAtBatsWithRunnersInScoringPosition;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'B':
                                        if (String.Compare(chars, 11, "a", 0, 1, false) == 0)
                                          {
                                            switch (chars[12])
                                              {
                                                case 'l':
                                                    if (String.Compare(chars, 13, "ls", 0, 2, false) == 0)
                                                      {
                                                        if (chars.Length == 15)
                                                          {
                                                            return TypeValueKnownValues.Value_MLBHittingBalls;
                                                          }
                                                        switch (chars[15])
                                                          {
                                                            case 'I':
                                                                if ((String.Compare(chars, 16, "nPlay", 0, 5, false) == 0) && (chars.Length == 21))
                                                                    return TypeValueKnownValues.Value_MLBHittingBallsInPlay;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if (String.Compare(chars, 13, "tingAverage", 0, 11, false) == 0)
                                                      {
                                                        if (chars.Length == 24)
                                                          {
                                                            return TypeValueKnownValues.Value_MLBHittingBattingAverage;
                                                          }
                                                        switch (chars[24])
                                                          {
                                                            case 'O':
                                                                if ((String.Compare(chars, 25, "nBallsInPlay", 0, 12, false) == 0) && (chars.Length == 37))
                                                                    return TypeValueKnownValues.Value_MLBHittingBattingAverageOnBallsInPlay;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'C':
                                        switch (chars[11])
                                          {
                                            case 'o':
                                                if ((String.Compare(chars, 12, "mpleteGames", 0, 11, false) == 0) && (chars.Length == 23))
                                                    return TypeValueKnownValues.Value_MLBHittingCompleteGames;
                                                break;
                                            case 'y':
                                                if ((String.Compare(chars, 12, "cles", 0, 4, false) == 0) && (chars.Length == 16))
                                                    return TypeValueKnownValues.Value_MLBHittingCycles;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'D':
                                        switch (chars[11])
                                          {
                                            case 'i':
                                                if ((String.Compare(chars, 12, "rtBallsFaced", 0, 12, false) == 0) && (chars.Length == 24))
                                                    return TypeValueKnownValues.Value_MLBHittingDirtBallsFaced;
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 12, "ubles", 0, 5, false) == 0) && (chars.Length == 17))
                                                    return TypeValueKnownValues.Value_MLBHittingDoubles;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'E':
                                        switch (chars[11])
                                          {
                                            case 'a':
                                                if ((String.Compare(chars, 12, "rnedRunsScored", 0, 14, false) == 0) && (chars.Length == 26))
                                                    return TypeValueKnownValues.Value_MLBHittingEarnedRunsScored;
                                                break;
                                            case 'x':
                                                if ((String.Compare(chars, 12, "traBaseHits", 0, 11, false) == 0) && (chars.Length == 23))
                                                    return TypeValueKnownValues.Value_MLBHittingExtraBaseHits;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'F':
                                        switch (chars[11])
                                          {
                                            case 'i':
                                                if ((String.Compare(chars, 12, "eldersChoice", 0, 12, false) == 0) && (chars.Length == 24))
                                                    return TypeValueKnownValues.Value_MLBHittingFieldersChoice;
                                                break;
                                            case 'l':
                                                if (String.Compare(chars, 12, "y", 0, 1, false) == 0)
                                                  {
                                                    switch (chars[13])
                                                      {
                                                        case 'B':
                                                            if ((String.Compare(chars, 14, "alls", 0, 4, false) == 0) && (chars.Length == 18))
                                                                return TypeValueKnownValues.Value_MLBHittingFlyBalls;
                                                            break;
                                                        case 'O':
                                                            if (String.Compare(chars, 14, "uts", 0, 3, false) == 0)
                                                              {
                                                                if (chars.Length == 17)
                                                                  {
                                                                    return TypeValueKnownValues.Value_MLBHittingFlyOuts;
                                                                  }
                                                                switch (chars[17])
                                                                  {
                                                                    case 'I':
                                                                        if ((String.Compare(chars, 18, "ntoDoublePlays", 0, 14, false) == 0) && (chars.Length == 32))
                                                                            return TypeValueKnownValues.Value_MLBHittingFlyOutsIntoDoublePlays;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 12, "ulBalls", 0, 7, false) == 0) && (chars.Length == 19))
                                                    return TypeValueKnownValues.Value_MLBHittingFoulBalls;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'G':
                                        switch (chars[11])
                                          {
                                            case 'a':
                                                if (String.Compare(chars, 12, "mes", 0, 3, false) == 0)
                                                  {
                                                    switch (chars[15])
                                                      {
                                                        case 'F':
                                                            if ((String.Compare(chars, 16, "inished", 0, 7, false) == 0) && (chars.Length == 23))
                                                                return TypeValueKnownValues.Value_MLBHittingGamesFinished;
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(chars, 16, "layed", 0, 5, false) == 0) && (chars.Length == 21))
                                                                return TypeValueKnownValues.Value_MLBHittingGamesPlayed;
                                                            break;
                                                        case 'S':
                                                            if ((String.Compare(chars, 16, "tarted", 0, 6, false) == 0) && (chars.Length == 22))
                                                                return TypeValueKnownValues.Value_MLBHittingGamesStarted;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'r':
                                                if (String.Compare(chars, 12, "ound", 0, 4, false) == 0)
                                                  {
                                                    switch (chars[16])
                                                      {
                                                        case 'B':
                                                            if (String.Compare(chars, 17, "all", 0, 3, false) == 0)
                                                              {
                                                                switch (chars[20])
                                                                  {
                                                                    case 'T':
                                                                        if ((String.Compare(chars, 21, "oFlyBallRatio", 0, 13, false) == 0) && (chars.Length == 34))
                                                                            return TypeValueKnownValues.Value_MLBHittingGroundBallToFlyBallRatio;
                                                                        break;
                                                                    case 's':
                                                                        if (chars.Length == 21)
                                                                            return TypeValueKnownValues.Value_MLBHittingGroundBalls;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'O':
                                                            if ((String.Compare(chars, 17, "uts", 0, 3, false) == 0) && (chars.Length == 20))
                                                                return TypeValueKnownValues.Value_MLBHittingGroundOuts;
                                                            break;
                                                        case 'e':
                                                            if ((String.Compare(chars, 17, "dIntoDoublePlay", 0, 15, false) == 0) && (chars.Length == 32))
                                                                return TypeValueKnownValues.Value_MLBHittingGroundedIntoDoublePlay;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'H':
                                        switch (chars[11])
                                          {
                                            case 'i':
                                                if (String.Compare(chars, 12, "t", 0, 1, false) == 0)
                                                  {
                                                    switch (chars[13])
                                                      {
                                                        case 'B':
                                                            if ((String.Compare(chars, 14, "yPitch", 0, 6, false) == 0) && (chars.Length == 20))
                                                                return TypeValueKnownValues.Value_MLBHittingHitByPitch;
                                                            break;
                                                        case 's':
                                                            if (chars.Length == 14)
                                                              {
                                                                return TypeValueKnownValues.Value_MLBHittingHits;
                                                              }
                                                            switch (chars[14])
                                                              {
                                                                case 'W':
                                                                    if ((String.Compare(chars, 15, "ithRunnersInScoringPosition", 0, 27, false) == 0) && (chars.Length == 42))
                                                                        return TypeValueKnownValues.Value_MLBHittingHitsWithRunnersInScoringPosition;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 12, "meRuns", 0, 6, false) == 0) && (chars.Length == 18))
                                                    return TypeValueKnownValues.Value_MLBHittingHomeRuns;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'I':
                                        switch (chars[11])
                                          {
                                            case 'n':
                                                if (String.Compare(chars, 12, "tentional", 0, 9, false) == 0)
                                                  {
                                                    switch (chars[21])
                                                      {
                                                        case 'B':
                                                            if ((String.Compare(chars, 22, "alls", 0, 4, false) == 0) && (chars.Length == 26))
                                                                return TypeValueKnownValues.Value_MLBHittingIntentionalBalls;
                                                            break;
                                                        case 'W':
                                                            if ((String.Compare(chars, 22, "alks", 0, 4, false) == 0) && (chars.Length == 26))
                                                                return TypeValueKnownValues.Value_MLBHittingIntentionalWalks;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 's':
                                                if ((String.Compare(chars, 12, "olatedPower", 0, 11, false) == 0) && (chars.Length == 23))
                                                    return TypeValueKnownValues.Value_MLBHittingIsolatedPower;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'L':
                                        if (String.Compare(chars, 11, "ine", 0, 3, false) == 0)
                                          {
                                            switch (chars[14])
                                              {
                                                case 'D':
                                                    if ((String.Compare(chars, 15, "rives", 0, 5, false) == 0) && (chars.Length == 20))
                                                        return TypeValueKnownValues.Value_MLBHittingLineDrives;
                                                    break;
                                                case 'O':
                                                    if (String.Compare(chars, 15, "uts", 0, 3, false) == 0)
                                                      {
                                                        if (chars.Length == 18)
                                                          {
                                                            return TypeValueKnownValues.Value_MLBHittingLineOuts;
                                                          }
                                                        switch (chars[18])
                                                          {
                                                            case 'I':
                                                                if ((String.Compare(chars, 19, "ntoDoublePlay", 0, 13, false) == 0) && (chars.Length == 32))
                                                                    return TypeValueKnownValues.Value_MLBHittingLineOutsIntoDoublePlay;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'O':
                                        if (String.Compare(chars, 11, "nBaseP", 0, 6, false) == 0)
                                          {
                                            switch (chars[17])
                                              {
                                                case 'e':
                                                    if ((String.Compare(chars, 18, "rc", 0, 2, false) == 0) && (chars.Length == 20))
                                                        return TypeValueKnownValues.Value_MLBHittingOnBasePerc;
                                                    break;
                                                case 'l':
                                                    if ((String.Compare(chars, 18, "usSluggingPerc", 0, 14, false) == 0) && (chars.Length == 32))
                                                        return TypeValueKnownValues.Value_MLBHittingOnBasePlusSluggingPerc;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'P':
                                        switch (chars[11])
                                          {
                                            case 'i':
                                                if ((String.Compare(chars, 12, "tchesFaced", 0, 10, false) == 0) && (chars.Length == 22))
                                                    return TypeValueKnownValues.Value_MLBHittingPitchesFaced;
                                                break;
                                            case 'l':
                                                if ((String.Compare(chars, 12, "ateAppearances", 0, 14, false) == 0) && (chars.Length == 26))
                                                    return TypeValueKnownValues.Value_MLBHittingPlateAppearances;
                                                break;
                                            case 'o':
                                                if (String.Compare(chars, 12, "p", 0, 1, false) == 0)
                                                  {
                                                    switch (chars[13])
                                                      {
                                                        case 'O':
                                                            if ((String.Compare(chars, 14, "uts", 0, 3, false) == 0) && (chars.Length == 17))
                                                                return TypeValueKnownValues.Value_MLBHittingPopOuts;
                                                            break;
                                                        case 'U':
                                                            if ((String.Compare(chars, 14, "ps", 0, 2, false) == 0) && (chars.Length == 16))
                                                                return TypeValueKnownValues.Value_MLBHittingPopUps;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'R':
                                        switch (chars[11])
                                          {
                                            case 'e':
                                                if ((String.Compare(chars, 12, "achedOnError", 0, 12, false) == 0) && (chars.Length == 24))
                                                    return TypeValueKnownValues.Value_MLBHittingReachedOnError;
                                                break;
                                            case 'u':
                                                if (String.Compare(chars, 12, "n", 0, 1, false) == 0)
                                                  {
                                                    switch (chars[13])
                                                      {
                                                        case 'n':
                                                            if (String.Compare(chars, 14, "ersLeftOnBase", 0, 13, false) == 0)
                                                              {
                                                                if (chars.Length == 27)
                                                                  {
                                                                    return TypeValueKnownValues.Value_MLBHittingRunnersLeftOnBase;
                                                                  }
                                                                switch (chars[27])
                                                                  {
                                                                    case 'T':
                                                                        if ((String.Compare(chars, 28, "woOutsRunnersInScoringPosition", 0, 30, false) == 0) && (chars.Length == 58))
                                                                            return TypeValueKnownValues.Value_MLBHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 's':
                                                            if (String.Compare(chars, 14, "BattedIn", 0, 8, false) == 0)
                                                              {
                                                                if (chars.Length == 22)
                                                                  {
                                                                    return TypeValueKnownValues.Value_MLBHittingRunsBattedIn;
                                                                  }
                                                                switch (chars[22])
                                                                  {
                                                                    case 'W':
                                                                        if ((String.Compare(chars, 23, "ithTwoOuts", 0, 10, false) == 0) && (chars.Length == 33))
                                                                            return TypeValueKnownValues.Value_MLBHittingRunsBattedInWithTwoOuts;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'S':
                                        switch (chars[11])
                                          {
                                            case 'a':
                                                if (String.Compare(chars, 12, "crifice", 0, 7, false) == 0)
                                                  {
                                                    switch (chars[19])
                                                      {
                                                        case 'F':
                                                            if ((String.Compare(chars, 20, "lys", 0, 3, false) == 0) && (chars.Length == 23))
                                                                return TypeValueKnownValues.Value_MLBHittingSacrificeFlys;
                                                            break;
                                                        case 'H':
                                                            if ((String.Compare(chars, 20, "its", 0, 3, false) == 0) && (chars.Length == 23))
                                                                return TypeValueKnownValues.Value_MLBHittingSacrificeHits;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'e':
                                                if ((String.Compare(chars, 12, "condaryAverage", 0, 14, false) == 0) && (chars.Length == 26))
                                                    return TypeValueKnownValues.Value_MLBHittingSecondaryAverage;
                                                break;
                                            case 'i':
                                                if ((String.Compare(chars, 12, "ngles", 0, 5, false) == 0) && (chars.Length == 17))
                                                    return TypeValueKnownValues.Value_MLBHittingSingles;
                                                break;
                                            case 'l':
                                                if ((String.Compare(chars, 12, "uggingPerc", 0, 10, false) == 0) && (chars.Length == 22))
                                                    return TypeValueKnownValues.Value_MLBHittingSluggingPerc;
                                                break;
                                            case 't':
                                                if (String.Compare(chars, 12, "rike", 0, 4, false) == 0)
                                                  {
                                                    switch (chars[16])
                                                      {
                                                        case 'o':
                                                            if (String.Compare(chars, 17, "uts", 0, 3, false) == 0)
                                                              {
                                                                switch (chars[20])
                                                                  {
                                                                    case 'L':
                                                                        if ((String.Compare(chars, 21, "ooking", 0, 6, false) == 0) && (chars.Length == 27))
                                                                            return TypeValueKnownValues.Value_MLBHittingStrikeoutsLooking;
                                                                        break;
                                                                    case 'S':
                                                                        if ((String.Compare(chars, 21, "winging", 0, 7, false) == 0) && (chars.Length == 28))
                                                                            return TypeValueKnownValues.Value_MLBHittingStrikeoutsSwinging;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 's':
                                                            switch (chars[17])
                                                              {
                                                                case 'L':
                                                                    if ((String.Compare(chars, 18, "ooking", 0, 6, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_MLBHittingStrikesLooking;
                                                                    break;
                                                                case 'S':
                                                                    if ((String.Compare(chars, 18, "winging", 0, 7, false) == 0) && (chars.Length == 25))
                                                                        return TypeValueKnownValues.Value_MLBHittingStrikesSwinging;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'T':
                                        switch (chars[11])
                                          {
                                            case 'o':
                                                if (String.Compare(chars, 12, "tal", 0, 3, false) == 0)
                                                  {
                                                    switch (chars[15])
                                                      {
                                                        case 'B':
                                                            if ((String.Compare(chars, 16, "ases", 0, 4, false) == 0) && (chars.Length == 20))
                                                                return TypeValueKnownValues.Value_MLBHittingTotalBases;
                                                            break;
                                                        case 'R':
                                                            if ((String.Compare(chars, 16, "unsScored", 0, 9, false) == 0) && (chars.Length == 25))
                                                                return TypeValueKnownValues.Value_MLBHittingTotalRunsScored;
                                                            break;
                                                        case 'S':
                                                            if (String.Compare(chars, 16, "trike", 0, 5, false) == 0)
                                                              {
                                                                switch (chars[21])
                                                                  {
                                                                    case 'o':
                                                                        if ((String.Compare(chars, 22, "uts", 0, 3, false) == 0) && (chars.Length == 25))
                                                                            return TypeValueKnownValues.Value_MLBHittingTotalStrikeouts;
                                                                        break;
                                                                    case 's':
                                                                        if (chars.Length == 22)
                                                                            return TypeValueKnownValues.Value_MLBHittingTotalStrikes;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'r':
                                                if ((String.Compare(chars, 12, "iples", 0, 5, false) == 0) && (chars.Length == 17))
                                                    return TypeValueKnownValues.Value_MLBHittingTriples;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'U':
                                        if ((String.Compare(chars, 11, "nearnedRunsScored", 0, 17, false) == 0) && (chars.Length == 28))
                                            return TypeValueKnownValues.Value_MLBHittingUnearnedRunsScored;
                                        break;
                                    case 'W':
                                        if (String.Compare(chars, 11, "alks", 0, 4, false) == 0)
                                          {
                                            if (chars.Length == 15)
                                              {
                                                return TypeValueKnownValues.Value_MLBHittingWalks;
                                              }
                                            switch (chars[15])
                                              {
                                                case 'P':
                                                    if (String.Compare(chars, 16, "er", 0, 2, false) == 0)
                                                      {
                                                        switch (chars[18])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(chars, 19, "laceAppearance", 0, 14, false) == 0) && (chars.Length == 33))
                                                                    return TypeValueKnownValues.Value_MLBHittingWalksPerPlaceAppearance;
                                                                break;
                                                            case 'S':
                                                                if ((String.Compare(chars, 19, "trikeout", 0, 8, false) == 0) && (chars.Length == 27))
                                                                    return TypeValueKnownValues.Value_MLBHittingWalksPerStrikeout;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'P':
                            if (String.Compare(chars, 4, "itching", 0, 7, false) == 0)
                              {
                                switch (chars[11])
                                  {
                                    case 'B':
                                        switch (chars[12])
                                          {
                                            case 'a':
                                                switch (chars[13])
                                                  {
                                                    case 'l':
                                                        switch (chars[14])
                                                          {
                                                            case 'k':
                                                                if ((String.Compare(chars, 15, "s", 0, 1, false) == 0) && (chars.Length == 16))
                                                                    return TypeValueKnownValues.Value_MLBPitchingBalks;
                                                                break;
                                                            case 'l':
                                                                if ((String.Compare(chars, 15, "s", 0, 1, false) == 0) && (chars.Length == 16))
                                                                    return TypeValueKnownValues.Value_MLBPitchingBalls;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 't':
                                                        if ((String.Compare(chars, 14, "tersFaced", 0, 9, false) == 0) && (chars.Length == 23))
                                                            return TypeValueKnownValues.Value_MLBPitchingBattersFaced;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'l':
                                                if ((String.Compare(chars, 13, "ownSaves", 0, 8, false) == 0) && (chars.Length == 21))
                                                    return TypeValueKnownValues.Value_MLBPitchingBlownSaves;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'C':
                                        if ((String.Compare(chars, 12, "ompleteGames", 0, 12, false) == 0) && (chars.Length == 24))
                                            return TypeValueKnownValues.Value_MLBPitchingCompleteGames;
                                        break;
                                    case 'D':
                                        switch (chars[12])
                                          {
                                            case 'i':
                                                if ((String.Compare(chars, 13, "rtBallsThrown", 0, 13, false) == 0) && (chars.Length == 26))
                                                    return TypeValueKnownValues.Value_MLBPitchingDirtBallsThrown;
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 13, "ublesAllowed", 0, 12, false) == 0) && (chars.Length == 25))
                                                    return TypeValueKnownValues.Value_MLBPitchingDoublesAllowed;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'E':
                                        switch (chars[12])
                                          {
                                            case 'a':
                                                if (String.Compare(chars, 13, "rnedRun", 0, 7, false) == 0)
                                                  {
                                                    switch (chars[20])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(chars, 21, "verage", 0, 6, false) == 0) && (chars.Length == 27))
                                                                return TypeValueKnownValues.Value_MLBPitchingEarnedRunAverage;
                                                            break;
                                                        case 's':
                                                            if ((String.Compare(chars, 21, "Allowed", 0, 7, false) == 0) && (chars.Length == 28))
                                                                return TypeValueKnownValues.Value_MLBPitchingEarnedRunsAllowed;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'r':
                                                if ((String.Compare(chars, 13, "rors", 0, 4, false) == 0) && (chars.Length == 17))
                                                    return TypeValueKnownValues.Value_MLBPitchingErrors;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'F':
                                        switch (chars[12])
                                          {
                                            case 'i':
                                                if ((String.Compare(chars, 13, "eldersChoice", 0, 12, false) == 0) && (chars.Length == 25))
                                                    return TypeValueKnownValues.Value_MLBPitchingFieldersChoice;
                                                break;
                                            case 'l':
                                                if (String.Compare(chars, 13, "yOuts", 0, 5, false) == 0)
                                                  {
                                                    if (chars.Length == 18)
                                                      {
                                                        return TypeValueKnownValues.Value_MLBPitchingFlyOuts;
                                                      }
                                                    switch (chars[18])
                                                      {
                                                        case 'I':
                                                            if ((String.Compare(chars, 19, "ntoDoublePlays", 0, 14, false) == 0) && (chars.Length == 33))
                                                                return TypeValueKnownValues.Value_MLBPitchingFlyOutsIntoDoublePlays;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 13, "ulBalls", 0, 7, false) == 0) && (chars.Length == 20))
                                                    return TypeValueKnownValues.Value_MLBPitchingFoulBalls;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'G':
                                        switch (chars[12])
                                          {
                                            case 'a':
                                                if (String.Compare(chars, 13, "mes", 0, 3, false) == 0)
                                                  {
                                                    switch (chars[16])
                                                      {
                                                        case 'F':
                                                            if ((String.Compare(chars, 17, "inished", 0, 7, false) == 0) && (chars.Length == 24))
                                                                return TypeValueKnownValues.Value_MLBPitchingGamesFinished;
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(chars, 17, "layed", 0, 5, false) == 0) && (chars.Length == 22))
                                                                return TypeValueKnownValues.Value_MLBPitchingGamesPlayed;
                                                            break;
                                                        case 'S':
                                                            if ((String.Compare(chars, 17, "tarted", 0, 6, false) == 0) && (chars.Length == 23))
                                                                return TypeValueKnownValues.Value_MLBPitchingGamesStarted;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'r':
                                                if (String.Compare(chars, 13, "ound", 0, 4, false) == 0)
                                                  {
                                                    switch (chars[17])
                                                      {
                                                        case 'B':
                                                            if ((String.Compare(chars, 18, "allToFlyBallRatio", 0, 17, false) == 0) && (chars.Length == 35))
                                                                return TypeValueKnownValues.Value_MLBPitchingGroundBallToFlyBallRatio;
                                                            break;
                                                        case 'O':
                                                            if (String.Compare(chars, 18, "uts", 0, 3, false) == 0)
                                                              {
                                                                if (chars.Length == 21)
                                                                  {
                                                                    return TypeValueKnownValues.Value_MLBPitchingGroundOuts;
                                                                  }
                                                                switch (chars[21])
                                                                  {
                                                                    case 'I':
                                                                        if ((String.Compare(chars, 22, "ntoDoublePlays", 0, 14, false) == 0) && (chars.Length == 36))
                                                                            return TypeValueKnownValues.Value_MLBPitchingGroundOutsIntoDoublePlays;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'H':
                                        switch (chars[12])
                                          {
                                            case 'i':
                                                if (String.Compare(chars, 13, "t", 0, 1, false) == 0)
                                                  {
                                                    switch (chars[14])
                                                      {
                                                        case 'B':
                                                            if ((String.Compare(chars, 15, "atters", 0, 6, false) == 0) && (chars.Length == 21))
                                                                return TypeValueKnownValues.Value_MLBPitchingHitBatters;
                                                            break;
                                                        case 's':
                                                            if ((String.Compare(chars, 15, "Allowed", 0, 7, false) == 0) && (chars.Length == 22))
                                                                return TypeValueKnownValues.Value_MLBPitchingHitsAllowed;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'o':
                                                switch (chars[13])
                                                  {
                                                    case 'l':
                                                        if ((String.Compare(chars, 14, "ds", 0, 2, false) == 0) && (chars.Length == 16))
                                                            return TypeValueKnownValues.Value_MLBPitchingHolds;
                                                        break;
                                                    case 'm':
                                                        if ((String.Compare(chars, 14, "eRunsAllowed", 0, 12, false) == 0) && (chars.Length == 26))
                                                            return TypeValueKnownValues.Value_MLBPitchingHomeRunsAllowed;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'I':
                                        if (String.Compare(chars, 12, "n", 0, 1, false) == 0)
                                          {
                                            switch (chars[13])
                                              {
                                                case 'n':
                                                    if (String.Compare(chars, 14, "ingsPitched", 0, 11, false) == 0)
                                                      {
                                                        switch (chars[25])
                                                          {
                                                            case 'C':
                                                                if ((String.Compare(chars, 26, "ompletePartial", 0, 14, false) == 0) && (chars.Length == 40))
                                                                    return TypeValueKnownValues.Value_MLBPitchingInningsPitchedCompletePartial;
                                                                break;
                                                            case 'T':
                                                                if ((String.Compare(chars, 26, "otalOuts", 0, 8, false) == 0) && (chars.Length == 34))
                                                                    return TypeValueKnownValues.Value_MLBPitchingInningsPitchedTotalOuts;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if (String.Compare(chars, 14, "entional", 0, 8, false) == 0)
                                                      {
                                                        switch (chars[22])
                                                          {
                                                            case 'B':
                                                                if ((String.Compare(chars, 23, "alls", 0, 4, false) == 0) && (chars.Length == 27))
                                                                    return TypeValueKnownValues.Value_MLBPitchingIntentionalBalls;
                                                                break;
                                                            case 'W':
                                                                if ((String.Compare(chars, 23, "alks", 0, 4, false) == 0) && (chars.Length == 27))
                                                                    return TypeValueKnownValues.Value_MLBPitchingIntentionalWalks;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'L':
                                        switch (chars[12])
                                          {
                                            case 'i':
                                                if (String.Compare(chars, 13, "neOuts", 0, 6, false) == 0)
                                                  {
                                                    if (chars.Length == 19)
                                                      {
                                                        return TypeValueKnownValues.Value_MLBPitchingLineOuts;
                                                      }
                                                    switch (chars[19])
                                                      {
                                                        case 'I':
                                                            if ((String.Compare(chars, 20, "ntoDoublePlays", 0, 14, false) == 0) && (chars.Length == 34))
                                                                return TypeValueKnownValues.Value_MLBPitchingLineOutsIntoDoublePlays;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 13, "sses", 0, 4, false) == 0) && (chars.Length == 17))
                                                    return TypeValueKnownValues.Value_MLBPitchingLosses;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'O':
                                        if (String.Compare(chars, 12, "pponent", 0, 7, false) == 0)
                                          {
                                            switch (chars[19])
                                              {
                                                case 'R':
                                                    if ((String.Compare(chars, 20, "unnersLeftOnBase", 0, 16, false) == 0) && (chars.Length == 36))
                                                        return TypeValueKnownValues.Value_MLBPitchingOpponentRunnersLeftOnBase;
                                                    break;
                                                case 's':
                                                    if ((String.Compare(chars, 20, "BattingAverage", 0, 14, false) == 0) && (chars.Length == 34))
                                                        return TypeValueKnownValues.Value_MLBPitchingOpponentsBattingAverage;
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'P':
                                        switch (chars[12])
                                          {
                                            case 'i':
                                                switch (chars[13])
                                                  {
                                                    case 'c':
                                                        if ((String.Compare(chars, 14, "koffs", 0, 5, false) == 0) && (chars.Length == 19))
                                                            return TypeValueKnownValues.Value_MLBPitchingPickoffs;
                                                        break;
                                                    case 't':
                                                        if ((String.Compare(chars, 14, "chCount", 0, 7, false) == 0) && (chars.Length == 21))
                                                            return TypeValueKnownValues.Value_MLBPitchingPitchCount;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'o':
                                                if ((String.Compare(chars, 13, "pOutsForced", 0, 11, false) == 0) && (chars.Length == 24))
                                                    return TypeValueKnownValues.Value_MLBPitchingPopOutsForced;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'Q':
                                        if ((String.Compare(chars, 12, "ualityStarts", 0, 12, false) == 0) && (chars.Length == 24))
                                            return TypeValueKnownValues.Value_MLBPitchingQualityStarts;
                                        break;
                                    case 'R':
                                        switch (chars[12])
                                          {
                                            case 'e':
                                                if ((String.Compare(chars, 13, "achedOnError", 0, 12, false) == 0) && (chars.Length == 25))
                                                    return TypeValueKnownValues.Value_MLBPitchingReachedOnError;
                                                break;
                                            case 'u':
                                                if ((String.Compare(chars, 13, "nnersCaughtStealing", 0, 19, false) == 0) && (chars.Length == 32))
                                                    return TypeValueKnownValues.Value_MLBPitchingRunnersCaughtStealing;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'S':
                                        switch (chars[12])
                                          {
                                            case 'a':
                                                switch (chars[13])
                                                  {
                                                    case 'c':
                                                        if (String.Compare(chars, 14, "rifice", 0, 6, false) == 0)
                                                          {
                                                            switch (chars[20])
                                                              {
                                                                case 'F':
                                                                    if ((String.Compare(chars, 21, "lys", 0, 3, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_MLBPitchingSacrificeFlys;
                                                                    break;
                                                                case 'H':
                                                                    if ((String.Compare(chars, 21, "its", 0, 3, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_MLBPitchingSacrificeHits;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'v':
                                                        if (String.Compare(chars, 14, "e", 0, 1, false) == 0)
                                                          {
                                                            switch (chars[15])
                                                              {
                                                                case 'O':
                                                                    if ((String.Compare(chars, 16, "pportunities", 0, 12, false) == 0) && (chars.Length == 28))
                                                                        return TypeValueKnownValues.Value_MLBPitchingSaveOpportunities;
                                                                    break;
                                                                case 's':
                                                                    if (chars.Length == 16)
                                                                        return TypeValueKnownValues.Value_MLBPitchingSaves;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'h':
                                                if ((String.Compare(chars, 13, "utouts", 0, 6, false) == 0) && (chars.Length == 19))
                                                    return TypeValueKnownValues.Value_MLBPitchingShutouts;
                                                break;
                                            case 'i':
                                                if ((String.Compare(chars, 13, "nglesAllowed", 0, 12, false) == 0) && (chars.Length == 25))
                                                    return TypeValueKnownValues.Value_MLBPitchingSinglesAllowed;
                                                break;
                                            case 't':
                                                switch (chars[13])
                                                  {
                                                    case 'o':
                                                        if ((String.Compare(chars, 14, "lenBasesAllowed", 0, 15, false) == 0) && (chars.Length == 29))
                                                            return TypeValueKnownValues.Value_MLBPitchingStolenBasesAllowed;
                                                        break;
                                                    case 'r':
                                                        if (String.Compare(chars, 14, "ike", 0, 3, false) == 0)
                                                          {
                                                            switch (chars[17])
                                                              {
                                                                case 'o':
                                                                    if (String.Compare(chars, 18, "uts", 0, 3, false) == 0)
                                                                      {
                                                                        switch (chars[21])
                                                                          {
                                                                            case 'L':
                                                                                if ((String.Compare(chars, 22, "ooking", 0, 6, false) == 0) && (chars.Length == 28))
                                                                                    return TypeValueKnownValues.Value_MLBPitchingStrikeoutsLooking;
                                                                                break;
                                                                            case 'P':
                                                                                if (String.Compare(chars, 22, "er", 0, 2, false) == 0)
                                                                                  {
                                                                                    switch (chars[24])
                                                                                      {
                                                                                        case '9':
                                                                                            if ((String.Compare(chars, 25, "Innings", 0, 7, false) == 0) && (chars.Length == 32))
                                                                                                return TypeValueKnownValues.Value_MLBPitchingStrikeoutsPer9Innings;
                                                                                            break;
                                                                                        case 'W':
                                                                                            if ((String.Compare(chars, 25, "alk", 0, 3, false) == 0) && (chars.Length == 28))
                                                                                                return TypeValueKnownValues.Value_MLBPitchingStrikeoutsPerWalk;
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 'S':
                                                                                if ((String.Compare(chars, 22, "winging", 0, 7, false) == 0) && (chars.Length == 29))
                                                                                    return TypeValueKnownValues.Value_MLBPitchingStrikeoutsSwinging;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 's':
                                                                    switch (chars[18])
                                                                      {
                                                                        case 'L':
                                                                            if ((String.Compare(chars, 19, "ooking", 0, 6, false) == 0) && (chars.Length == 25))
                                                                                return TypeValueKnownValues.Value_MLBPitchingStrikesLooking;
                                                                            break;
                                                                        case 'S':
                                                                            if ((String.Compare(chars, 19, "winging", 0, 7, false) == 0) && (chars.Length == 26))
                                                                                return TypeValueKnownValues.Value_MLBPitchingStrikesSwinging;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'T':
                                        switch (chars[12])
                                          {
                                            case 'o':
                                                if (String.Compare(chars, 13, "tal", 0, 3, false) == 0)
                                                  {
                                                    switch (chars[16])
                                                      {
                                                        case 'B':
                                                            if ((String.Compare(chars, 17, "asesAllowed", 0, 11, false) == 0) && (chars.Length == 28))
                                                                return TypeValueKnownValues.Value_MLBPitchingTotalBasesAllowed;
                                                            break;
                                                        case 'R':
                                                            if ((String.Compare(chars, 17, "unsAllowed", 0, 10, false) == 0) && (chars.Length == 27))
                                                                return TypeValueKnownValues.Value_MLBPitchingTotalRunsAllowed;
                                                            break;
                                                        case 'S':
                                                            if (String.Compare(chars, 17, "trike", 0, 5, false) == 0)
                                                              {
                                                                switch (chars[22])
                                                                  {
                                                                    case 'o':
                                                                        if ((String.Compare(chars, 23, "uts", 0, 3, false) == 0) && (chars.Length == 26))
                                                                            return TypeValueKnownValues.Value_MLBPitchingTotalStrikeouts;
                                                                        break;
                                                                    case 's':
                                                                        if (chars.Length == 23)
                                                                            return TypeValueKnownValues.Value_MLBPitchingTotalStrikes;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'r':
                                                if ((String.Compare(chars, 13, "iplesAllowed", 0, 12, false) == 0) && (chars.Length == 25))
                                                    return TypeValueKnownValues.Value_MLBPitchingTriplesAllowed;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'U':
                                        if ((String.Compare(chars, 12, "nearnedRunsAllowed", 0, 18, false) == 0) && (chars.Length == 30))
                                            return TypeValueKnownValues.Value_MLBPitchingUnearnedRunsAllowed;
                                        break;
                                    case 'W':
                                        switch (chars[12])
                                          {
                                            case 'a':
                                                if (String.Compare(chars, 13, "lks", 0, 3, false) == 0)
                                                  {
                                                    if (chars.Length == 16)
                                                      {
                                                        return TypeValueKnownValues.Value_MLBPitchingWalks;
                                                      }
                                                    switch (chars[16])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 17, "lusHitsPerInningPitched", 0, 23, false) == 0) && (chars.Length == 40))
                                                                return TypeValueKnownValues.Value_MLBPitchingWalksPlusHitsPerInningPitched;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'i':
                                                switch (chars[13])
                                                  {
                                                    case 'l':
                                                        if ((String.Compare(chars, 14, "dPitches", 0, 8, false) == 0) && (chars.Length == 22))
                                                            return TypeValueKnownValues.Value_MLBPitchingWildPitches;
                                                        break;
                                                    case 'n':
                                                        if ((String.Compare(chars, 14, "s", 0, 1, false) == 0) && (chars.Length == 15))
                                                            return TypeValueKnownValues.Value_MLBPitchingWins;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            case 'N':
                switch (chars[1])
                  {
                    case 'B':
                        if (String.Compare(chars, 2, "A", 0, 1, false) == 0)
                          {
                            switch (chars[3])
                              {
                                case 'A':
                                    if (String.Compare(chars, 4, "ssists", 0, 6, false) == 0)
                                      {
                                        if (chars.Length == 10)
                                          {
                                            return TypeValueKnownValues.Value_NBAAssists;
                                          }
                                        switch (chars[10])
                                          {
                                            case 'P':
                                                if ((String.Compare(chars, 11, "erGame", 0, 6, false) == 0) && (chars.Length == 17))
                                                    return TypeValueKnownValues.Value_NBAAssistsPerGame;
                                                break;
                                            case 'T':
                                                if ((String.Compare(chars, 11, "oTurnoverRatio", 0, 14, false) == 0) && (chars.Length == 25))
                                                    return TypeValueKnownValues.Value_NBAAssistsToTurnoverRatio;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'B':
                                    if (String.Compare(chars, 4, "locked", 0, 6, false) == 0)
                                      {
                                        switch (chars[10])
                                          {
                                            case 'A':
                                                if (String.Compare(chars, 11, "ttempts", 0, 7, false) == 0)
                                                  {
                                                    if (chars.Length == 18)
                                                      {
                                                        return TypeValueKnownValues.Value_NBABlockedAttempts;
                                                      }
                                                    switch (chars[18])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 19, "erGame", 0, 6, false) == 0) && (chars.Length == 25))
                                                                return TypeValueKnownValues.Value_NBABlockedAttemptsPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'S':
                                                if (String.Compare(chars, 11, "hots", 0, 4, false) == 0)
                                                  {
                                                    if (chars.Length == 15)
                                                      {
                                                        return TypeValueKnownValues.Value_NBABlockedShots;
                                                      }
                                                    switch (chars[15])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 16, "erGame", 0, 6, false) == 0) && (chars.Length == 22))
                                                                return TypeValueKnownValues.Value_NBABlockedShotsPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'C':
                                    if ((String.Compare(chars, 4, "oachTechnicalFouls", 0, 18, false) == 0) && (chars.Length == 22))
                                        return TypeValueKnownValues.Value_NBACoachTechnicalFouls;
                                    break;
                                case 'D':
                                    if (String.Compare(chars, 4, "efensiveRebounds", 0, 16, false) == 0)
                                      {
                                        if (chars.Length == 20)
                                          {
                                            return TypeValueKnownValues.Value_NBADefensiveRebounds;
                                          }
                                        switch (chars[20])
                                          {
                                            case 'P':
                                                if ((String.Compare(chars, 21, "erGame", 0, 6, false) == 0) && (chars.Length == 27))
                                                    return TypeValueKnownValues.Value_NBADefensiveReboundsPerGame;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'E':
                                    if ((String.Compare(chars, 4, "jections", 0, 8, false) == 0) && (chars.Length == 12))
                                        return TypeValueKnownValues.Value_NBAEjections;
                                    break;
                                case 'F':
                                    switch (chars[4])
                                      {
                                        case 'a':
                                            if (String.Compare(chars, 5, "stBreakPoints", 0, 13, false) == 0)
                                              {
                                                if (chars.Length == 18)
                                                  {
                                                    return TypeValueKnownValues.Value_NBAFastBreakPoints;
                                                  }
                                                switch (chars[18])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(chars, 19, "erGame", 0, 6, false) == 0) && (chars.Length == 25))
                                                            return TypeValueKnownValues.Value_NBAFastBreakPointsPerGame;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'i':
                                            if (String.Compare(chars, 5, "eldGoal", 0, 7, false) == 0)
                                              {
                                                switch (chars[12])
                                                  {
                                                    case 'A':
                                                        if (String.Compare(chars, 13, "ttempts", 0, 7, false) == 0)
                                                          {
                                                            if (chars.Length == 20)
                                                              {
                                                                return TypeValueKnownValues.Value_NBAFieldGoalAttempts;
                                                              }
                                                            switch (chars[20])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 21, "erGame", 0, 6, false) == 0) && (chars.Length == 27))
                                                                        return TypeValueKnownValues.Value_NBAFieldGoalAttemptsPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(chars, 13, "ercentage", 0, 9, false) == 0) && (chars.Length == 22))
                                                            return TypeValueKnownValues.Value_NBAFieldGoalPercentage;
                                                        break;
                                                    case 's':
                                                        if (String.Compare(chars, 13, "Made", 0, 4, false) == 0)
                                                          {
                                                            if (chars.Length == 17)
                                                              {
                                                                return TypeValueKnownValues.Value_NBAFieldGoalsMade;
                                                              }
                                                            switch (chars[17])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 18, "erGame", 0, 6, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_NBAFieldGoalsMadePerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'l':
                                            if (String.Compare(chars, 5, "agrantFouls", 0, 11, false) == 0)
                                              {
                                                if (chars.Length == 16)
                                                  {
                                                    return TypeValueKnownValues.Value_NBAFlagrantFouls;
                                                  }
                                                switch (chars[16])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(chars, 17, "erGame", 0, 6, false) == 0) && (chars.Length == 23))
                                                            return TypeValueKnownValues.Value_NBAFlagrantFoulsPerGame;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'r':
                                            if (String.Compare(chars, 5, "eeThrow", 0, 7, false) == 0)
                                              {
                                                switch (chars[12])
                                                  {
                                                    case 'A':
                                                        if (String.Compare(chars, 13, "ttempts", 0, 7, false) == 0)
                                                          {
                                                            if (chars.Length == 20)
                                                              {
                                                                return TypeValueKnownValues.Value_NBAFreeThrowAttempts;
                                                              }
                                                            switch (chars[20])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 21, "erGame", 0, 6, false) == 0) && (chars.Length == 27))
                                                                        return TypeValueKnownValues.Value_NBAFreeThrowAttemptsPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(chars, 13, "ercentage", 0, 9, false) == 0) && (chars.Length == 22))
                                                            return TypeValueKnownValues.Value_NBAFreeThrowPercentage;
                                                        break;
                                                    case 's':
                                                        if (String.Compare(chars, 13, "Made", 0, 4, false) == 0)
                                                          {
                                                            if (chars.Length == 17)
                                                              {
                                                                return TypeValueKnownValues.Value_NBAFreeThrowsMade;
                                                              }
                                                            switch (chars[17])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 18, "erGame", 0, 6, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_NBAFreeThrowsMadePerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'G':
                                    if (String.Compare(chars, 4, "ames", 0, 4, false) == 0)
                                      {
                                        switch (chars[8])
                                          {
                                            case 'P':
                                                if ((String.Compare(chars, 9, "layed", 0, 5, false) == 0) && (chars.Length == 14))
                                                    return TypeValueKnownValues.Value_NBAGamesPlayed;
                                                break;
                                            case 'S':
                                                if ((String.Compare(chars, 9, "tarted", 0, 6, false) == 0) && (chars.Length == 15))
                                                    return TypeValueKnownValues.Value_NBAGamesStarted;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'M':
                                    if (String.Compare(chars, 4, "inutesPlayed", 0, 12, false) == 0)
                                      {
                                        if (chars.Length == 16)
                                          {
                                            return TypeValueKnownValues.Value_NBAMinutesPlayed;
                                          }
                                        switch (chars[16])
                                          {
                                            case 'P':
                                                if ((String.Compare(chars, 17, "erGame", 0, 6, false) == 0) && (chars.Length == 23))
                                                    return TypeValueKnownValues.Value_NBAMinutesPlayedPerGame;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'O':
                                    if (String.Compare(chars, 4, "ffensiveRebounds", 0, 16, false) == 0)
                                      {
                                        if (chars.Length == 20)
                                          {
                                            return TypeValueKnownValues.Value_NBAOffensiveRebounds;
                                          }
                                        switch (chars[20])
                                          {
                                            case 'P':
                                                if ((String.Compare(chars, 21, "erGame", 0, 6, false) == 0) && (chars.Length == 27))
                                                    return TypeValueKnownValues.Value_NBAOffensiveReboundsPerGame;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'P':
                                    switch (chars[4])
                                      {
                                        case 'e':
                                            if (String.Compare(chars, 5, "rsonalFouls", 0, 11, false) == 0)
                                              {
                                                if (chars.Length == 16)
                                                  {
                                                    return TypeValueKnownValues.Value_NBAPersonalFouls;
                                                  }
                                                switch (chars[16])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(chars, 17, "erGame", 0, 6, false) == 0) && (chars.Length == 23))
                                                            return TypeValueKnownValues.Value_NBAPersonalFoulsPerGame;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'l':
                                            if ((String.Compare(chars, 5, "ayerTechnicalFouls", 0, 18, false) == 0) && (chars.Length == 23))
                                                return TypeValueKnownValues.Value_NBAPlayerTechnicalFouls;
                                            break;
                                        case 'o':
                                            if (String.Compare(chars, 5, "ints", 0, 4, false) == 0)
                                              {
                                                if (chars.Length == 9)
                                                  {
                                                    return TypeValueKnownValues.Value_NBAPoints;
                                                  }
                                                switch (chars[9])
                                                  {
                                                    case 'I':
                                                        if (String.Compare(chars, 10, "nPaint", 0, 6, false) == 0)
                                                          {
                                                            if (chars.Length == 16)
                                                              {
                                                                return TypeValueKnownValues.Value_NBAPointsInPaint;
                                                              }
                                                            switch (chars[16])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 17, "erGame", 0, 6, false) == 0) && (chars.Length == 23))
                                                                        return TypeValueKnownValues.Value_NBAPointsInPaintPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'O':
                                                        if (String.Compare(chars, 10, "ffTurnovers", 0, 11, false) == 0)
                                                          {
                                                            if (chars.Length == 21)
                                                              {
                                                                return TypeValueKnownValues.Value_NBAPointsOffTurnovers;
                                                              }
                                                            switch (chars[21])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 22, "erGame", 0, 6, false) == 0) && (chars.Length == 28))
                                                                        return TypeValueKnownValues.Value_NBAPointsOffTurnoversPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(chars, 10, "erGame", 0, 6, false) == 0) && (chars.Length == 16))
                                                            return TypeValueKnownValues.Value_NBAPointsPerGame;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'R':
                                    if (String.Compare(chars, 4, "ebounds", 0, 7, false) == 0)
                                      {
                                        if (chars.Length == 11)
                                          {
                                            return TypeValueKnownValues.Value_NBARebounds;
                                          }
                                        switch (chars[11])
                                          {
                                            case 'P':
                                                if ((String.Compare(chars, 12, "erGame", 0, 6, false) == 0) && (chars.Length == 18))
                                                    return TypeValueKnownValues.Value_NBAReboundsPerGame;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'S':
                                    switch (chars[4])
                                      {
                                        case 'e':
                                            if (String.Compare(chars, 5, "condChancePoints", 0, 16, false) == 0)
                                              {
                                                if (chars.Length == 21)
                                                  {
                                                    return TypeValueKnownValues.Value_NBASecondChancePoints;
                                                  }
                                                switch (chars[21])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(chars, 22, "erGame", 0, 6, false) == 0) && (chars.Length == 28))
                                                            return TypeValueKnownValues.Value_NBASecondChancePointsPerGame;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 't':
                                            if (String.Compare(chars, 5, "eals", 0, 4, false) == 0)
                                              {
                                                if (chars.Length == 9)
                                                  {
                                                    return TypeValueKnownValues.Value_NBASteals;
                                                  }
                                                switch (chars[9])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(chars, 10, "erGame", 0, 6, false) == 0) && (chars.Length == 16))
                                                            return TypeValueKnownValues.Value_NBAStealsPerGame;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'T':
                                    switch (chars[4])
                                      {
                                        case 'e':
                                            if ((String.Compare(chars, 5, "amTechnicalFouls", 0, 16, false) == 0) && (chars.Length == 21))
                                                return TypeValueKnownValues.Value_NBATeamTechnicalFouls;
                                            break;
                                        case 'h':
                                            if (String.Compare(chars, 5, "reePoint", 0, 8, false) == 0)
                                              {
                                                switch (chars[13])
                                                  {
                                                    case 'A':
                                                        if (String.Compare(chars, 14, "ttempts", 0, 7, false) == 0)
                                                          {
                                                            if (chars.Length == 21)
                                                              {
                                                                return TypeValueKnownValues.Value_NBAThreePointAttempts;
                                                              }
                                                            switch (chars[21])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 22, "erGame", 0, 6, false) == 0) && (chars.Length == 28))
                                                                        return TypeValueKnownValues.Value_NBAThreePointAttemptsPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(chars, 14, "ercentage", 0, 9, false) == 0) && (chars.Length == 23))
                                                            return TypeValueKnownValues.Value_NBAThreePointPercentage;
                                                        break;
                                                    case 's':
                                                        if (String.Compare(chars, 14, "Made", 0, 4, false) == 0)
                                                          {
                                                            if (chars.Length == 18)
                                                              {
                                                                return TypeValueKnownValues.Value_NBAThreePointsMade;
                                                              }
                                                            switch (chars[18])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 19, "erGame", 0, 6, false) == 0) && (chars.Length == 25))
                                                                        return TypeValueKnownValues.Value_NBAThreePointsMadePerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'u':
                                            if (String.Compare(chars, 5, "rnovers", 0, 7, false) == 0)
                                              {
                                                if (chars.Length == 12)
                                                  {
                                                    return TypeValueKnownValues.Value_NBATurnovers;
                                                  }
                                                switch (chars[12])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(chars, 13, "erGame", 0, 6, false) == 0) && (chars.Length == 19))
                                                            return TypeValueKnownValues.Value_NBATurnoversPerGame;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'w':
                                            if (String.Compare(chars, 5, "oPoint", 0, 6, false) == 0)
                                              {
                                                switch (chars[11])
                                                  {
                                                    case 'A':
                                                        if (String.Compare(chars, 12, "ttempts", 0, 7, false) == 0)
                                                          {
                                                            if (chars.Length == 19)
                                                              {
                                                                return TypeValueKnownValues.Value_NBATwoPointAttempts;
                                                              }
                                                            switch (chars[19])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 20, "erGame", 0, 6, false) == 0) && (chars.Length == 26))
                                                                        return TypeValueKnownValues.Value_NBATwoPointAttemptsPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(chars, 12, "ercentage", 0, 9, false) == 0) && (chars.Length == 21))
                                                            return TypeValueKnownValues.Value_NBATwoPointPercentage;
                                                        break;
                                                    case 's':
                                                        if (String.Compare(chars, 12, "Made", 0, 4, false) == 0)
                                                          {
                                                            if (chars.Length == 16)
                                                              {
                                                                return TypeValueKnownValues.Value_NBATwoPointsMade;
                                                              }
                                                            switch (chars[16])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 17, "erGame", 0, 6, false) == 0) && (chars.Length == 23))
                                                                        return TypeValueKnownValues.Value_NBATwoPointsMadePerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'C':
                        if (String.Compare(chars, 2, "AA", 0, 2, false) == 0)
                          {
                            switch (chars[4])
                              {
                                case 'F':
                                    if (String.Compare(chars, 5, "B", 0, 1, false) == 0)
                                      {
                                        switch (chars[6])
                                          {
                                            case '1':
                                                if ((String.Compare(chars, 7, "stDowns", 0, 7, false) == 0) && (chars.Length == 14))
                                                    return TypeValueKnownValues.Value_NCAAFB1stDowns;
                                                break;
                                            case '2':
                                                if (String.Compare(chars, 7, "PointConversions", 0, 16, false) == 0)
                                                  {
                                                    switch (chars[23])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(chars, 24, "ttempted", 0, 8, false) == 0) && (chars.Length == 32))
                                                                return TypeValueKnownValues.Value_NCAAFB2PointConversionsAttempted;
                                                            break;
                                                        case 'F':
                                                            if ((String.Compare(chars, 24, "ailed", 0, 5, false) == 0) && (chars.Length == 29))
                                                                return TypeValueKnownValues.Value_NCAAFB2PointConversionsFailed;
                                                            break;
                                                        case 'M':
                                                            if ((String.Compare(chars, 24, "ade", 0, 3, false) == 0) && (chars.Length == 27))
                                                                return TypeValueKnownValues.Value_NCAAFB2PointConversionsMade;
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(chars, 24, "assing", 0, 6, false) == 0) && (chars.Length == 30))
                                                                return TypeValueKnownValues.Value_NCAAFB2PointConversionsPassing;
                                                            break;
                                                        case 'R':
                                                            switch (chars[24])
                                                              {
                                                                case 'e':
                                                                    if ((String.Compare(chars, 25, "ceiving", 0, 7, false) == 0) && (chars.Length == 32))
                                                                        return TypeValueKnownValues.Value_NCAAFB2PointConversionsReceiving;
                                                                    break;
                                                                case 'u':
                                                                    if ((String.Compare(chars, 25, "shing", 0, 5, false) == 0) && (chars.Length == 30))
                                                                        return TypeValueKnownValues.Value_NCAAFB2PointConversionsRushing;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case '3':
                                                if (String.Compare(chars, 7, "rdDownConversion", 0, 16, false) == 0)
                                                  {
                                                    switch (chars[23])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(chars, 24, "ttempts", 0, 7, false) == 0) && (chars.Length == 31))
                                                                return TypeValueKnownValues.Value_NCAAFB3rdDownConversionAttempts;
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(chars, 24, "erc", 0, 3, false) == 0) && (chars.Length == 27))
                                                                return TypeValueKnownValues.Value_NCAAFB3rdDownConversionPerc;
                                                            break;
                                                        case 's':
                                                            if (chars.Length == 24)
                                                              {
                                                                return TypeValueKnownValues.Value_NCAAFB3rdDownConversions;
                                                              }
                                                            switch (chars[24])
                                                              {
                                                                case 'V':
                                                                    if (String.Compare(chars, 25, "ia", 0, 2, false) == 0)
                                                                      {
                                                                        switch (chars[27])
                                                                          {
                                                                            case 'P':
                                                                                switch (chars[28])
                                                                                  {
                                                                                    case 'a':
                                                                                        if ((String.Compare(chars, 29, "ss", 0, 2, false) == 0) && (chars.Length == 31))
                                                                                            return TypeValueKnownValues.Value_NCAAFB3rdDownConversionsViaPass;
                                                                                        break;
                                                                                    case 'e':
                                                                                        if ((String.Compare(chars, 29, "nalty", 0, 5, false) == 0) && (chars.Length == 34))
                                                                                            return TypeValueKnownValues.Value_NCAAFB3rdDownConversionsViaPenalty;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            case 'R':
                                                                                if ((String.Compare(chars, 28, "ush", 0, 3, false) == 0) && (chars.Length == 31))
                                                                                    return TypeValueKnownValues.Value_NCAAFB3rdDownConversionsViaRush;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case '4':
                                                if (String.Compare(chars, 7, "thDownConversion", 0, 16, false) == 0)
                                                  {
                                                    switch (chars[23])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(chars, 24, "ttempts", 0, 7, false) == 0) && (chars.Length == 31))
                                                                return TypeValueKnownValues.Value_NCAAFB4thDownConversionAttempts;
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(chars, 24, "erc", 0, 3, false) == 0) && (chars.Length == 27))
                                                                return TypeValueKnownValues.Value_NCAAFB4thDownConversionPerc;
                                                            break;
                                                        case 's':
                                                            if (chars.Length == 24)
                                                              {
                                                                return TypeValueKnownValues.Value_NCAAFB4thDownConversions;
                                                              }
                                                            switch (chars[24])
                                                              {
                                                                case 'V':
                                                                    if (String.Compare(chars, 25, "ia", 0, 2, false) == 0)
                                                                      {
                                                                        switch (chars[27])
                                                                          {
                                                                            case 'P':
                                                                                switch (chars[28])
                                                                                  {
                                                                                    case 'a':
                                                                                        if ((String.Compare(chars, 29, "ss", 0, 2, false) == 0) && (chars.Length == 31))
                                                                                            return TypeValueKnownValues.Value_NCAAFB4thDownConversionsViaPass;
                                                                                        break;
                                                                                    case 'e':
                                                                                        if ((String.Compare(chars, 29, "nalty", 0, 5, false) == 0) && (chars.Length == 34))
                                                                                            return TypeValueKnownValues.Value_NCAAFB4thDownConversionsViaPenalty;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            case 'R':
                                                                                if ((String.Compare(chars, 28, "ush", 0, 3, false) == 0) && (chars.Length == 31))
                                                                                    return TypeValueKnownValues.Value_NCAAFB4thDownConversionsViaRush;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'B':
                                                if (String.Compare(chars, 7, "locked", 0, 6, false) == 0)
                                                  {
                                                    switch (chars[13])
                                                      {
                                                        case 'F':
                                                            if (String.Compare(chars, 14, "ieldGoalReturns", 0, 15, false) == 0)
                                                              {
                                                                if (chars.Length == 29)
                                                                  {
                                                                    return TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns;
                                                                  }
                                                                switch (chars[29])
                                                                  {
                                                                    case '1':
                                                                        if ((String.Compare(chars, 30, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 40))
                                                                            return TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns10PlusYards;
                                                                        break;
                                                                    case '2':
                                                                        if ((String.Compare(chars, 30, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 40))
                                                                            return TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns20PlusYards;
                                                                        break;
                                                                    case '3':
                                                                        if ((String.Compare(chars, 30, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 40))
                                                                            return TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns30PlusYards;
                                                                        break;
                                                                    case '4':
                                                                        if ((String.Compare(chars, 30, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 40))
                                                                            return TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns40PlusYards;
                                                                        break;
                                                                    case '5':
                                                                        if ((String.Compare(chars, 30, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 40))
                                                                            return TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns50PlusYards;
                                                                        break;
                                                                    case 'A':
                                                                        if ((String.Compare(chars, 30, "verageReturn", 0, 12, false) == 0) && (chars.Length == 42))
                                                                            return TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsAverageReturn;
                                                                        break;
                                                                    case 'L':
                                                                        if ((String.Compare(chars, 30, "ongestReturn", 0, 12, false) == 0) && (chars.Length == 42))
                                                                            return TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsLongestReturn;
                                                                        break;
                                                                    case 'T':
                                                                        if (String.Compare(chars, 30, "o", 0, 1, false) == 0)
                                                                          {
                                                                            switch (chars[31])
                                                                              {
                                                                                case 't':
                                                                                    if ((String.Compare(chars, 32, "alYards", 0, 7, false) == 0) && (chars.Length == 39))
                                                                                        return TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsTotalYards;
                                                                                    break;
                                                                                case 'u':
                                                                                    if ((String.Compare(chars, 32, "chdowns", 0, 7, false) == 0) && (chars.Length == 39))
                                                                                        return TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsTouchdowns;
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'K':
                                                            if ((String.Compare(chars, 14, "icks", 0, 4, false) == 0) && (chars.Length == 18))
                                                                return TypeValueKnownValues.Value_NCAAFBBlockedKicks;
                                                            break;
                                                        case 'P':
                                                            if (String.Compare(chars, 14, "untReturn", 0, 9, false) == 0)
                                                              {
                                                                switch (chars[23])
                                                                  {
                                                                    case '1':
                                                                        if ((String.Compare(chars, 24, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 34))
                                                                            return TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn10PlusYards;
                                                                        break;
                                                                    case '2':
                                                                        if ((String.Compare(chars, 24, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 34))
                                                                            return TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn20PlusYards;
                                                                        break;
                                                                    case '3':
                                                                        if ((String.Compare(chars, 24, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 34))
                                                                            return TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn30PlusYards;
                                                                        break;
                                                                    case '4':
                                                                        if ((String.Compare(chars, 24, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 34))
                                                                            return TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn40PlusYards;
                                                                        break;
                                                                    case '5':
                                                                        if ((String.Compare(chars, 24, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 34))
                                                                            return TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn50PlusYards;
                                                                        break;
                                                                    case 's':
                                                                        if (chars.Length == 24)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NCAAFBBlockedPuntReturns;
                                                                          }
                                                                        switch (chars[24])
                                                                          {
                                                                            case 'A':
                                                                                if ((String.Compare(chars, 25, "verageReturn", 0, 12, false) == 0) && (chars.Length == 37))
                                                                                    return TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsAverageReturn;
                                                                                break;
                                                                            case 'L':
                                                                                if ((String.Compare(chars, 25, "ongestReturn", 0, 12, false) == 0) && (chars.Length == 37))
                                                                                    return TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsLongestReturn;
                                                                                break;
                                                                            case 'T':
                                                                                if (String.Compare(chars, 25, "o", 0, 1, false) == 0)
                                                                                  {
                                                                                    switch (chars[26])
                                                                                      {
                                                                                        case 't':
                                                                                            if ((String.Compare(chars, 27, "alYards", 0, 7, false) == 0) && (chars.Length == 34))
                                                                                                return TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsTotalYards;
                                                                                            break;
                                                                                        case 'u':
                                                                                            if ((String.Compare(chars, 27, "chdowns", 0, 7, false) == 0) && (chars.Length == 34))
                                                                                                return TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsTouchdowns;
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'E':
                                                if (String.Compare(chars, 7, "xtraPoints", 0, 10, false) == 0)
                                                  {
                                                    switch (chars[17])
                                                      {
                                                        case 'A':
                                                            if (String.Compare(chars, 18, "ttempted", 0, 8, false) == 0)
                                                              {
                                                                if (chars.Length == 26)
                                                                  {
                                                                    return TypeValueKnownValues.Value_NCAAFBExtraPointsAttempted;
                                                                  }
                                                                switch (chars[26])
                                                                  {
                                                                    case '2':
                                                                        if ((String.Compare(chars, 27, "PointConversion", 0, 15, false) == 0) && (chars.Length == 42))
                                                                            return TypeValueKnownValues.Value_NCAAFBExtraPointsAttempted2PointConversion;
                                                                        break;
                                                                    case 'K':
                                                                        if ((String.Compare(chars, 27, "icking", 0, 6, false) == 0) && (chars.Length == 33))
                                                                            return TypeValueKnownValues.Value_NCAAFBExtraPointsAttemptedKicking;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'B':
                                                            if ((String.Compare(chars, 18, "locked", 0, 6, false) == 0) && (chars.Length == 24))
                                                                return TypeValueKnownValues.Value_NCAAFBExtraPointsBlocked;
                                                            break;
                                                        case 'M':
                                                            if (String.Compare(chars, 18, "ade", 0, 3, false) == 0)
                                                              {
                                                                if (chars.Length == 21)
                                                                  {
                                                                    return TypeValueKnownValues.Value_NCAAFBExtraPointsMade;
                                                                  }
                                                                switch (chars[21])
                                                                  {
                                                                    case '2':
                                                                        if ((String.Compare(chars, 22, "PointConversion", 0, 15, false) == 0) && (chars.Length == 37))
                                                                            return TypeValueKnownValues.Value_NCAAFBExtraPointsMade2PointConversion;
                                                                        break;
                                                                    case 'K':
                                                                        if ((String.Compare(chars, 22, "icking", 0, 6, false) == 0) && (chars.Length == 28))
                                                                            return TypeValueKnownValues.Value_NCAAFBExtraPointsMadeKicking;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(chars, 18, "erc", 0, 3, false) == 0) && (chars.Length == 21))
                                                                return TypeValueKnownValues.Value_NCAAFBExtraPointsPerc;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'F':
                                                switch (chars[7])
                                                  {
                                                    case 'i':
                                                        if (String.Compare(chars, 8, "eldGoal", 0, 7, false) == 0)
                                                          {
                                                            switch (chars[15])
                                                              {
                                                                case 'R':
                                                                    if (String.Compare(chars, 16, "eturns", 0, 6, false) == 0)
                                                                      {
                                                                        if (chars.Length == 22)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NCAAFBFieldGoalReturns;
                                                                          }
                                                                        switch (chars[22])
                                                                          {
                                                                            case '1':
                                                                                if ((String.Compare(chars, 23, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 33))
                                                                                    return TypeValueKnownValues.Value_NCAAFBFieldGoalReturns10PlusYards;
                                                                                break;
                                                                            case '2':
                                                                                if ((String.Compare(chars, 23, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 33))
                                                                                    return TypeValueKnownValues.Value_NCAAFBFieldGoalReturns20PlusYards;
                                                                                break;
                                                                            case '3':
                                                                                if ((String.Compare(chars, 23, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 33))
                                                                                    return TypeValueKnownValues.Value_NCAAFBFieldGoalReturns30PlusYards;
                                                                                break;
                                                                            case '4':
                                                                                if ((String.Compare(chars, 23, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 33))
                                                                                    return TypeValueKnownValues.Value_NCAAFBFieldGoalReturns40PlusYards;
                                                                                break;
                                                                            case '5':
                                                                                if ((String.Compare(chars, 23, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 33))
                                                                                    return TypeValueKnownValues.Value_NCAAFBFieldGoalReturns50PlusYards;
                                                                                break;
                                                                            case 'A':
                                                                                if ((String.Compare(chars, 23, "verageReturn", 0, 12, false) == 0) && (chars.Length == 35))
                                                                                    return TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsAverageReturn;
                                                                                break;
                                                                            case 'L':
                                                                                if ((String.Compare(chars, 23, "ongestReturn", 0, 12, false) == 0) && (chars.Length == 35))
                                                                                    return TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsLongestReturn;
                                                                                break;
                                                                            case 'T':
                                                                                if (String.Compare(chars, 23, "o", 0, 1, false) == 0)
                                                                                  {
                                                                                    switch (chars[24])
                                                                                      {
                                                                                        case 't':
                                                                                            if ((String.Compare(chars, 25, "alYards", 0, 7, false) == 0) && (chars.Length == 32))
                                                                                                return TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsTotalYards;
                                                                                            break;
                                                                                        case 'u':
                                                                                            if ((String.Compare(chars, 25, "chdowns", 0, 7, false) == 0) && (chars.Length == 32))
                                                                                                return TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsTouchdowns;
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 's':
                                                                    switch (chars[16])
                                                                      {
                                                                        case 'A':
                                                                            if (String.Compare(chars, 17, "ttempted", 0, 8, false) == 0)
                                                                              {
                                                                                if (chars.Length == 25)
                                                                                  {
                                                                                    return TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted;
                                                                                  }
                                                                                switch (chars[25])
                                                                                  {
                                                                                    case '1':
                                                                                        if ((String.Compare(chars, 26, "to19Yards", 0, 9, false) == 0) && (chars.Length == 35))
                                                                                            return TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted1to19Yards;
                                                                                        break;
                                                                                    case '2':
                                                                                        if ((String.Compare(chars, 26, "0to29Yards", 0, 10, false) == 0) && (chars.Length == 36))
                                                                                            return TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted20to29Yards;
                                                                                        break;
                                                                                    case '3':
                                                                                        if ((String.Compare(chars, 26, "0to39Yards", 0, 10, false) == 0) && (chars.Length == 36))
                                                                                            return TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted30to39Yards;
                                                                                        break;
                                                                                    case '4':
                                                                                        if ((String.Compare(chars, 26, "0to49Yards", 0, 10, false) == 0) && (chars.Length == 36))
                                                                                            return TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted40to49Yards;
                                                                                        break;
                                                                                    case '5':
                                                                                        if ((String.Compare(chars, 26, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 36))
                                                                                            return TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted50PlusYards;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 'B':
                                                                            if ((String.Compare(chars, 17, "locked", 0, 6, false) == 0) && (chars.Length == 23))
                                                                                return TypeValueKnownValues.Value_NCAAFBFieldGoalsBlocked;
                                                                            break;
                                                                        case 'L':
                                                                            if ((String.Compare(chars, 17, "ongestMade", 0, 10, false) == 0) && (chars.Length == 27))
                                                                                return TypeValueKnownValues.Value_NCAAFBFieldGoalsLongestMade;
                                                                            break;
                                                                        case 'M':
                                                                            if (String.Compare(chars, 17, "ade", 0, 3, false) == 0)
                                                                              {
                                                                                if (chars.Length == 20)
                                                                                  {
                                                                                    return TypeValueKnownValues.Value_NCAAFBFieldGoalsMade;
                                                                                  }
                                                                                switch (chars[20])
                                                                                  {
                                                                                    case '1':
                                                                                        if ((String.Compare(chars, 21, "to19Yards", 0, 9, false) == 0) && (chars.Length == 30))
                                                                                            return TypeValueKnownValues.Value_NCAAFBFieldGoalsMade1to19Yards;
                                                                                        break;
                                                                                    case '2':
                                                                                        if ((String.Compare(chars, 21, "0to29Yards", 0, 10, false) == 0) && (chars.Length == 31))
                                                                                            return TypeValueKnownValues.Value_NCAAFBFieldGoalsMade20to29Yards;
                                                                                        break;
                                                                                    case '3':
                                                                                        if ((String.Compare(chars, 21, "0to39Yards", 0, 10, false) == 0) && (chars.Length == 31))
                                                                                            return TypeValueKnownValues.Value_NCAAFBFieldGoalsMade30to39Yards;
                                                                                        break;
                                                                                    case '4':
                                                                                        if ((String.Compare(chars, 21, "0to49Yards", 0, 10, false) == 0) && (chars.Length == 31))
                                                                                            return TypeValueKnownValues.Value_NCAAFBFieldGoalsMade40to49Yards;
                                                                                        break;
                                                                                    case '5':
                                                                                        if ((String.Compare(chars, 21, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 31))
                                                                                            return TypeValueKnownValues.Value_NCAAFBFieldGoalsMade50PlusYards;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 'P':
                                                                            if ((String.Compare(chars, 17, "erc", 0, 3, false) == 0) && (chars.Length == 20))
                                                                                return TypeValueKnownValues.Value_NCAAFBFieldGoalsPerc;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(chars, 8, "rcedFumbles", 0, 11, false) == 0) && (chars.Length == 19))
                                                            return TypeValueKnownValues.Value_NCAAFBForcedFumbles;
                                                        break;
                                                    case 'u':
                                                        if (String.Compare(chars, 8, "mbles", 0, 5, false) == 0)
                                                          {
                                                            if (chars.Length == 13)
                                                              {
                                                                return TypeValueKnownValues.Value_NCAAFBFumbles;
                                                              }
                                                            switch (chars[13])
                                                              {
                                                                case 'F':
                                                                    if ((String.Compare(chars, 14, "orced", 0, 5, false) == 0) && (chars.Length == 19))
                                                                        return TypeValueKnownValues.Value_NCAAFBFumblesForced;
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(chars, 14, "ost", 0, 3, false) == 0) && (chars.Length == 17))
                                                                        return TypeValueKnownValues.Value_NCAAFBFumblesLost;
                                                                    break;
                                                                case 'O':
                                                                    switch (chars[14])
                                                                      {
                                                                        case 'p':
                                                                            if (String.Compare(chars, 15, "ponent", 0, 6, false) == 0)
                                                                              {
                                                                                switch (chars[21])
                                                                                  {
                                                                                    case 'R':
                                                                                        if ((String.Compare(chars, 22, "ecovery", 0, 7, false) == 0) && (chars.Length == 29))
                                                                                            return TypeValueKnownValues.Value_NCAAFBFumblesOpponentRecovery;
                                                                                        break;
                                                                                    case 'T':
                                                                                        if ((String.Compare(chars, 22, "ouchdownsFromRecovery", 0, 21, false) == 0) && (chars.Length == 43))
                                                                                            return TypeValueKnownValues.Value_NCAAFBFumblesOpponentTouchdownsFromRecovery;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 'u':
                                                                            if ((String.Compare(chars, 15, "tOfBounds", 0, 9, false) == 0) && (chars.Length == 24))
                                                                                return TypeValueKnownValues.Value_NCAAFBFumblesOutOfBounds;
                                                                            break;
                                                                        case 'w':
                                                                            if (String.Compare(chars, 15, "n", 0, 1, false) == 0)
                                                                              {
                                                                                switch (chars[16])
                                                                                  {
                                                                                    case 'R':
                                                                                        if ((String.Compare(chars, 17, "ecovery", 0, 7, false) == 0) && (chars.Length == 24))
                                                                                            return TypeValueKnownValues.Value_NCAAFBFumblesOwnRecovery;
                                                                                        break;
                                                                                    case 'T':
                                                                                        if ((String.Compare(chars, 17, "ouchdownsFromRecovery", 0, 21, false) == 0) && (chars.Length == 38))
                                                                                            return TypeValueKnownValues.Value_NCAAFBFumblesOwnTouchdownsFromRecovery;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'R':
                                                                    if (String.Compare(chars, 14, "ecovered", 0, 8, false) == 0)
                                                                      {
                                                                        if (chars.Length == 22)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NCAAFBFumblesRecovered;
                                                                          }
                                                                        switch (chars[22])
                                                                          {
                                                                            case 'F':
                                                                                if ((String.Compare(chars, 23, "orTouchdowns", 0, 12, false) == 0) && (chars.Length == 35))
                                                                                    return TypeValueKnownValues.Value_NCAAFBFumblesRecoveredForTouchdowns;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'Y':
                                                                    if (String.Compare(chars, 14, "ardsFromO", 0, 9, false) == 0)
                                                                      {
                                                                        switch (chars[23])
                                                                          {
                                                                            case 'p':
                                                                                if ((String.Compare(chars, 24, "ponentRecovery", 0, 14, false) == 0) && (chars.Length == 38))
                                                                                    return TypeValueKnownValues.Value_NCAAFBFumblesYardsFromOpponentRecovery;
                                                                                break;
                                                                            case 'w':
                                                                                if ((String.Compare(chars, 24, "nRecovery", 0, 9, false) == 0) && (chars.Length == 33))
                                                                                    return TypeValueKnownValues.Value_NCAAFBFumblesYardsFromOwnRecovery;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'G':
                                                switch (chars[7])
                                                  {
                                                    case 'a':
                                                        if (String.Compare(chars, 8, "mes", 0, 3, false) == 0)
                                                          {
                                                            switch (chars[11])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 12, "layed", 0, 5, false) == 0) && (chars.Length == 17))
                                                                        return TypeValueKnownValues.Value_NCAAFBGamesPlayed;
                                                                    break;
                                                                case 'S':
                                                                    if ((String.Compare(chars, 12, "tarted", 0, 6, false) == 0) && (chars.Length == 18))
                                                                        return TypeValueKnownValues.Value_NCAAFBGamesStarted;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'o':
                                                        if (String.Compare(chars, 8, "alEfficiency", 0, 12, false) == 0)
                                                          {
                                                            switch (chars[20])
                                                              {
                                                                case 'A':
                                                                    if ((String.Compare(chars, 21, "ttempts", 0, 7, false) == 0) && (chars.Length == 28))
                                                                        return TypeValueKnownValues.Value_NCAAFBGoalEfficiencyAttempts;
                                                                    break;
                                                                case 'P':
                                                                    if ((String.Compare(chars, 21, "erc", 0, 3, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_NCAAFBGoalEfficiencyPerc;
                                                                    break;
                                                                case 'T':
                                                                    if ((String.Compare(chars, 21, "ouchdowns", 0, 9, false) == 0) && (chars.Length == 30))
                                                                        return TypeValueKnownValues.Value_NCAAFBGoalEfficiencyTouchdowns;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'I':
                                                if (String.Compare(chars, 7, "nterceptions", 0, 12, false) == 0)
                                                  {
                                                    if (chars.Length == 19)
                                                      {
                                                        return TypeValueKnownValues.Value_NCAAFBInterceptions;
                                                      }
                                                    switch (chars[19])
                                                      {
                                                        case 'L':
                                                            if ((String.Compare(chars, 20, "ongestInterception", 0, 18, false) == 0) && (chars.Length == 38))
                                                                return TypeValueKnownValues.Value_NCAAFBInterceptionsLongestInterception;
                                                            break;
                                                        case 'T':
                                                            if ((String.Compare(chars, 20, "ouchdowns", 0, 9, false) == 0) && (chars.Length == 29))
                                                                return TypeValueKnownValues.Value_NCAAFBInterceptionsTouchdowns;
                                                            break;
                                                        case 'Y':
                                                            if ((String.Compare(chars, 20, "ards", 0, 4, false) == 0) && (chars.Length == 24))
                                                                return TypeValueKnownValues.Value_NCAAFBInterceptionsYards;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'K':
                                                if (String.Compare(chars, 7, "ickoff", 0, 6, false) == 0)
                                                  {
                                                    switch (chars[13])
                                                      {
                                                        case 'R':
                                                            if (String.Compare(chars, 14, "eturns", 0, 6, false) == 0)
                                                              {
                                                                switch (chars[20])
                                                                  {
                                                                    case '1':
                                                                        if ((String.Compare(chars, 21, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_NCAAFBKickoffReturns10PlusYards;
                                                                        break;
                                                                    case '2':
                                                                        if ((String.Compare(chars, 21, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_NCAAFBKickoffReturns20PlusYards;
                                                                        break;
                                                                    case '3':
                                                                        if ((String.Compare(chars, 21, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_NCAAFBKickoffReturns30PlusYards;
                                                                        break;
                                                                    case '4':
                                                                        if ((String.Compare(chars, 21, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_NCAAFBKickoffReturns40PlusYards;
                                                                        break;
                                                                    case '5':
                                                                        if ((String.Compare(chars, 21, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_NCAAFBKickoffReturns50PlusYards;
                                                                        break;
                                                                    case 'A':
                                                                        if ((String.Compare(chars, 21, "verageRun", 0, 9, false) == 0) && (chars.Length == 30))
                                                                            return TypeValueKnownValues.Value_NCAAFBKickoffReturnsAverageRun;
                                                                        break;
                                                                    case 'F':
                                                                        if ((String.Compare(chars, 21, "airCatches", 0, 10, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_NCAAFBKickoffReturnsFairCatches;
                                                                        break;
                                                                    case 'L':
                                                                        if ((String.Compare(chars, 21, "ongestKickReturn", 0, 16, false) == 0) && (chars.Length == 37))
                                                                            return TypeValueKnownValues.Value_NCAAFBKickoffReturnsLongestKickReturn;
                                                                        break;
                                                                    case 'R':
                                                                        if ((String.Compare(chars, 21, "eturns", 0, 6, false) == 0) && (chars.Length == 27))
                                                                            return TypeValueKnownValues.Value_NCAAFBKickoffReturnsReturns;
                                                                        break;
                                                                    case 'T':
                                                                        if ((String.Compare(chars, 21, "ouchdowns", 0, 9, false) == 0) && (chars.Length == 30))
                                                                            return TypeValueKnownValues.Value_NCAAFBKickoffReturnsTouchdowns;
                                                                        break;
                                                                    case 'Y':
                                                                        if ((String.Compare(chars, 21, "ards", 0, 4, false) == 0) && (chars.Length == 25))
                                                                            return TypeValueKnownValues.Value_NCAAFBKickoffReturnsYards;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 's':
                                                            switch (chars[14])
                                                              {
                                                                case 'A':
                                                                    if (String.Compare(chars, 15, "verage", 0, 6, false) == 0)
                                                                      {
                                                                        switch (chars[21])
                                                                          {
                                                                            case 'G':
                                                                                if ((String.Compare(chars, 22, "rossYards", 0, 9, false) == 0) && (chars.Length == 31))
                                                                                    return TypeValueKnownValues.Value_NCAAFBKickoffsAverageGrossYards;
                                                                                break;
                                                                            case 'N':
                                                                                if ((String.Compare(chars, 22, "etYards", 0, 7, false) == 0) && (chars.Length == 29))
                                                                                    return TypeValueKnownValues.Value_NCAAFBKickoffsAverageNetYards;
                                                                                break;
                                                                            case 'R':
                                                                                if ((String.Compare(chars, 22, "eturnYards", 0, 10, false) == 0) && (chars.Length == 32))
                                                                                    return TypeValueKnownValues.Value_NCAAFBKickoffsAverageReturnYards;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'E':
                                                                    if ((String.Compare(chars, 15, "ndZoneKicks", 0, 11, false) == 0) && (chars.Length == 26))
                                                                        return TypeValueKnownValues.Value_NCAAFBKickoffsEndZoneKicks;
                                                                    break;
                                                                case 'G':
                                                                    if ((String.Compare(chars, 15, "rossYards", 0, 9, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_NCAAFBKickoffsGrossYards;
                                                                    break;
                                                                case 'I':
                                                                    if (String.Compare(chars, 15, "nsideOpponents20YardLine", 0, 24, false) == 0)
                                                                      {
                                                                        if (chars.Length == 39)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NCAAFBKickoffsInsideOpponents20YardLine;
                                                                          }
                                                                        switch (chars[39])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 40, "erc", 0, 3, false) == 0) && (chars.Length == 43))
                                                                                    return TypeValueKnownValues.Value_NCAAFBKickoffsInsideOpponents20YardLinePerc;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'K':
                                                                    if ((String.Compare(chars, 15, "icks", 0, 4, false) == 0) && (chars.Length == 19))
                                                                        return TypeValueKnownValues.Value_NCAAFBKickoffsKicks;
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(chars, 15, "ongestKick", 0, 10, false) == 0) && (chars.Length == 25))
                                                                        return TypeValueKnownValues.Value_NCAAFBKickoffsLongestKick;
                                                                    break;
                                                                case 'N':
                                                                    if ((String.Compare(chars, 15, "etYards", 0, 7, false) == 0) && (chars.Length == 22))
                                                                        return TypeValueKnownValues.Value_NCAAFBKickoffsNetYards;
                                                                    break;
                                                                case 'R':
                                                                    if ((String.Compare(chars, 15, "eturned", 0, 7, false) == 0) && (chars.Length == 22))
                                                                        return TypeValueKnownValues.Value_NCAAFBKickoffsReturned;
                                                                    break;
                                                                case 'T':
                                                                    if (String.Compare(chars, 15, "o", 0, 1, false) == 0)
                                                                      {
                                                                        switch (chars[16])
                                                                          {
                                                                            case 't':
                                                                                if ((String.Compare(chars, 17, "alReturnYards", 0, 13, false) == 0) && (chars.Length == 30))
                                                                                    return TypeValueKnownValues.Value_NCAAFBKickoffsTotalReturnYards;
                                                                                break;
                                                                            case 'u':
                                                                                if (String.Compare(chars, 17, "chbacks", 0, 7, false) == 0)
                                                                                  {
                                                                                    if (chars.Length == 24)
                                                                                      {
                                                                                        return TypeValueKnownValues.Value_NCAAFBKickoffsTouchbacks;
                                                                                      }
                                                                                    switch (chars[24])
                                                                                      {
                                                                                        case 'P':
                                                                                            if ((String.Compare(chars, 25, "erc", 0, 3, false) == 0) && (chars.Length == 28))
                                                                                                return TypeValueKnownValues.Value_NCAAFBKickoffsTouchbacksPerc;
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'M':
                                                if (String.Compare(chars, 7, "isc", 0, 3, false) == 0)
                                                  {
                                                    switch (chars[10])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(chars, 11, "ssistedTackles", 0, 14, false) == 0) && (chars.Length == 25))
                                                                return TypeValueKnownValues.Value_NCAAFBMiscAssistedTackles;
                                                            break;
                                                        case 'C':
                                                            if ((String.Compare(chars, 11, "ombinedTackles", 0, 14, false) == 0) && (chars.Length == 25))
                                                                return TypeValueKnownValues.Value_NCAAFBMiscCombinedTackles;
                                                            break;
                                                        case 'F':
                                                            switch (chars[11])
                                                              {
                                                                case 'o':
                                                                    if ((String.Compare(chars, 12, "rcedFumbles", 0, 11, false) == 0) && (chars.Length == 23))
                                                                        return TypeValueKnownValues.Value_NCAAFBMiscForcedFumbles;
                                                                    break;
                                                                case 'u':
                                                                    if ((String.Compare(chars, 12, "mblesRecovered", 0, 14, false) == 0) && (chars.Length == 26))
                                                                        return TypeValueKnownValues.Value_NCAAFBMiscFumblesRecovered;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'T':
                                                            if ((String.Compare(chars, 11, "ackles", 0, 6, false) == 0) && (chars.Length == 17))
                                                                return TypeValueKnownValues.Value_NCAAFBMiscTackles;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'P':
                                                switch (chars[7])
                                                  {
                                                    case 'a':
                                                        if (String.Compare(chars, 8, "ss", 0, 2, false) == 0)
                                                          {
                                                            switch (chars[10])
                                                              {
                                                                case 'e':
                                                                    if ((String.Compare(chars, 11, "sDefended", 0, 9, false) == 0) && (chars.Length == 20))
                                                                        return TypeValueKnownValues.Value_NCAAFBPassesDefended;
                                                                    break;
                                                                case 'i':
                                                                    if (String.Compare(chars, 11, "ng", 0, 2, false) == 0)
                                                                      {
                                                                        switch (chars[13])
                                                                          {
                                                                            case '1':
                                                                                switch (chars[14])
                                                                                  {
                                                                                    case '0':
                                                                                        if ((String.Compare(chars, 15, "PlusYards", 0, 9, false) == 0) && (chars.Length == 24))
                                                                                            return TypeValueKnownValues.Value_NCAAFBPassing10PlusYards;
                                                                                        break;
                                                                                    case 's':
                                                                                        if ((String.Compare(chars, 15, "tDowns", 0, 6, false) == 0) && (chars.Length == 21))
                                                                                            return TypeValueKnownValues.Value_NCAAFBPassing1stDowns;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            case '2':
                                                                                if ((String.Compare(chars, 14, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 24))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPassing20PlusYards;
                                                                                break;
                                                                            case '3':
                                                                                if ((String.Compare(chars, 14, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 24))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPassing30PlusYards;
                                                                                break;
                                                                            case '4':
                                                                                if ((String.Compare(chars, 14, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 24))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPassing40PlusYards;
                                                                                break;
                                                                            case '5':
                                                                                if ((String.Compare(chars, 14, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 24))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPassing50PlusYards;
                                                                                break;
                                                                            case 'A':
                                                                                switch (chars[14])
                                                                                  {
                                                                                    case 't':
                                                                                        if ((String.Compare(chars, 15, "tempts", 0, 6, false) == 0) && (chars.Length == 21))
                                                                                            return TypeValueKnownValues.Value_NCAAFBPassingAttempts;
                                                                                        break;
                                                                                    case 'v':
                                                                                        if (String.Compare(chars, 15, "erageYardsPer", 0, 13, false) == 0)
                                                                                          {
                                                                                            switch (chars[28])
                                                                                              {
                                                                                                case 'A':
                                                                                                    if ((String.Compare(chars, 29, "ttempt", 0, 6, false) == 0) && (chars.Length == 35))
                                                                                                        return TypeValueKnownValues.Value_NCAAFBPassingAverageYardsPerAttempt;
                                                                                                    break;
                                                                                                case 'C':
                                                                                                    if ((String.Compare(chars, 29, "ompletion", 0, 9, false) == 0) && (chars.Length == 38))
                                                                                                        return TypeValueKnownValues.Value_NCAAFBPassingAverageYardsPerCompletion;
                                                                                                    break;
                                                                                                default:
                                                                                                    break;
                                                                                              }
                                                                                          }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            case 'C':
                                                                                if (String.Compare(chars, 14, "ompletion", 0, 9, false) == 0)
                                                                                  {
                                                                                    switch (chars[23])
                                                                                      {
                                                                                        case 'P':
                                                                                            if ((String.Compare(chars, 24, "erc", 0, 3, false) == 0) && (chars.Length == 27))
                                                                                                return TypeValueKnownValues.Value_NCAAFBPassingCompletionPerc;
                                                                                            break;
                                                                                        case 's':
                                                                                            if (chars.Length == 24)
                                                                                                return TypeValueKnownValues.Value_NCAAFBPassingCompletions;
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 'G':
                                                                                if ((String.Compare(chars, 14, "rossYards", 0, 9, false) == 0) && (chars.Length == 23))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPassingGrossYards;
                                                                                break;
                                                                            case 'I':
                                                                                if (String.Compare(chars, 14, "nterception", 0, 11, false) == 0)
                                                                                  {
                                                                                    switch (chars[25])
                                                                                      {
                                                                                        case 'P':
                                                                                            if ((String.Compare(chars, 26, "erc", 0, 3, false) == 0) && (chars.Length == 29))
                                                                                                return TypeValueKnownValues.Value_NCAAFBPassingInterceptionPerc;
                                                                                            break;
                                                                                        case 's':
                                                                                            if (chars.Length == 26)
                                                                                              {
                                                                                                return TypeValueKnownValues.Value_NCAAFBPassingInterceptions;
                                                                                              }
                                                                                            switch (chars[26])
                                                                                              {
                                                                                                case 'R':
                                                                                                    if ((String.Compare(chars, 27, "eturnedForTouchdown", 0, 19, false) == 0) && (chars.Length == 46))
                                                                                                        return TypeValueKnownValues.Value_NCAAFBPassingInterceptionsReturnedForTouchdown;
                                                                                                    break;
                                                                                                default:
                                                                                                    break;
                                                                                              }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 'L':
                                                                                if ((String.Compare(chars, 14, "ongestPass", 0, 10, false) == 0) && (chars.Length == 24))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPassingLongestPass;
                                                                                break;
                                                                            case 'N':
                                                                                if ((String.Compare(chars, 14, "etYards", 0, 7, false) == 0) && (chars.Length == 21))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPassingNetYards;
                                                                                break;
                                                                            case 'R':
                                                                                switch (chars[14])
                                                                                  {
                                                                                    case 'a':
                                                                                        if ((String.Compare(chars, 15, "ting", 0, 4, false) == 0) && (chars.Length == 19))
                                                                                            return TypeValueKnownValues.Value_NCAAFBPassingRating;
                                                                                        break;
                                                                                    case 'e':
                                                                                        if ((String.Compare(chars, 15, "dZoneAttempts", 0, 13, false) == 0) && (chars.Length == 28))
                                                                                            return TypeValueKnownValues.Value_NCAAFBPassingRedZoneAttempts;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            case 'S':
                                                                                if (String.Compare(chars, 14, "acked", 0, 5, false) == 0)
                                                                                  {
                                                                                    if (chars.Length == 19)
                                                                                      {
                                                                                        return TypeValueKnownValues.Value_NCAAFBPassingSacked;
                                                                                      }
                                                                                    switch (chars[19])
                                                                                      {
                                                                                        case 'Y':
                                                                                            if ((String.Compare(chars, 20, "ardsLost", 0, 8, false) == 0) && (chars.Length == 28))
                                                                                                return TypeValueKnownValues.Value_NCAAFBPassingSackedYardsLost;
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 'T':
                                                                                switch (chars[14])
                                                                                  {
                                                                                    case 'a':
                                                                                        if ((String.Compare(chars, 15, "ckledForSafety", 0, 14, false) == 0) && (chars.Length == 29))
                                                                                            return TypeValueKnownValues.Value_NCAAFBPassingTackledForSafety;
                                                                                        break;
                                                                                    case 'o':
                                                                                        switch (chars[15])
                                                                                          {
                                                                                            case 't':
                                                                                                if ((String.Compare(chars, 16, "alYards", 0, 7, false) == 0) && (chars.Length == 23))
                                                                                                    return TypeValueKnownValues.Value_NCAAFBPassingTotalYards;
                                                                                                break;
                                                                                            case 'u':
                                                                                                if (String.Compare(chars, 16, "chdown", 0, 6, false) == 0)
                                                                                                  {
                                                                                                    switch (chars[22])
                                                                                                      {
                                                                                                        case 'P':
                                                                                                            if ((String.Compare(chars, 23, "erc", 0, 3, false) == 0) && (chars.Length == 26))
                                                                                                                return TypeValueKnownValues.Value_NCAAFBPassingTouchdownPerc;
                                                                                                            break;
                                                                                                        case 's':
                                                                                                            if (chars.Length == 23)
                                                                                                                return TypeValueKnownValues.Value_NCAAFBPassingTouchdowns;
                                                                                                            break;
                                                                                                        default:
                                                                                                            break;
                                                                                                      }
                                                                                                  }
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'e':
                                                        if (String.Compare(chars, 8, "nalties", 0, 7, false) == 0)
                                                          {
                                                            if (chars.Length == 15)
                                                              {
                                                                return TypeValueKnownValues.Value_NCAAFBPenalties;
                                                              }
                                                            switch (chars[15])
                                                              {
                                                                case '1':
                                                                    if ((String.Compare(chars, 16, "stDowns", 0, 7, false) == 0) && (chars.Length == 23))
                                                                        return TypeValueKnownValues.Value_NCAAFBPenalties1stDowns;
                                                                    break;
                                                                case 'Y':
                                                                    if ((String.Compare(chars, 16, "ards", 0, 4, false) == 0) && (chars.Length == 20))
                                                                        return TypeValueKnownValues.Value_NCAAFBPenaltiesYards;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'u':
                                                        if (String.Compare(chars, 8, "nt", 0, 2, false) == 0)
                                                          {
                                                            switch (chars[10])
                                                              {
                                                                case 'R':
                                                                    if (String.Compare(chars, 11, "eturns", 0, 6, false) == 0)
                                                                      {
                                                                        if (chars.Length == 17)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NCAAFBPuntReturns;
                                                                          }
                                                                        switch (chars[17])
                                                                          {
                                                                            case '1':
                                                                                if ((String.Compare(chars, 18, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 28))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPuntReturns10PlusYards;
                                                                                break;
                                                                            case '2':
                                                                                if ((String.Compare(chars, 18, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 28))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPuntReturns20PlusYards;
                                                                                break;
                                                                            case '3':
                                                                                if ((String.Compare(chars, 18, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 28))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPuntReturns30PlusYards;
                                                                                break;
                                                                            case '4':
                                                                                if ((String.Compare(chars, 18, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 28))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPuntReturns40PlusYards;
                                                                                break;
                                                                            case '5':
                                                                                if ((String.Compare(chars, 18, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 28))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPuntReturns50PlusYards;
                                                                                break;
                                                                            case 'A':
                                                                                if ((String.Compare(chars, 18, "verageRun", 0, 9, false) == 0) && (chars.Length == 27))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPuntReturnsAverageRun;
                                                                                break;
                                                                            case 'F':
                                                                                if ((String.Compare(chars, 18, "airCatches", 0, 10, false) == 0) && (chars.Length == 28))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPuntReturnsFairCatches;
                                                                                break;
                                                                            case 'L':
                                                                                if ((String.Compare(chars, 18, "ongestKickReturn", 0, 16, false) == 0) && (chars.Length == 34))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPuntReturnsLongestKickReturn;
                                                                                break;
                                                                            case 'T':
                                                                                if ((String.Compare(chars, 18, "ouchdowns", 0, 9, false) == 0) && (chars.Length == 27))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPuntReturnsTouchdowns;
                                                                                break;
                                                                            case 'Y':
                                                                                if ((String.Compare(chars, 18, "ards", 0, 4, false) == 0) && (chars.Length == 22))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPuntReturnsYards;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'i':
                                                                    if (String.Compare(chars, 11, "ng", 0, 2, false) == 0)
                                                                      {
                                                                        switch (chars[13])
                                                                          {
                                                                            case 'A':
                                                                                if (String.Compare(chars, 14, "verage", 0, 6, false) == 0)
                                                                                  {
                                                                                    switch (chars[20])
                                                                                      {
                                                                                        case 'G':
                                                                                            if ((String.Compare(chars, 21, "rossYards", 0, 9, false) == 0) && (chars.Length == 30))
                                                                                                return TypeValueKnownValues.Value_NCAAFBPuntingAverageGrossYards;
                                                                                            break;
                                                                                        case 'N':
                                                                                            if ((String.Compare(chars, 21, "etYards", 0, 7, false) == 0) && (chars.Length == 28))
                                                                                                return TypeValueKnownValues.Value_NCAAFBPuntingAverageNetYards;
                                                                                            break;
                                                                                        case 'R':
                                                                                            if ((String.Compare(chars, 21, "eturnYards", 0, 10, false) == 0) && (chars.Length == 31))
                                                                                                return TypeValueKnownValues.Value_NCAAFBPuntingAverageReturnYards;
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 'B':
                                                                                if ((String.Compare(chars, 14, "locked", 0, 6, false) == 0) && (chars.Length == 20))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPuntingBlocked;
                                                                                break;
                                                                            case 'G':
                                                                                if ((String.Compare(chars, 14, "rossYards", 0, 9, false) == 0) && (chars.Length == 23))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPuntingGrossYards;
                                                                                break;
                                                                            case 'I':
                                                                                if (String.Compare(chars, 14, "nsideOpponents20YardLine", 0, 24, false) == 0)
                                                                                  {
                                                                                    if (chars.Length == 38)
                                                                                      {
                                                                                        return TypeValueKnownValues.Value_NCAAFBPuntingInsideOpponents20YardLine;
                                                                                      }
                                                                                    switch (chars[38])
                                                                                      {
                                                                                        case 'P':
                                                                                            if ((String.Compare(chars, 39, "erc", 0, 3, false) == 0) && (chars.Length == 42))
                                                                                                return TypeValueKnownValues.Value_NCAAFBPuntingInsideOpponents20YardLinePerc;
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 'L':
                                                                                if ((String.Compare(chars, 14, "ongestPunt", 0, 10, false) == 0) && (chars.Length == 24))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPuntingLongestPunt;
                                                                                break;
                                                                            case 'N':
                                                                                if ((String.Compare(chars, 14, "etYards", 0, 7, false) == 0) && (chars.Length == 21))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPuntingNetYards;
                                                                                break;
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 14, "unts", 0, 4, false) == 0) && (chars.Length == 18))
                                                                                    return TypeValueKnownValues.Value_NCAAFBPuntingPunts;
                                                                                break;
                                                                            case 'R':
                                                                                if (String.Compare(chars, 14, "eturn", 0, 5, false) == 0)
                                                                                  {
                                                                                    switch (chars[19])
                                                                                      {
                                                                                        case 'Y':
                                                                                            if ((String.Compare(chars, 20, "ards", 0, 4, false) == 0) && (chars.Length == 24))
                                                                                                return TypeValueKnownValues.Value_NCAAFBPuntingReturnYards;
                                                                                            break;
                                                                                        case 'e':
                                                                                            if ((String.Compare(chars, 20, "d", 0, 1, false) == 0) && (chars.Length == 21))
                                                                                                return TypeValueKnownValues.Value_NCAAFBPuntingReturned;
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 'T':
                                                                                if (String.Compare(chars, 14, "ouchbacks", 0, 9, false) == 0)
                                                                                  {
                                                                                    if (chars.Length == 23)
                                                                                      {
                                                                                        return TypeValueKnownValues.Value_NCAAFBPuntingTouchbacks;
                                                                                      }
                                                                                    switch (chars[23])
                                                                                      {
                                                                                        case 'P':
                                                                                            if ((String.Compare(chars, 24, "erc", 0, 3, false) == 0) && (chars.Length == 27))
                                                                                                return TypeValueKnownValues.Value_NCAAFBPuntingTouchbacksPerc;
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'Q':
                                                if ((String.Compare(chars, 7, "uarterbackHits", 0, 14, false) == 0) && (chars.Length == 21))
                                                    return TypeValueKnownValues.Value_NCAAFBQuarterbackHits;
                                                break;
                                            case 'R':
                                                switch (chars[7])
                                                  {
                                                    case 'e':
                                                        switch (chars[8])
                                                          {
                                                            case 'c':
                                                                if (String.Compare(chars, 9, "eiving", 0, 6, false) == 0)
                                                                  {
                                                                    switch (chars[15])
                                                                      {
                                                                        case '1':
                                                                            switch (chars[16])
                                                                              {
                                                                                case '0':
                                                                                    if ((String.Compare(chars, 17, "PlusYards", 0, 9, false) == 0) && (chars.Length == 26))
                                                                                        return TypeValueKnownValues.Value_NCAAFBReceiving10PlusYards;
                                                                                    break;
                                                                                case 's':
                                                                                    if ((String.Compare(chars, 17, "tDowns", 0, 6, false) == 0) && (chars.Length == 23))
                                                                                        return TypeValueKnownValues.Value_NCAAFBReceiving1stDowns;
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        case '2':
                                                                            if ((String.Compare(chars, 16, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 26))
                                                                                return TypeValueKnownValues.Value_NCAAFBReceiving20PlusYards;
                                                                            break;
                                                                        case '3':
                                                                            if ((String.Compare(chars, 16, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 26))
                                                                                return TypeValueKnownValues.Value_NCAAFBReceiving30PlusYards;
                                                                            break;
                                                                        case '4':
                                                                            if ((String.Compare(chars, 16, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 26))
                                                                                return TypeValueKnownValues.Value_NCAAFBReceiving40PlusYards;
                                                                            break;
                                                                        case '5':
                                                                            if ((String.Compare(chars, 16, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 26))
                                                                                return TypeValueKnownValues.Value_NCAAFBReceiving50PlusYards;
                                                                            break;
                                                                        case 'A':
                                                                            if ((String.Compare(chars, 16, "verageReception", 0, 15, false) == 0) && (chars.Length == 31))
                                                                                return TypeValueKnownValues.Value_NCAAFBReceivingAverageReception;
                                                                            break;
                                                                        case 'F':
                                                                            if ((String.Compare(chars, 16, "umbledOnReception", 0, 17, false) == 0) && (chars.Length == 33))
                                                                                return TypeValueKnownValues.Value_NCAAFBReceivingFumbledOnReception;
                                                                            break;
                                                                        case 'L':
                                                                            if ((String.Compare(chars, 16, "ongestReception", 0, 15, false) == 0) && (chars.Length == 31))
                                                                                return TypeValueKnownValues.Value_NCAAFBReceivingLongestReception;
                                                                            break;
                                                                        case 'R':
                                                                            if (String.Compare(chars, 16, "e", 0, 1, false) == 0)
                                                                              {
                                                                                switch (chars[17])
                                                                                  {
                                                                                    case 'c':
                                                                                        if ((String.Compare(chars, 18, "eptions", 0, 7, false) == 0) && (chars.Length == 25))
                                                                                            return TypeValueKnownValues.Value_NCAAFBReceivingReceptions;
                                                                                        break;
                                                                                    case 'd':
                                                                                        if ((String.Compare(chars, 18, "ZoneTargets", 0, 11, false) == 0) && (chars.Length == 29))
                                                                                            return TypeValueKnownValues.Value_NCAAFBReceivingRedZoneTargets;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 'T':
                                                                            switch (chars[16])
                                                                              {
                                                                                case 'a':
                                                                                    if ((String.Compare(chars, 17, "rgets", 0, 5, false) == 0) && (chars.Length == 22))
                                                                                        return TypeValueKnownValues.Value_NCAAFBReceivingTargets;
                                                                                    break;
                                                                                case 'o':
                                                                                    switch (chars[17])
                                                                                      {
                                                                                        case 't':
                                                                                            if ((String.Compare(chars, 18, "alYards", 0, 7, false) == 0) && (chars.Length == 25))
                                                                                                return TypeValueKnownValues.Value_NCAAFBReceivingTotalYards;
                                                                                            break;
                                                                                        case 'u':
                                                                                            if ((String.Compare(chars, 18, "chdowns", 0, 7, false) == 0) && (chars.Length == 25))
                                                                                                return TypeValueKnownValues.Value_NCAAFBReceivingTouchdowns;
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        case 'Y':
                                                                            if ((String.Compare(chars, 16, "ardsAfterCompletion", 0, 19, false) == 0) && (chars.Length == 35))
                                                                                return TypeValueKnownValues.Value_NCAAFBReceivingYardsAfterCompletion;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'd':
                                                                if (String.Compare(chars, 9, "ZoneEfficiency", 0, 14, false) == 0)
                                                                  {
                                                                    switch (chars[23])
                                                                      {
                                                                        case 'A':
                                                                            if ((String.Compare(chars, 24, "ttempts", 0, 7, false) == 0) && (chars.Length == 31))
                                                                                return TypeValueKnownValues.Value_NCAAFBRedZoneEfficiencyAttempts;
                                                                            break;
                                                                        case 'C':
                                                                            if ((String.Compare(chars, 24, "onversions", 0, 10, false) == 0) && (chars.Length == 34))
                                                                                return TypeValueKnownValues.Value_NCAAFBRedZoneEfficiencyConversions;
                                                                            break;
                                                                        case 'P':
                                                                            if ((String.Compare(chars, 24, "erc", 0, 3, false) == 0) && (chars.Length == 27))
                                                                                return TypeValueKnownValues.Value_NCAAFBRedZoneEfficiencyPerc;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'u':
                                                        if (String.Compare(chars, 8, "shing", 0, 5, false) == 0)
                                                          {
                                                            switch (chars[13])
                                                              {
                                                                case '1':
                                                                    switch (chars[14])
                                                                      {
                                                                        case '0':
                                                                            if ((String.Compare(chars, 15, "PlusYards", 0, 9, false) == 0) && (chars.Length == 24))
                                                                                return TypeValueKnownValues.Value_NCAAFBRushing10PlusYards;
                                                                            break;
                                                                        case 's':
                                                                            if (String.Compare(chars, 15, "tDown", 0, 5, false) == 0)
                                                                              {
                                                                                switch (chars[20])
                                                                                  {
                                                                                    case 'P':
                                                                                        if ((String.Compare(chars, 21, "erc", 0, 3, false) == 0) && (chars.Length == 24))
                                                                                            return TypeValueKnownValues.Value_NCAAFBRushing1stDownPerc;
                                                                                        break;
                                                                                    case 's':
                                                                                        if (chars.Length == 21)
                                                                                            return TypeValueKnownValues.Value_NCAAFBRushing1stDowns;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case '2':
                                                                    if ((String.Compare(chars, 14, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_NCAAFBRushing20PlusYards;
                                                                    break;
                                                                case '3':
                                                                    if ((String.Compare(chars, 14, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_NCAAFBRushing30PlusYards;
                                                                    break;
                                                                case '4':
                                                                    if ((String.Compare(chars, 14, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_NCAAFBRushing40PlusYards;
                                                                    break;
                                                                case '5':
                                                                    if ((String.Compare(chars, 14, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_NCAAFBRushing50PlusYards;
                                                                    break;
                                                                case 'A':
                                                                    switch (chars[14])
                                                                      {
                                                                        case 't':
                                                                            if ((String.Compare(chars, 15, "tempts", 0, 6, false) == 0) && (chars.Length == 21))
                                                                                return TypeValueKnownValues.Value_NCAAFBRushingAttempts;
                                                                            break;
                                                                        case 'v':
                                                                            if ((String.Compare(chars, 15, "erageRush", 0, 9, false) == 0) && (chars.Length == 24))
                                                                                return TypeValueKnownValues.Value_NCAAFBRushingAverageRush;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'F':
                                                                    if ((String.Compare(chars, 14, "umbledOnRush", 0, 12, false) == 0) && (chars.Length == 26))
                                                                        return TypeValueKnownValues.Value_NCAAFBRushingFumbledOnRush;
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(chars, 14, "ongestRush", 0, 10, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_NCAAFBRushingLongestRush;
                                                                    break;
                                                                case 'R':
                                                                    if ((String.Compare(chars, 14, "edZoneAttempts", 0, 14, false) == 0) && (chars.Length == 28))
                                                                        return TypeValueKnownValues.Value_NCAAFBRushingRedZoneAttempts;
                                                                    break;
                                                                case 'T':
                                                                    switch (chars[14])
                                                                      {
                                                                        case 'a':
                                                                            if ((String.Compare(chars, 15, "ckledForSafety", 0, 14, false) == 0) && (chars.Length == 29))
                                                                                return TypeValueKnownValues.Value_NCAAFBRushingTackledForSafety;
                                                                            break;
                                                                        case 'o':
                                                                            switch (chars[15])
                                                                              {
                                                                                case 't':
                                                                                    if ((String.Compare(chars, 16, "alYards", 0, 7, false) == 0) && (chars.Length == 23))
                                                                                        return TypeValueKnownValues.Value_NCAAFBRushingTotalYards;
                                                                                    break;
                                                                                case 'u':
                                                                                    if ((String.Compare(chars, 16, "chdowns", 0, 7, false) == 0) && (chars.Length == 23))
                                                                                        return TypeValueKnownValues.Value_NCAAFBRushingTouchdowns;
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'S':
                                                switch (chars[7])
                                                  {
                                                    case 'a':
                                                        switch (chars[8])
                                                          {
                                                            case 'c':
                                                                if (String.Compare(chars, 9, "k", 0, 1, false) == 0)
                                                                  {
                                                                    switch (chars[10])
                                                                      {
                                                                        case 'Y':
                                                                            if ((String.Compare(chars, 11, "ards", 0, 4, false) == 0) && (chars.Length == 15))
                                                                                return TypeValueKnownValues.Value_NCAAFBSackYards;
                                                                            break;
                                                                        case 's':
                                                                            if (chars.Length == 11)
                                                                                return TypeValueKnownValues.Value_NCAAFBSacks;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'f':
                                                                if ((String.Compare(chars, 9, "eties", 0, 5, false) == 0) && (chars.Length == 14))
                                                                    return TypeValueKnownValues.Value_NCAAFBSafeties;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'p':
                                                        if (String.Compare(chars, 8, "ecialTeams", 0, 10, false) == 0)
                                                          {
                                                            switch (chars[18])
                                                              {
                                                                case 'A':
                                                                    if ((String.Compare(chars, 19, "ssistedTackles", 0, 14, false) == 0) && (chars.Length == 33))
                                                                        return TypeValueKnownValues.Value_NCAAFBSpecialTeamsAssistedTackles;
                                                                    break;
                                                                case 'C':
                                                                    if ((String.Compare(chars, 19, "ombinedTackles", 0, 14, false) == 0) && (chars.Length == 33))
                                                                        return TypeValueKnownValues.Value_NCAAFBSpecialTeamsCombinedTackles;
                                                                    break;
                                                                case 'F':
                                                                    switch (chars[19])
                                                                      {
                                                                        case 'o':
                                                                            if ((String.Compare(chars, 20, "rcedFumbles", 0, 11, false) == 0) && (chars.Length == 31))
                                                                                return TypeValueKnownValues.Value_NCAAFBSpecialTeamsForcedFumbles;
                                                                            break;
                                                                        case 'u':
                                                                            if ((String.Compare(chars, 20, "mblesRecovered", 0, 14, false) == 0) && (chars.Length == 34))
                                                                                return TypeValueKnownValues.Value_NCAAFBSpecialTeamsFumblesRecovered;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'T':
                                                                    if ((String.Compare(chars, 19, "otalTackles", 0, 11, false) == 0) && (chars.Length == 30))
                                                                        return TypeValueKnownValues.Value_NCAAFBSpecialTeamsTotalTackles;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'T':
                                                if (String.Compare(chars, 7, "ackles", 0, 6, false) == 0)
                                                  {
                                                    if (chars.Length == 13)
                                                      {
                                                        return TypeValueKnownValues.Value_NCAAFBTackles;
                                                      }
                                                    switch (chars[13])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(chars, 14, "ssisted", 0, 7, false) == 0) && (chars.Length == 21))
                                                                return TypeValueKnownValues.Value_NCAAFBTacklesAssisted;
                                                            break;
                                                        case 'C':
                                                            if ((String.Compare(chars, 14, "ombined", 0, 7, false) == 0) && (chars.Length == 21))
                                                                return TypeValueKnownValues.Value_NCAAFBTacklesCombined;
                                                            break;
                                                        case 'F':
                                                            if ((String.Compare(chars, 14, "orLoss", 0, 6, false) == 0) && (chars.Length == 20))
                                                                return TypeValueKnownValues.Value_NCAAFBTacklesForLoss;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'M':
                                    if (String.Compare(chars, 5, "B", 0, 1, false) == 0)
                                      {
                                        switch (chars[6])
                                          {
                                            case 'A':
                                                if (String.Compare(chars, 7, "ssists", 0, 6, false) == 0)
                                                  {
                                                    if (chars.Length == 13)
                                                      {
                                                        return TypeValueKnownValues.Value_NCAAMBAssists;
                                                      }
                                                    switch (chars[13])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 14, "erGame", 0, 6, false) == 0) && (chars.Length == 20))
                                                                return TypeValueKnownValues.Value_NCAAMBAssistsPerGame;
                                                            break;
                                                        case 'T':
                                                            if ((String.Compare(chars, 14, "oTurnoverRatio", 0, 14, false) == 0) && (chars.Length == 28))
                                                                return TypeValueKnownValues.Value_NCAAMBAssistsToTurnoverRatio;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'B':
                                                if (String.Compare(chars, 7, "locked", 0, 6, false) == 0)
                                                  {
                                                    switch (chars[13])
                                                      {
                                                        case 'A':
                                                            if (String.Compare(chars, 14, "ttempts", 0, 7, false) == 0)
                                                              {
                                                                if (chars.Length == 21)
                                                                  {
                                                                    return TypeValueKnownValues.Value_NCAAMBBlockedAttempts;
                                                                  }
                                                                switch (chars[21])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 22, "erGame", 0, 6, false) == 0) && (chars.Length == 28))
                                                                            return TypeValueKnownValues.Value_NCAAMBBlockedAttemptsPerGame;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'S':
                                                            if (String.Compare(chars, 14, "hots", 0, 4, false) == 0)
                                                              {
                                                                if (chars.Length == 18)
                                                                  {
                                                                    return TypeValueKnownValues.Value_NCAAMBBlockedShots;
                                                                  }
                                                                switch (chars[18])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 19, "erGame", 0, 6, false) == 0) && (chars.Length == 25))
                                                                            return TypeValueKnownValues.Value_NCAAMBBlockedShotsPerGame;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'C':
                                                if ((String.Compare(chars, 7, "oachTechnicalFouls", 0, 18, false) == 0) && (chars.Length == 25))
                                                    return TypeValueKnownValues.Value_NCAAMBCoachTechnicalFouls;
                                                break;
                                            case 'D':
                                                if (String.Compare(chars, 7, "efensiveRebounds", 0, 16, false) == 0)
                                                  {
                                                    if (chars.Length == 23)
                                                      {
                                                        return TypeValueKnownValues.Value_NCAAMBDefensiveRebounds;
                                                      }
                                                    switch (chars[23])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 24, "erGame", 0, 6, false) == 0) && (chars.Length == 30))
                                                                return TypeValueKnownValues.Value_NCAAMBDefensiveReboundsPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'E':
                                                if ((String.Compare(chars, 7, "jections", 0, 8, false) == 0) && (chars.Length == 15))
                                                    return TypeValueKnownValues.Value_NCAAMBEjections;
                                                break;
                                            case 'F':
                                                switch (chars[7])
                                                  {
                                                    case 'a':
                                                        if (String.Compare(chars, 8, "stBreakPoints", 0, 13, false) == 0)
                                                          {
                                                            if (chars.Length == 21)
                                                              {
                                                                return TypeValueKnownValues.Value_NCAAMBFastBreakPoints;
                                                              }
                                                            switch (chars[21])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 22, "erGame", 0, 6, false) == 0) && (chars.Length == 28))
                                                                        return TypeValueKnownValues.Value_NCAAMBFastBreakPointsPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'i':
                                                        if (String.Compare(chars, 8, "eldGoal", 0, 7, false) == 0)
                                                          {
                                                            switch (chars[15])
                                                              {
                                                                case 'A':
                                                                    if (String.Compare(chars, 16, "ttempts", 0, 7, false) == 0)
                                                                      {
                                                                        if (chars.Length == 23)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NCAAMBFieldGoalAttempts;
                                                                          }
                                                                        switch (chars[23])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 24, "erGame", 0, 6, false) == 0) && (chars.Length == 30))
                                                                                    return TypeValueKnownValues.Value_NCAAMBFieldGoalAttemptsPerGame;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'P':
                                                                    if ((String.Compare(chars, 16, "ercentage", 0, 9, false) == 0) && (chars.Length == 25))
                                                                        return TypeValueKnownValues.Value_NCAAMBFieldGoalPercentage;
                                                                    break;
                                                                case 's':
                                                                    if (String.Compare(chars, 16, "Made", 0, 4, false) == 0)
                                                                      {
                                                                        if (chars.Length == 20)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NCAAMBFieldGoalsMade;
                                                                          }
                                                                        switch (chars[20])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 21, "erGame", 0, 6, false) == 0) && (chars.Length == 27))
                                                                                    return TypeValueKnownValues.Value_NCAAMBFieldGoalsMadePerGame;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'l':
                                                        if (String.Compare(chars, 8, "agrantFouls", 0, 11, false) == 0)
                                                          {
                                                            if (chars.Length == 19)
                                                              {
                                                                return TypeValueKnownValues.Value_NCAAMBFlagrantFouls;
                                                              }
                                                            switch (chars[19])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 20, "erGame", 0, 6, false) == 0) && (chars.Length == 26))
                                                                        return TypeValueKnownValues.Value_NCAAMBFlagrantFoulsPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'r':
                                                        if (String.Compare(chars, 8, "eeThrow", 0, 7, false) == 0)
                                                          {
                                                            switch (chars[15])
                                                              {
                                                                case 'A':
                                                                    if (String.Compare(chars, 16, "ttempts", 0, 7, false) == 0)
                                                                      {
                                                                        if (chars.Length == 23)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NCAAMBFreeThrowAttempts;
                                                                          }
                                                                        switch (chars[23])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 24, "erGame", 0, 6, false) == 0) && (chars.Length == 30))
                                                                                    return TypeValueKnownValues.Value_NCAAMBFreeThrowAttemptsPerGame;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'P':
                                                                    if ((String.Compare(chars, 16, "ercentage", 0, 9, false) == 0) && (chars.Length == 25))
                                                                        return TypeValueKnownValues.Value_NCAAMBFreeThrowPercentage;
                                                                    break;
                                                                case 's':
                                                                    if (String.Compare(chars, 16, "Made", 0, 4, false) == 0)
                                                                      {
                                                                        if (chars.Length == 20)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NCAAMBFreeThrowsMade;
                                                                          }
                                                                        switch (chars[20])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 21, "erGame", 0, 6, false) == 0) && (chars.Length == 27))
                                                                                    return TypeValueKnownValues.Value_NCAAMBFreeThrowsMadePerGame;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'G':
                                                if (String.Compare(chars, 7, "ames", 0, 4, false) == 0)
                                                  {
                                                    switch (chars[11])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 12, "layed", 0, 5, false) == 0) && (chars.Length == 17))
                                                                return TypeValueKnownValues.Value_NCAAMBGamesPlayed;
                                                            break;
                                                        case 'S':
                                                            if ((String.Compare(chars, 12, "tarted", 0, 6, false) == 0) && (chars.Length == 18))
                                                                return TypeValueKnownValues.Value_NCAAMBGamesStarted;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'M':
                                                if (String.Compare(chars, 7, "inutesPlayed", 0, 12, false) == 0)
                                                  {
                                                    if (chars.Length == 19)
                                                      {
                                                        return TypeValueKnownValues.Value_NCAAMBMinutesPlayed;
                                                      }
                                                    switch (chars[19])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 20, "erGame", 0, 6, false) == 0) && (chars.Length == 26))
                                                                return TypeValueKnownValues.Value_NCAAMBMinutesPlayedPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'O':
                                                if (String.Compare(chars, 7, "ffensiveRebounds", 0, 16, false) == 0)
                                                  {
                                                    if (chars.Length == 23)
                                                      {
                                                        return TypeValueKnownValues.Value_NCAAMBOffensiveRebounds;
                                                      }
                                                    switch (chars[23])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 24, "erGame", 0, 6, false) == 0) && (chars.Length == 30))
                                                                return TypeValueKnownValues.Value_NCAAMBOffensiveReboundsPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'P':
                                                switch (chars[7])
                                                  {
                                                    case 'e':
                                                        if (String.Compare(chars, 8, "rsonalFouls", 0, 11, false) == 0)
                                                          {
                                                            if (chars.Length == 19)
                                                              {
                                                                return TypeValueKnownValues.Value_NCAAMBPersonalFouls;
                                                              }
                                                            switch (chars[19])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 20, "erGame", 0, 6, false) == 0) && (chars.Length == 26))
                                                                        return TypeValueKnownValues.Value_NCAAMBPersonalFoulsPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'l':
                                                        if ((String.Compare(chars, 8, "ayerTechnicalFouls", 0, 18, false) == 0) && (chars.Length == 26))
                                                            return TypeValueKnownValues.Value_NCAAMBPlayerTechnicalFouls;
                                                        break;
                                                    case 'o':
                                                        if (String.Compare(chars, 8, "ints", 0, 4, false) == 0)
                                                          {
                                                            if (chars.Length == 12)
                                                              {
                                                                return TypeValueKnownValues.Value_NCAAMBPoints;
                                                              }
                                                            switch (chars[12])
                                                              {
                                                                case 'I':
                                                                    if (String.Compare(chars, 13, "nPaint", 0, 6, false) == 0)
                                                                      {
                                                                        if (chars.Length == 19)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NCAAMBPointsInPaint;
                                                                          }
                                                                        switch (chars[19])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 20, "erGame", 0, 6, false) == 0) && (chars.Length == 26))
                                                                                    return TypeValueKnownValues.Value_NCAAMBPointsInPaintPerGame;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'O':
                                                                    if (String.Compare(chars, 13, "ffTurnovers", 0, 11, false) == 0)
                                                                      {
                                                                        if (chars.Length == 24)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NCAAMBPointsOffTurnovers;
                                                                          }
                                                                        switch (chars[24])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 25, "erGame", 0, 6, false) == 0) && (chars.Length == 31))
                                                                                    return TypeValueKnownValues.Value_NCAAMBPointsOffTurnoversPerGame;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'P':
                                                                    if ((String.Compare(chars, 13, "erGame", 0, 6, false) == 0) && (chars.Length == 19))
                                                                        return TypeValueKnownValues.Value_NCAAMBPointsPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'R':
                                                if (String.Compare(chars, 7, "ebounds", 0, 7, false) == 0)
                                                  {
                                                    if (chars.Length == 14)
                                                      {
                                                        return TypeValueKnownValues.Value_NCAAMBRebounds;
                                                      }
                                                    switch (chars[14])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 15, "erGame", 0, 6, false) == 0) && (chars.Length == 21))
                                                                return TypeValueKnownValues.Value_NCAAMBReboundsPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'S':
                                                switch (chars[7])
                                                  {
                                                    case 'e':
                                                        if (String.Compare(chars, 8, "condChancePoints", 0, 16, false) == 0)
                                                          {
                                                            if (chars.Length == 24)
                                                              {
                                                                return TypeValueKnownValues.Value_NCAAMBSecondChancePoints;
                                                              }
                                                            switch (chars[24])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 25, "erGame", 0, 6, false) == 0) && (chars.Length == 31))
                                                                        return TypeValueKnownValues.Value_NCAAMBSecondChancePointsPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 't':
                                                        if (String.Compare(chars, 8, "eals", 0, 4, false) == 0)
                                                          {
                                                            if (chars.Length == 12)
                                                              {
                                                                return TypeValueKnownValues.Value_NCAAMBSteals;
                                                              }
                                                            switch (chars[12])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 13, "erGame", 0, 6, false) == 0) && (chars.Length == 19))
                                                                        return TypeValueKnownValues.Value_NCAAMBStealsPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'T':
                                                switch (chars[7])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(chars, 8, "amTechnicalFouls", 0, 16, false) == 0) && (chars.Length == 24))
                                                            return TypeValueKnownValues.Value_NCAAMBTeamTechnicalFouls;
                                                        break;
                                                    case 'h':
                                                        if (String.Compare(chars, 8, "reePoint", 0, 8, false) == 0)
                                                          {
                                                            switch (chars[16])
                                                              {
                                                                case 'A':
                                                                    if (String.Compare(chars, 17, "ttempts", 0, 7, false) == 0)
                                                                      {
                                                                        if (chars.Length == 24)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NCAAMBThreePointAttempts;
                                                                          }
                                                                        switch (chars[24])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 25, "erGame", 0, 6, false) == 0) && (chars.Length == 31))
                                                                                    return TypeValueKnownValues.Value_NCAAMBThreePointAttemptsPerGame;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'P':
                                                                    if ((String.Compare(chars, 17, "ercentage", 0, 9, false) == 0) && (chars.Length == 26))
                                                                        return TypeValueKnownValues.Value_NCAAMBThreePointPercentage;
                                                                    break;
                                                                case 's':
                                                                    if (String.Compare(chars, 17, "Made", 0, 4, false) == 0)
                                                                      {
                                                                        if (chars.Length == 21)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NCAAMBThreePointsMade;
                                                                          }
                                                                        switch (chars[21])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 22, "erGame", 0, 6, false) == 0) && (chars.Length == 28))
                                                                                    return TypeValueKnownValues.Value_NCAAMBThreePointsMadePerGame;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'u':
                                                        if (String.Compare(chars, 8, "rnovers", 0, 7, false) == 0)
                                                          {
                                                            if (chars.Length == 15)
                                                              {
                                                                return TypeValueKnownValues.Value_NCAAMBTurnovers;
                                                              }
                                                            switch (chars[15])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 16, "erGame", 0, 6, false) == 0) && (chars.Length == 22))
                                                                        return TypeValueKnownValues.Value_NCAAMBTurnoversPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'w':
                                                        if (String.Compare(chars, 8, "oPoint", 0, 6, false) == 0)
                                                          {
                                                            switch (chars[14])
                                                              {
                                                                case 'A':
                                                                    if (String.Compare(chars, 15, "ttempts", 0, 7, false) == 0)
                                                                      {
                                                                        if (chars.Length == 22)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NCAAMBTwoPointAttempts;
                                                                          }
                                                                        switch (chars[22])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 23, "erGame", 0, 6, false) == 0) && (chars.Length == 29))
                                                                                    return TypeValueKnownValues.Value_NCAAMBTwoPointAttemptsPerGame;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'P':
                                                                    if ((String.Compare(chars, 15, "ercentage", 0, 9, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_NCAAMBTwoPointPercentage;
                                                                    break;
                                                                case 's':
                                                                    if (String.Compare(chars, 15, "Made", 0, 4, false) == 0)
                                                                      {
                                                                        if (chars.Length == 19)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NCAAMBTwoPointsMade;
                                                                          }
                                                                        switch (chars[19])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 20, "erGame", 0, 6, false) == 0) && (chars.Length == 26))
                                                                                    return TypeValueKnownValues.Value_NCAAMBTwoPointsMadePerGame;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'F':
                        if (String.Compare(chars, 2, "L", 0, 1, false) == 0)
                          {
                            switch (chars[3])
                              {
                                case '1':
                                    switch (chars[4])
                                      {
                                        case 'P':
                                            if ((String.Compare(chars, 5, "ointSafety", 0, 10, false) == 0) && (chars.Length == 15))
                                                return TypeValueKnownValues.Value_NFL1PointSafety;
                                            break;
                                        case 's':
                                            if ((String.Compare(chars, 5, "tDowns", 0, 6, false) == 0) && (chars.Length == 11))
                                                return TypeValueKnownValues.Value_NFL1stDowns;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case '2':
                                    if (String.Compare(chars, 4, "PointConversions", 0, 16, false) == 0)
                                      {
                                        switch (chars[20])
                                          {
                                            case 'A':
                                                if ((String.Compare(chars, 21, "ttempted", 0, 8, false) == 0) && (chars.Length == 29))
                                                    return TypeValueKnownValues.Value_NFL2PointConversionsAttempted;
                                                break;
                                            case 'F':
                                                if ((String.Compare(chars, 21, "ailed", 0, 5, false) == 0) && (chars.Length == 26))
                                                    return TypeValueKnownValues.Value_NFL2PointConversionsFailed;
                                                break;
                                            case 'M':
                                                if ((String.Compare(chars, 21, "ade", 0, 3, false) == 0) && (chars.Length == 24))
                                                    return TypeValueKnownValues.Value_NFL2PointConversionsMade;
                                                break;
                                            case 'P':
                                                if ((String.Compare(chars, 21, "assing", 0, 6, false) == 0) && (chars.Length == 27))
                                                    return TypeValueKnownValues.Value_NFL2PointConversionsPassing;
                                                break;
                                            case 'R':
                                                switch (chars[21])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(chars, 22, "ceiving", 0, 7, false) == 0) && (chars.Length == 29))
                                                            return TypeValueKnownValues.Value_NFL2PointConversionsReceiving;
                                                        break;
                                                    case 'u':
                                                        if ((String.Compare(chars, 22, "shing", 0, 5, false) == 0) && (chars.Length == 27))
                                                            return TypeValueKnownValues.Value_NFL2PointConversionsRushing;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case '3':
                                    if (String.Compare(chars, 4, "rdDownConversion", 0, 16, false) == 0)
                                      {
                                        switch (chars[20])
                                          {
                                            case 'A':
                                                if ((String.Compare(chars, 21, "ttempts", 0, 7, false) == 0) && (chars.Length == 28))
                                                    return TypeValueKnownValues.Value_NFL3rdDownConversionAttempts;
                                                break;
                                            case 'P':
                                                if ((String.Compare(chars, 21, "erc", 0, 3, false) == 0) && (chars.Length == 24))
                                                    return TypeValueKnownValues.Value_NFL3rdDownConversionPerc;
                                                break;
                                            case 's':
                                                if (chars.Length == 21)
                                                  {
                                                    return TypeValueKnownValues.Value_NFL3rdDownConversions;
                                                  }
                                                switch (chars[21])
                                                  {
                                                    case 'V':
                                                        if (String.Compare(chars, 22, "ia", 0, 2, false) == 0)
                                                          {
                                                            switch (chars[24])
                                                              {
                                                                case 'P':
                                                                    switch (chars[25])
                                                                      {
                                                                        case 'a':
                                                                            if ((String.Compare(chars, 26, "ss", 0, 2, false) == 0) && (chars.Length == 28))
                                                                                return TypeValueKnownValues.Value_NFL3rdDownConversionsViaPass;
                                                                            break;
                                                                        case 'e':
                                                                            if ((String.Compare(chars, 26, "nalty", 0, 5, false) == 0) && (chars.Length == 31))
                                                                                return TypeValueKnownValues.Value_NFL3rdDownConversionsViaPenalty;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'R':
                                                                    if ((String.Compare(chars, 25, "ush", 0, 3, false) == 0) && (chars.Length == 28))
                                                                        return TypeValueKnownValues.Value_NFL3rdDownConversionsViaRush;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case '4':
                                    if (String.Compare(chars, 4, "thDownConversion", 0, 16, false) == 0)
                                      {
                                        switch (chars[20])
                                          {
                                            case 'A':
                                                if ((String.Compare(chars, 21, "ttempts", 0, 7, false) == 0) && (chars.Length == 28))
                                                    return TypeValueKnownValues.Value_NFL4thDownConversionAttempts;
                                                break;
                                            case 'P':
                                                if ((String.Compare(chars, 21, "erc", 0, 3, false) == 0) && (chars.Length == 24))
                                                    return TypeValueKnownValues.Value_NFL4thDownConversionPerc;
                                                break;
                                            case 's':
                                                if (chars.Length == 21)
                                                  {
                                                    return TypeValueKnownValues.Value_NFL4thDownConversions;
                                                  }
                                                switch (chars[21])
                                                  {
                                                    case 'V':
                                                        if (String.Compare(chars, 22, "ia", 0, 2, false) == 0)
                                                          {
                                                            switch (chars[24])
                                                              {
                                                                case 'P':
                                                                    switch (chars[25])
                                                                      {
                                                                        case 'a':
                                                                            if ((String.Compare(chars, 26, "ss", 0, 2, false) == 0) && (chars.Length == 28))
                                                                                return TypeValueKnownValues.Value_NFL4thDownConversionsViaPass;
                                                                            break;
                                                                        case 'e':
                                                                            if ((String.Compare(chars, 26, "nalty", 0, 5, false) == 0) && (chars.Length == 31))
                                                                                return TypeValueKnownValues.Value_NFL4thDownConversionsViaPenalty;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'R':
                                                                    if ((String.Compare(chars, 25, "ush", 0, 3, false) == 0) && (chars.Length == 28))
                                                                        return TypeValueKnownValues.Value_NFL4thDownConversionsViaRush;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'B':
                                    if (String.Compare(chars, 4, "locked", 0, 6, false) == 0)
                                      {
                                        switch (chars[10])
                                          {
                                            case 'F':
                                                if (String.Compare(chars, 11, "ieldGoalReturns", 0, 15, false) == 0)
                                                  {
                                                    if (chars.Length == 26)
                                                      {
                                                        return TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns;
                                                      }
                                                    switch (chars[26])
                                                      {
                                                        case '1':
                                                            if ((String.Compare(chars, 27, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 37))
                                                                return TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns10PlusYards;
                                                            break;
                                                        case '2':
                                                            if ((String.Compare(chars, 27, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 37))
                                                                return TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns20PlusYards;
                                                            break;
                                                        case '3':
                                                            if ((String.Compare(chars, 27, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 37))
                                                                return TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns30PlusYards;
                                                            break;
                                                        case '4':
                                                            if ((String.Compare(chars, 27, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 37))
                                                                return TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns40PlusYards;
                                                            break;
                                                        case '5':
                                                            if ((String.Compare(chars, 27, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 37))
                                                                return TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns50PlusYards;
                                                            break;
                                                        case 'A':
                                                            if ((String.Compare(chars, 27, "verageReturn", 0, 12, false) == 0) && (chars.Length == 39))
                                                                return TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsAverageReturn;
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(chars, 27, "ongestReturn", 0, 12, false) == 0) && (chars.Length == 39))
                                                                return TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsLongestReturn;
                                                            break;
                                                        case 'T':
                                                            if (String.Compare(chars, 27, "o", 0, 1, false) == 0)
                                                              {
                                                                switch (chars[28])
                                                                  {
                                                                    case 't':
                                                                        if ((String.Compare(chars, 29, "alYards", 0, 7, false) == 0) && (chars.Length == 36))
                                                                            return TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsTotalYards;
                                                                        break;
                                                                    case 'u':
                                                                        if ((String.Compare(chars, 29, "chdowns", 0, 7, false) == 0) && (chars.Length == 36))
                                                                            return TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsTouchdowns;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'K':
                                                if ((String.Compare(chars, 11, "icks", 0, 4, false) == 0) && (chars.Length == 15))
                                                    return TypeValueKnownValues.Value_NFLBlockedKicks;
                                                break;
                                            case 'P':
                                                if (String.Compare(chars, 11, "untReturn", 0, 9, false) == 0)
                                                  {
                                                    switch (chars[20])
                                                      {
                                                        case '1':
                                                            if ((String.Compare(chars, 21, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 31))
                                                                return TypeValueKnownValues.Value_NFLBlockedPuntReturn10PlusYards;
                                                            break;
                                                        case '2':
                                                            if ((String.Compare(chars, 21, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 31))
                                                                return TypeValueKnownValues.Value_NFLBlockedPuntReturn20PlusYards;
                                                            break;
                                                        case '3':
                                                            if ((String.Compare(chars, 21, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 31))
                                                                return TypeValueKnownValues.Value_NFLBlockedPuntReturn30PlusYards;
                                                            break;
                                                        case '4':
                                                            if ((String.Compare(chars, 21, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 31))
                                                                return TypeValueKnownValues.Value_NFLBlockedPuntReturn40PlusYards;
                                                            break;
                                                        case '5':
                                                            if ((String.Compare(chars, 21, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 31))
                                                                return TypeValueKnownValues.Value_NFLBlockedPuntReturn50PlusYards;
                                                            break;
                                                        case 's':
                                                            if (chars.Length == 21)
                                                              {
                                                                return TypeValueKnownValues.Value_NFLBlockedPuntReturns;
                                                              }
                                                            switch (chars[21])
                                                              {
                                                                case 'A':
                                                                    if ((String.Compare(chars, 22, "verageReturn", 0, 12, false) == 0) && (chars.Length == 34))
                                                                        return TypeValueKnownValues.Value_NFLBlockedPuntReturnsAverageReturn;
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(chars, 22, "ongestReturn", 0, 12, false) == 0) && (chars.Length == 34))
                                                                        return TypeValueKnownValues.Value_NFLBlockedPuntReturnsLongestReturn;
                                                                    break;
                                                                case 'T':
                                                                    if (String.Compare(chars, 22, "o", 0, 1, false) == 0)
                                                                      {
                                                                        switch (chars[23])
                                                                          {
                                                                            case 't':
                                                                                if ((String.Compare(chars, 24, "alYards", 0, 7, false) == 0) && (chars.Length == 31))
                                                                                    return TypeValueKnownValues.Value_NFLBlockedPuntReturnsTotalYards;
                                                                                break;
                                                                            case 'u':
                                                                                if ((String.Compare(chars, 24, "chdowns", 0, 7, false) == 0) && (chars.Length == 31))
                                                                                    return TypeValueKnownValues.Value_NFLBlockedPuntReturnsTouchdowns;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'C':
                                    if (String.Compare(chars, 4, "onversion", 0, 9, false) == 0)
                                      {
                                        switch (chars[13])
                                          {
                                            case 'A':
                                                if ((String.Compare(chars, 14, "ttempts", 0, 7, false) == 0) && (chars.Length == 21))
                                                    return TypeValueKnownValues.Value_NFLConversionAttempts;
                                                break;
                                            case 's':
                                                switch (chars[14])
                                                  {
                                                    case 'C':
                                                        if ((String.Compare(chars, 15, "ompleted", 0, 8, false) == 0) && (chars.Length == 23))
                                                            return TypeValueKnownValues.Value_NFLConversionsCompleted;
                                                        break;
                                                    case 'F':
                                                        if ((String.Compare(chars, 15, "ailed", 0, 5, false) == 0) && (chars.Length == 20))
                                                            return TypeValueKnownValues.Value_NFLConversionsFailed;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'E':
                                    if (String.Compare(chars, 4, "xtraPoints", 0, 10, false) == 0)
                                      {
                                        switch (chars[14])
                                          {
                                            case 'A':
                                                if (String.Compare(chars, 15, "ttempted", 0, 8, false) == 0)
                                                  {
                                                    if (chars.Length == 23)
                                                      {
                                                        return TypeValueKnownValues.Value_NFLExtraPointsAttempted;
                                                      }
                                                    switch (chars[23])
                                                      {
                                                        case '2':
                                                            if ((String.Compare(chars, 24, "PointConversion", 0, 15, false) == 0) && (chars.Length == 39))
                                                                return TypeValueKnownValues.Value_NFLExtraPointsAttempted2PointConversion;
                                                            break;
                                                        case 'K':
                                                            if ((String.Compare(chars, 24, "icking", 0, 6, false) == 0) && (chars.Length == 30))
                                                                return TypeValueKnownValues.Value_NFLExtraPointsAttemptedKicking;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'B':
                                                if ((String.Compare(chars, 15, "locked", 0, 6, false) == 0) && (chars.Length == 21))
                                                    return TypeValueKnownValues.Value_NFLExtraPointsBlocked;
                                                break;
                                            case 'M':
                                                if (String.Compare(chars, 15, "ade", 0, 3, false) == 0)
                                                  {
                                                    if (chars.Length == 18)
                                                      {
                                                        return TypeValueKnownValues.Value_NFLExtraPointsMade;
                                                      }
                                                    switch (chars[18])
                                                      {
                                                        case '2':
                                                            if ((String.Compare(chars, 19, "PointConversion", 0, 15, false) == 0) && (chars.Length == 34))
                                                                return TypeValueKnownValues.Value_NFLExtraPointsMade2PointConversion;
                                                            break;
                                                        case 'K':
                                                            if ((String.Compare(chars, 19, "icking", 0, 6, false) == 0) && (chars.Length == 25))
                                                                return TypeValueKnownValues.Value_NFLExtraPointsMadeKicking;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'P':
                                                if ((String.Compare(chars, 15, "erc", 0, 3, false) == 0) && (chars.Length == 18))
                                                    return TypeValueKnownValues.Value_NFLExtraPointsPerc;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'F':
                                    switch (chars[4])
                                      {
                                        case 'i':
                                            if (String.Compare(chars, 5, "eldGoal", 0, 7, false) == 0)
                                              {
                                                switch (chars[12])
                                                  {
                                                    case 'R':
                                                        if (String.Compare(chars, 13, "eturns", 0, 6, false) == 0)
                                                          {
                                                            if (chars.Length == 19)
                                                              {
                                                                return TypeValueKnownValues.Value_NFLFieldGoalReturns;
                                                              }
                                                            switch (chars[19])
                                                              {
                                                                case '1':
                                                                    if ((String.Compare(chars, 20, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 30))
                                                                        return TypeValueKnownValues.Value_NFLFieldGoalReturns10PlusYards;
                                                                    break;
                                                                case '2':
                                                                    if ((String.Compare(chars, 20, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 30))
                                                                        return TypeValueKnownValues.Value_NFLFieldGoalReturns20PlusYards;
                                                                    break;
                                                                case '3':
                                                                    if ((String.Compare(chars, 20, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 30))
                                                                        return TypeValueKnownValues.Value_NFLFieldGoalReturns30PlusYards;
                                                                    break;
                                                                case '4':
                                                                    if ((String.Compare(chars, 20, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 30))
                                                                        return TypeValueKnownValues.Value_NFLFieldGoalReturns40PlusYards;
                                                                    break;
                                                                case '5':
                                                                    if ((String.Compare(chars, 20, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 30))
                                                                        return TypeValueKnownValues.Value_NFLFieldGoalReturns50PlusYards;
                                                                    break;
                                                                case 'A':
                                                                    if ((String.Compare(chars, 20, "verageReturn", 0, 12, false) == 0) && (chars.Length == 32))
                                                                        return TypeValueKnownValues.Value_NFLFieldGoalReturnsAverageReturn;
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(chars, 20, "ongestReturn", 0, 12, false) == 0) && (chars.Length == 32))
                                                                        return TypeValueKnownValues.Value_NFLFieldGoalReturnsLongestReturn;
                                                                    break;
                                                                case 'T':
                                                                    if (String.Compare(chars, 20, "o", 0, 1, false) == 0)
                                                                      {
                                                                        switch (chars[21])
                                                                          {
                                                                            case 't':
                                                                                if ((String.Compare(chars, 22, "alYards", 0, 7, false) == 0) && (chars.Length == 29))
                                                                                    return TypeValueKnownValues.Value_NFLFieldGoalReturnsTotalYards;
                                                                                break;
                                                                            case 'u':
                                                                                if ((String.Compare(chars, 22, "chdowns", 0, 7, false) == 0) && (chars.Length == 29))
                                                                                    return TypeValueKnownValues.Value_NFLFieldGoalReturnsTouchdowns;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 's':
                                                        switch (chars[13])
                                                          {
                                                            case 'A':
                                                                if (String.Compare(chars, 14, "ttempted", 0, 8, false) == 0)
                                                                  {
                                                                    if (chars.Length == 22)
                                                                      {
                                                                        return TypeValueKnownValues.Value_NFLFieldGoalsAttempted;
                                                                      }
                                                                    switch (chars[22])
                                                                      {
                                                                        case '1':
                                                                            if ((String.Compare(chars, 23, "to19Yards", 0, 9, false) == 0) && (chars.Length == 32))
                                                                                return TypeValueKnownValues.Value_NFLFieldGoalsAttempted1to19Yards;
                                                                            break;
                                                                        case '2':
                                                                            if ((String.Compare(chars, 23, "0to29Yards", 0, 10, false) == 0) && (chars.Length == 33))
                                                                                return TypeValueKnownValues.Value_NFLFieldGoalsAttempted20to29Yards;
                                                                            break;
                                                                        case '3':
                                                                            if ((String.Compare(chars, 23, "0to39Yards", 0, 10, false) == 0) && (chars.Length == 33))
                                                                                return TypeValueKnownValues.Value_NFLFieldGoalsAttempted30to39Yards;
                                                                            break;
                                                                        case '4':
                                                                            if ((String.Compare(chars, 23, "0to49Yards", 0, 10, false) == 0) && (chars.Length == 33))
                                                                                return TypeValueKnownValues.Value_NFLFieldGoalsAttempted40to49Yards;
                                                                            break;
                                                                        case '5':
                                                                            if ((String.Compare(chars, 23, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 33))
                                                                                return TypeValueKnownValues.Value_NFLFieldGoalsAttempted50PlusYards;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'B':
                                                                if ((String.Compare(chars, 14, "locked", 0, 6, false) == 0) && (chars.Length == 20))
                                                                    return TypeValueKnownValues.Value_NFLFieldGoalsBlocked;
                                                                break;
                                                            case 'L':
                                                                if ((String.Compare(chars, 14, "ongestMade", 0, 10, false) == 0) && (chars.Length == 24))
                                                                    return TypeValueKnownValues.Value_NFLFieldGoalsLongestMade;
                                                                break;
                                                            case 'M':
                                                                if (String.Compare(chars, 14, "ade", 0, 3, false) == 0)
                                                                  {
                                                                    if (chars.Length == 17)
                                                                      {
                                                                        return TypeValueKnownValues.Value_NFLFieldGoalsMade;
                                                                      }
                                                                    switch (chars[17])
                                                                      {
                                                                        case '1':
                                                                            if ((String.Compare(chars, 18, "to19Yards", 0, 9, false) == 0) && (chars.Length == 27))
                                                                                return TypeValueKnownValues.Value_NFLFieldGoalsMade1to19Yards;
                                                                            break;
                                                                        case '2':
                                                                            if ((String.Compare(chars, 18, "0to29Yards", 0, 10, false) == 0) && (chars.Length == 28))
                                                                                return TypeValueKnownValues.Value_NFLFieldGoalsMade20to29Yards;
                                                                            break;
                                                                        case '3':
                                                                            if ((String.Compare(chars, 18, "0to39Yards", 0, 10, false) == 0) && (chars.Length == 28))
                                                                                return TypeValueKnownValues.Value_NFLFieldGoalsMade30to39Yards;
                                                                            break;
                                                                        case '4':
                                                                            if ((String.Compare(chars, 18, "0to49Yards", 0, 10, false) == 0) && (chars.Length == 28))
                                                                                return TypeValueKnownValues.Value_NFLFieldGoalsMade40to49Yards;
                                                                            break;
                                                                        case '5':
                                                                            if ((String.Compare(chars, 18, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 28))
                                                                                return TypeValueKnownValues.Value_NFLFieldGoalsMade50PlusYards;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'P':
                                                                if ((String.Compare(chars, 14, "erc", 0, 3, false) == 0) && (chars.Length == 17))
                                                                    return TypeValueKnownValues.Value_NFLFieldGoalsPerc;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'o':
                                            if ((String.Compare(chars, 5, "rcedFumbles", 0, 11, false) == 0) && (chars.Length == 16))
                                                return TypeValueKnownValues.Value_NFLForcedFumbles;
                                            break;
                                        case 'u':
                                            if (String.Compare(chars, 5, "mbles", 0, 5, false) == 0)
                                              {
                                                if (chars.Length == 10)
                                                  {
                                                    return TypeValueKnownValues.Value_NFLFumbles;
                                                  }
                                                switch (chars[10])
                                                  {
                                                    case 'F':
                                                        if ((String.Compare(chars, 11, "orced", 0, 5, false) == 0) && (chars.Length == 16))
                                                            return TypeValueKnownValues.Value_NFLFumblesForced;
                                                        break;
                                                    case 'L':
                                                        if ((String.Compare(chars, 11, "ost", 0, 3, false) == 0) && (chars.Length == 14))
                                                            return TypeValueKnownValues.Value_NFLFumblesLost;
                                                        break;
                                                    case 'O':
                                                        switch (chars[11])
                                                          {
                                                            case 'p':
                                                                if (String.Compare(chars, 12, "ponent", 0, 6, false) == 0)
                                                                  {
                                                                    switch (chars[18])
                                                                      {
                                                                        case 'R':
                                                                            if ((String.Compare(chars, 19, "ecovery", 0, 7, false) == 0) && (chars.Length == 26))
                                                                                return TypeValueKnownValues.Value_NFLFumblesOpponentRecovery;
                                                                            break;
                                                                        case 'T':
                                                                            if ((String.Compare(chars, 19, "ouchdownsFromRecovery", 0, 21, false) == 0) && (chars.Length == 40))
                                                                                return TypeValueKnownValues.Value_NFLFumblesOpponentTouchdownsFromRecovery;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'u':
                                                                if ((String.Compare(chars, 12, "tOfBounds", 0, 9, false) == 0) && (chars.Length == 21))
                                                                    return TypeValueKnownValues.Value_NFLFumblesOutOfBounds;
                                                                break;
                                                            case 'w':
                                                                if (String.Compare(chars, 12, "n", 0, 1, false) == 0)
                                                                  {
                                                                    switch (chars[13])
                                                                      {
                                                                        case 'R':
                                                                            if ((String.Compare(chars, 14, "ecovery", 0, 7, false) == 0) && (chars.Length == 21))
                                                                                return TypeValueKnownValues.Value_NFLFumblesOwnRecovery;
                                                                            break;
                                                                        case 'T':
                                                                            if ((String.Compare(chars, 14, "ouchdownsFromRecovery", 0, 21, false) == 0) && (chars.Length == 35))
                                                                                return TypeValueKnownValues.Value_NFLFumblesOwnTouchdownsFromRecovery;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'R':
                                                        if (String.Compare(chars, 11, "ecovered", 0, 8, false) == 0)
                                                          {
                                                            if (chars.Length == 19)
                                                              {
                                                                return TypeValueKnownValues.Value_NFLFumblesRecovered;
                                                              }
                                                            switch (chars[19])
                                                              {
                                                                case 'F':
                                                                    if ((String.Compare(chars, 20, "orTouchdowns", 0, 12, false) == 0) && (chars.Length == 32))
                                                                        return TypeValueKnownValues.Value_NFLFumblesRecoveredForTouchdowns;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'Y':
                                                        if (String.Compare(chars, 11, "ardsFromO", 0, 9, false) == 0)
                                                          {
                                                            switch (chars[20])
                                                              {
                                                                case 'p':
                                                                    if ((String.Compare(chars, 21, "ponentRecovery", 0, 14, false) == 0) && (chars.Length == 35))
                                                                        return TypeValueKnownValues.Value_NFLFumblesYardsFromOpponentRecovery;
                                                                    break;
                                                                case 'w':
                                                                    if ((String.Compare(chars, 21, "nRecovery", 0, 9, false) == 0) && (chars.Length == 30))
                                                                        return TypeValueKnownValues.Value_NFLFumblesYardsFromOwnRecovery;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'G':
                                    switch (chars[4])
                                      {
                                        case 'a':
                                            if (String.Compare(chars, 5, "mes", 0, 3, false) == 0)
                                              {
                                                switch (chars[8])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(chars, 9, "layed", 0, 5, false) == 0) && (chars.Length == 14))
                                                            return TypeValueKnownValues.Value_NFLGamesPlayed;
                                                        break;
                                                    case 'S':
                                                        if ((String.Compare(chars, 9, "tarted", 0, 6, false) == 0) && (chars.Length == 15))
                                                            return TypeValueKnownValues.Value_NFLGamesStarted;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'o':
                                            if (String.Compare(chars, 5, "alEfficiency", 0, 12, false) == 0)
                                              {
                                                switch (chars[17])
                                                  {
                                                    case 'A':
                                                        if ((String.Compare(chars, 18, "ttempts", 0, 7, false) == 0) && (chars.Length == 25))
                                                            return TypeValueKnownValues.Value_NFLGoalEfficiencyAttempts;
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(chars, 18, "erc", 0, 3, false) == 0) && (chars.Length == 21))
                                                            return TypeValueKnownValues.Value_NFLGoalEfficiencyPerc;
                                                        break;
                                                    case 'T':
                                                        if ((String.Compare(chars, 18, "ouchdowns", 0, 9, false) == 0) && (chars.Length == 27))
                                                            return TypeValueKnownValues.Value_NFLGoalEfficiencyTouchdowns;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'I':
                                    if (String.Compare(chars, 4, "nterceptions", 0, 12, false) == 0)
                                      {
                                        if (chars.Length == 16)
                                          {
                                            return TypeValueKnownValues.Value_NFLInterceptions;
                                          }
                                        switch (chars[16])
                                          {
                                            case 'L':
                                                if ((String.Compare(chars, 17, "ongestInterception", 0, 18, false) == 0) && (chars.Length == 35))
                                                    return TypeValueKnownValues.Value_NFLInterceptionsLongestInterception;
                                                break;
                                            case 'T':
                                                if ((String.Compare(chars, 17, "ouchdowns", 0, 9, false) == 0) && (chars.Length == 26))
                                                    return TypeValueKnownValues.Value_NFLInterceptionsTouchdowns;
                                                break;
                                            case 'Y':
                                                if ((String.Compare(chars, 17, "ards", 0, 4, false) == 0) && (chars.Length == 21))
                                                    return TypeValueKnownValues.Value_NFLInterceptionsYards;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'K':
                                    if (String.Compare(chars, 4, "ickoff", 0, 6, false) == 0)
                                      {
                                        switch (chars[10])
                                          {
                                            case 'R':
                                                if (String.Compare(chars, 11, "eturns", 0, 6, false) == 0)
                                                  {
                                                    switch (chars[17])
                                                      {
                                                        case '1':
                                                            if ((String.Compare(chars, 18, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 28))
                                                                return TypeValueKnownValues.Value_NFLKickoffReturns10PlusYards;
                                                            break;
                                                        case '2':
                                                            if ((String.Compare(chars, 18, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 28))
                                                                return TypeValueKnownValues.Value_NFLKickoffReturns20PlusYards;
                                                            break;
                                                        case '3':
                                                            if ((String.Compare(chars, 18, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 28))
                                                                return TypeValueKnownValues.Value_NFLKickoffReturns30PlusYards;
                                                            break;
                                                        case '4':
                                                            if ((String.Compare(chars, 18, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 28))
                                                                return TypeValueKnownValues.Value_NFLKickoffReturns40PlusYards;
                                                            break;
                                                        case '5':
                                                            if ((String.Compare(chars, 18, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 28))
                                                                return TypeValueKnownValues.Value_NFLKickoffReturns50PlusYards;
                                                            break;
                                                        case 'A':
                                                            if ((String.Compare(chars, 18, "verageRun", 0, 9, false) == 0) && (chars.Length == 27))
                                                                return TypeValueKnownValues.Value_NFLKickoffReturnsAverageRun;
                                                            break;
                                                        case 'F':
                                                            if ((String.Compare(chars, 18, "airCatches", 0, 10, false) == 0) && (chars.Length == 28))
                                                                return TypeValueKnownValues.Value_NFLKickoffReturnsFairCatches;
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(chars, 18, "ongestKickReturn", 0, 16, false) == 0) && (chars.Length == 34))
                                                                return TypeValueKnownValues.Value_NFLKickoffReturnsLongestKickReturn;
                                                            break;
                                                        case 'R':
                                                            if ((String.Compare(chars, 18, "eturns", 0, 6, false) == 0) && (chars.Length == 24))
                                                                return TypeValueKnownValues.Value_NFLKickoffReturnsReturns;
                                                            break;
                                                        case 'T':
                                                            if ((String.Compare(chars, 18, "ouchdowns", 0, 9, false) == 0) && (chars.Length == 27))
                                                                return TypeValueKnownValues.Value_NFLKickoffReturnsTouchdowns;
                                                            break;
                                                        case 'Y':
                                                            if ((String.Compare(chars, 18, "ards", 0, 4, false) == 0) && (chars.Length == 22))
                                                                return TypeValueKnownValues.Value_NFLKickoffReturnsYards;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 's':
                                                switch (chars[11])
                                                  {
                                                    case 'A':
                                                        if (String.Compare(chars, 12, "verage", 0, 6, false) == 0)
                                                          {
                                                            switch (chars[18])
                                                              {
                                                                case 'G':
                                                                    if ((String.Compare(chars, 19, "rossYards", 0, 9, false) == 0) && (chars.Length == 28))
                                                                        return TypeValueKnownValues.Value_NFLKickoffsAverageGrossYards;
                                                                    break;
                                                                case 'N':
                                                                    if ((String.Compare(chars, 19, "etYards", 0, 7, false) == 0) && (chars.Length == 26))
                                                                        return TypeValueKnownValues.Value_NFLKickoffsAverageNetYards;
                                                                    break;
                                                                case 'R':
                                                                    if ((String.Compare(chars, 19, "eturnYards", 0, 10, false) == 0) && (chars.Length == 29))
                                                                        return TypeValueKnownValues.Value_NFLKickoffsAverageReturnYards;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'E':
                                                        if ((String.Compare(chars, 12, "ndZoneKicks", 0, 11, false) == 0) && (chars.Length == 23))
                                                            return TypeValueKnownValues.Value_NFLKickoffsEndZoneKicks;
                                                        break;
                                                    case 'G':
                                                        if ((String.Compare(chars, 12, "rossYards", 0, 9, false) == 0) && (chars.Length == 21))
                                                            return TypeValueKnownValues.Value_NFLKickoffsGrossYards;
                                                        break;
                                                    case 'I':
                                                        if (String.Compare(chars, 12, "nsideOpponents20YardLine", 0, 24, false) == 0)
                                                          {
                                                            if (chars.Length == 36)
                                                              {
                                                                return TypeValueKnownValues.Value_NFLKickoffsInsideOpponents20YardLine;
                                                              }
                                                            switch (chars[36])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 37, "erc", 0, 3, false) == 0) && (chars.Length == 40))
                                                                        return TypeValueKnownValues.Value_NFLKickoffsInsideOpponents20YardLinePerc;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'K':
                                                        if ((String.Compare(chars, 12, "icks", 0, 4, false) == 0) && (chars.Length == 16))
                                                            return TypeValueKnownValues.Value_NFLKickoffsKicks;
                                                        break;
                                                    case 'L':
                                                        if ((String.Compare(chars, 12, "ongestKick", 0, 10, false) == 0) && (chars.Length == 22))
                                                            return TypeValueKnownValues.Value_NFLKickoffsLongestKick;
                                                        break;
                                                    case 'N':
                                                        if ((String.Compare(chars, 12, "etYards", 0, 7, false) == 0) && (chars.Length == 19))
                                                            return TypeValueKnownValues.Value_NFLKickoffsNetYards;
                                                        break;
                                                    case 'R':
                                                        if ((String.Compare(chars, 12, "eturned", 0, 7, false) == 0) && (chars.Length == 19))
                                                            return TypeValueKnownValues.Value_NFLKickoffsReturned;
                                                        break;
                                                    case 'T':
                                                        if (String.Compare(chars, 12, "o", 0, 1, false) == 0)
                                                          {
                                                            switch (chars[13])
                                                              {
                                                                case 't':
                                                                    if ((String.Compare(chars, 14, "alReturnYards", 0, 13, false) == 0) && (chars.Length == 27))
                                                                        return TypeValueKnownValues.Value_NFLKickoffsTotalReturnYards;
                                                                    break;
                                                                case 'u':
                                                                    if (String.Compare(chars, 14, "chbacks", 0, 7, false) == 0)
                                                                      {
                                                                        if (chars.Length == 21)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NFLKickoffsTouchbacks;
                                                                          }
                                                                        switch (chars[21])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 22, "erc", 0, 3, false) == 0) && (chars.Length == 25))
                                                                                    return TypeValueKnownValues.Value_NFLKickoffsTouchbacksPerc;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'M':
                                    if (String.Compare(chars, 4, "isc", 0, 3, false) == 0)
                                      {
                                        switch (chars[7])
                                          {
                                            case 'A':
                                                if ((String.Compare(chars, 8, "ssistedTackles", 0, 14, false) == 0) && (chars.Length == 22))
                                                    return TypeValueKnownValues.Value_NFLMiscAssistedTackles;
                                                break;
                                            case 'C':
                                                if ((String.Compare(chars, 8, "ombinedTackles", 0, 14, false) == 0) && (chars.Length == 22))
                                                    return TypeValueKnownValues.Value_NFLMiscCombinedTackles;
                                                break;
                                            case 'F':
                                                switch (chars[8])
                                                  {
                                                    case 'o':
                                                        if ((String.Compare(chars, 9, "rcedFumbles", 0, 11, false) == 0) && (chars.Length == 20))
                                                            return TypeValueKnownValues.Value_NFLMiscForcedFumbles;
                                                        break;
                                                    case 'u':
                                                        if ((String.Compare(chars, 9, "mblesRecovered", 0, 14, false) == 0) && (chars.Length == 23))
                                                            return TypeValueKnownValues.Value_NFLMiscFumblesRecovered;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'T':
                                                if ((String.Compare(chars, 8, "ackles", 0, 6, false) == 0) && (chars.Length == 14))
                                                    return TypeValueKnownValues.Value_NFLMiscTackles;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'P':
                                    switch (chars[4])
                                      {
                                        case 'a':
                                            if (String.Compare(chars, 5, "ss", 0, 2, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(chars, 8, "sDefended", 0, 9, false) == 0) && (chars.Length == 17))
                                                            return TypeValueKnownValues.Value_NFLPassesDefended;
                                                        break;
                                                    case 'i':
                                                        if (String.Compare(chars, 8, "ng", 0, 2, false) == 0)
                                                          {
                                                            switch (chars[10])
                                                              {
                                                                case '1':
                                                                    switch (chars[11])
                                                                      {
                                                                        case '0':
                                                                            if ((String.Compare(chars, 12, "PlusYards", 0, 9, false) == 0) && (chars.Length == 21))
                                                                                return TypeValueKnownValues.Value_NFLPassing10PlusYards;
                                                                            break;
                                                                        case 's':
                                                                            if ((String.Compare(chars, 12, "tDowns", 0, 6, false) == 0) && (chars.Length == 18))
                                                                                return TypeValueKnownValues.Value_NFLPassing1stDowns;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case '2':
                                                                    if ((String.Compare(chars, 11, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 21))
                                                                        return TypeValueKnownValues.Value_NFLPassing20PlusYards;
                                                                    break;
                                                                case '3':
                                                                    if ((String.Compare(chars, 11, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 21))
                                                                        return TypeValueKnownValues.Value_NFLPassing30PlusYards;
                                                                    break;
                                                                case '4':
                                                                    if ((String.Compare(chars, 11, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 21))
                                                                        return TypeValueKnownValues.Value_NFLPassing40PlusYards;
                                                                    break;
                                                                case '5':
                                                                    if ((String.Compare(chars, 11, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 21))
                                                                        return TypeValueKnownValues.Value_NFLPassing50PlusYards;
                                                                    break;
                                                                case 'A':
                                                                    switch (chars[11])
                                                                      {
                                                                        case 't':
                                                                            if ((String.Compare(chars, 12, "tempts", 0, 6, false) == 0) && (chars.Length == 18))
                                                                                return TypeValueKnownValues.Value_NFLPassingAttempts;
                                                                            break;
                                                                        case 'v':
                                                                            if (String.Compare(chars, 12, "erageYardsPer", 0, 13, false) == 0)
                                                                              {
                                                                                switch (chars[25])
                                                                                  {
                                                                                    case 'A':
                                                                                        if ((String.Compare(chars, 26, "ttempt", 0, 6, false) == 0) && (chars.Length == 32))
                                                                                            return TypeValueKnownValues.Value_NFLPassingAverageYardsPerAttempt;
                                                                                        break;
                                                                                    case 'C':
                                                                                        if ((String.Compare(chars, 26, "ompletion", 0, 9, false) == 0) && (chars.Length == 35))
                                                                                            return TypeValueKnownValues.Value_NFLPassingAverageYardsPerCompletion;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'C':
                                                                    if (String.Compare(chars, 11, "ompletion", 0, 9, false) == 0)
                                                                      {
                                                                        switch (chars[20])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 21, "erc", 0, 3, false) == 0) && (chars.Length == 24))
                                                                                    return TypeValueKnownValues.Value_NFLPassingCompletionPerc;
                                                                                break;
                                                                            case 's':
                                                                                if (chars.Length == 21)
                                                                                    return TypeValueKnownValues.Value_NFLPassingCompletions;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'G':
                                                                    if ((String.Compare(chars, 11, "rossYards", 0, 9, false) == 0) && (chars.Length == 20))
                                                                        return TypeValueKnownValues.Value_NFLPassingGrossYards;
                                                                    break;
                                                                case 'I':
                                                                    if (String.Compare(chars, 11, "nterception", 0, 11, false) == 0)
                                                                      {
                                                                        switch (chars[22])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 23, "erc", 0, 3, false) == 0) && (chars.Length == 26))
                                                                                    return TypeValueKnownValues.Value_NFLPassingInterceptionPerc;
                                                                                break;
                                                                            case 's':
                                                                                if (chars.Length == 23)
                                                                                  {
                                                                                    return TypeValueKnownValues.Value_NFLPassingInterceptions;
                                                                                  }
                                                                                switch (chars[23])
                                                                                  {
                                                                                    case 'R':
                                                                                        if ((String.Compare(chars, 24, "eturnedForTouchdown", 0, 19, false) == 0) && (chars.Length == 43))
                                                                                            return TypeValueKnownValues.Value_NFLPassingInterceptionsReturnedForTouchdown;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(chars, 11, "ongestPass", 0, 10, false) == 0) && (chars.Length == 21))
                                                                        return TypeValueKnownValues.Value_NFLPassingLongestPass;
                                                                    break;
                                                                case 'N':
                                                                    if ((String.Compare(chars, 11, "etYards", 0, 7, false) == 0) && (chars.Length == 18))
                                                                        return TypeValueKnownValues.Value_NFLPassingNetYards;
                                                                    break;
                                                                case 'R':
                                                                    switch (chars[11])
                                                                      {
                                                                        case 'a':
                                                                            if ((String.Compare(chars, 12, "ting", 0, 4, false) == 0) && (chars.Length == 16))
                                                                                return TypeValueKnownValues.Value_NFLPassingRating;
                                                                            break;
                                                                        case 'e':
                                                                            if ((String.Compare(chars, 12, "dZoneAttempts", 0, 13, false) == 0) && (chars.Length == 25))
                                                                                return TypeValueKnownValues.Value_NFLPassingRedZoneAttempts;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'S':
                                                                    if (String.Compare(chars, 11, "acked", 0, 5, false) == 0)
                                                                      {
                                                                        if (chars.Length == 16)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NFLPassingSacked;
                                                                          }
                                                                        switch (chars[16])
                                                                          {
                                                                            case 'Y':
                                                                                if ((String.Compare(chars, 17, "ardsLost", 0, 8, false) == 0) && (chars.Length == 25))
                                                                                    return TypeValueKnownValues.Value_NFLPassingSackedYardsLost;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'T':
                                                                    switch (chars[11])
                                                                      {
                                                                        case 'a':
                                                                            if ((String.Compare(chars, 12, "ckledForSafety", 0, 14, false) == 0) && (chars.Length == 26))
                                                                                return TypeValueKnownValues.Value_NFLPassingTackledForSafety;
                                                                            break;
                                                                        case 'o':
                                                                            switch (chars[12])
                                                                              {
                                                                                case 't':
                                                                                    if ((String.Compare(chars, 13, "alYards", 0, 7, false) == 0) && (chars.Length == 20))
                                                                                        return TypeValueKnownValues.Value_NFLPassingTotalYards;
                                                                                    break;
                                                                                case 'u':
                                                                                    if (String.Compare(chars, 13, "chdown", 0, 6, false) == 0)
                                                                                      {
                                                                                        switch (chars[19])
                                                                                          {
                                                                                            case 'P':
                                                                                                if ((String.Compare(chars, 20, "erc", 0, 3, false) == 0) && (chars.Length == 23))
                                                                                                    return TypeValueKnownValues.Value_NFLPassingTouchdownPerc;
                                                                                                break;
                                                                                            case 's':
                                                                                                if (chars.Length == 20)
                                                                                                    return TypeValueKnownValues.Value_NFLPassingTouchdowns;
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                      }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'e':
                                            if (String.Compare(chars, 5, "nalties", 0, 7, false) == 0)
                                              {
                                                if (chars.Length == 12)
                                                  {
                                                    return TypeValueKnownValues.Value_NFLPenalties;
                                                  }
                                                switch (chars[12])
                                                  {
                                                    case '1':
                                                        if ((String.Compare(chars, 13, "stDowns", 0, 7, false) == 0) && (chars.Length == 20))
                                                            return TypeValueKnownValues.Value_NFLPenalties1stDowns;
                                                        break;
                                                    case 'Y':
                                                        if ((String.Compare(chars, 13, "ards", 0, 4, false) == 0) && (chars.Length == 17))
                                                            return TypeValueKnownValues.Value_NFLPenaltiesYards;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'u':
                                            if (String.Compare(chars, 5, "nt", 0, 2, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 'R':
                                                        if (String.Compare(chars, 8, "eturns", 0, 6, false) == 0)
                                                          {
                                                            if (chars.Length == 14)
                                                              {
                                                                return TypeValueKnownValues.Value_NFLPuntReturns;
                                                              }
                                                            switch (chars[14])
                                                              {
                                                                case '1':
                                                                    if ((String.Compare(chars, 15, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 25))
                                                                        return TypeValueKnownValues.Value_NFLPuntReturns10PlusYards;
                                                                    break;
                                                                case '2':
                                                                    if ((String.Compare(chars, 15, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 25))
                                                                        return TypeValueKnownValues.Value_NFLPuntReturns20PlusYards;
                                                                    break;
                                                                case '3':
                                                                    if ((String.Compare(chars, 15, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 25))
                                                                        return TypeValueKnownValues.Value_NFLPuntReturns30PlusYards;
                                                                    break;
                                                                case '4':
                                                                    if ((String.Compare(chars, 15, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 25))
                                                                        return TypeValueKnownValues.Value_NFLPuntReturns40PlusYards;
                                                                    break;
                                                                case '5':
                                                                    if ((String.Compare(chars, 15, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 25))
                                                                        return TypeValueKnownValues.Value_NFLPuntReturns50PlusYards;
                                                                    break;
                                                                case 'A':
                                                                    if ((String.Compare(chars, 15, "verageRun", 0, 9, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_NFLPuntReturnsAverageRun;
                                                                    break;
                                                                case 'F':
                                                                    if ((String.Compare(chars, 15, "airCatches", 0, 10, false) == 0) && (chars.Length == 25))
                                                                        return TypeValueKnownValues.Value_NFLPuntReturnsFairCatches;
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(chars, 15, "ongestKickReturn", 0, 16, false) == 0) && (chars.Length == 31))
                                                                        return TypeValueKnownValues.Value_NFLPuntReturnsLongestKickReturn;
                                                                    break;
                                                                case 'T':
                                                                    if ((String.Compare(chars, 15, "ouchdowns", 0, 9, false) == 0) && (chars.Length == 24))
                                                                        return TypeValueKnownValues.Value_NFLPuntReturnsTouchdowns;
                                                                    break;
                                                                case 'Y':
                                                                    if ((String.Compare(chars, 15, "ards", 0, 4, false) == 0) && (chars.Length == 19))
                                                                        return TypeValueKnownValues.Value_NFLPuntReturnsYards;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'i':
                                                        if (String.Compare(chars, 8, "ng", 0, 2, false) == 0)
                                                          {
                                                            switch (chars[10])
                                                              {
                                                                case 'A':
                                                                    if (String.Compare(chars, 11, "verage", 0, 6, false) == 0)
                                                                      {
                                                                        switch (chars[17])
                                                                          {
                                                                            case 'G':
                                                                                if ((String.Compare(chars, 18, "rossYards", 0, 9, false) == 0) && (chars.Length == 27))
                                                                                    return TypeValueKnownValues.Value_NFLPuntingAverageGrossYards;
                                                                                break;
                                                                            case 'N':
                                                                                if ((String.Compare(chars, 18, "etYards", 0, 7, false) == 0) && (chars.Length == 25))
                                                                                    return TypeValueKnownValues.Value_NFLPuntingAverageNetYards;
                                                                                break;
                                                                            case 'R':
                                                                                if ((String.Compare(chars, 18, "eturnYards", 0, 10, false) == 0) && (chars.Length == 28))
                                                                                    return TypeValueKnownValues.Value_NFLPuntingAverageReturnYards;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'B':
                                                                    if ((String.Compare(chars, 11, "locked", 0, 6, false) == 0) && (chars.Length == 17))
                                                                        return TypeValueKnownValues.Value_NFLPuntingBlocked;
                                                                    break;
                                                                case 'G':
                                                                    if ((String.Compare(chars, 11, "rossYards", 0, 9, false) == 0) && (chars.Length == 20))
                                                                        return TypeValueKnownValues.Value_NFLPuntingGrossYards;
                                                                    break;
                                                                case 'I':
                                                                    if (String.Compare(chars, 11, "nsideOpponents20YardLine", 0, 24, false) == 0)
                                                                      {
                                                                        if (chars.Length == 35)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NFLPuntingInsideOpponents20YardLine;
                                                                          }
                                                                        switch (chars[35])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 36, "erc", 0, 3, false) == 0) && (chars.Length == 39))
                                                                                    return TypeValueKnownValues.Value_NFLPuntingInsideOpponents20YardLinePerc;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(chars, 11, "ongestPunt", 0, 10, false) == 0) && (chars.Length == 21))
                                                                        return TypeValueKnownValues.Value_NFLPuntingLongestPunt;
                                                                    break;
                                                                case 'N':
                                                                    if ((String.Compare(chars, 11, "etYards", 0, 7, false) == 0) && (chars.Length == 18))
                                                                        return TypeValueKnownValues.Value_NFLPuntingNetYards;
                                                                    break;
                                                                case 'P':
                                                                    if ((String.Compare(chars, 11, "unts", 0, 4, false) == 0) && (chars.Length == 15))
                                                                        return TypeValueKnownValues.Value_NFLPuntingPunts;
                                                                    break;
                                                                case 'R':
                                                                    if (String.Compare(chars, 11, "eturn", 0, 5, false) == 0)
                                                                      {
                                                                        switch (chars[16])
                                                                          {
                                                                            case 'Y':
                                                                                if ((String.Compare(chars, 17, "ards", 0, 4, false) == 0) && (chars.Length == 21))
                                                                                    return TypeValueKnownValues.Value_NFLPuntingReturnYards;
                                                                                break;
                                                                            case 'e':
                                                                                if ((String.Compare(chars, 17, "d", 0, 1, false) == 0) && (chars.Length == 18))
                                                                                    return TypeValueKnownValues.Value_NFLPuntingReturned;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'T':
                                                                    if (String.Compare(chars, 11, "ouchbacks", 0, 9, false) == 0)
                                                                      {
                                                                        if (chars.Length == 20)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NFLPuntingTouchbacks;
                                                                          }
                                                                        switch (chars[20])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 21, "erc", 0, 3, false) == 0) && (chars.Length == 24))
                                                                                    return TypeValueKnownValues.Value_NFLPuntingTouchbacksPerc;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'Q':
                                    if ((String.Compare(chars, 4, "uarterbackHits", 0, 14, false) == 0) && (chars.Length == 18))
                                        return TypeValueKnownValues.Value_NFLQuarterbackHits;
                                    break;
                                case 'R':
                                    switch (chars[4])
                                      {
                                        case 'e':
                                            switch (chars[5])
                                              {
                                                case 'c':
                                                    if (String.Compare(chars, 6, "eiving", 0, 6, false) == 0)
                                                      {
                                                        switch (chars[12])
                                                          {
                                                            case '1':
                                                                switch (chars[13])
                                                                  {
                                                                    case '0':
                                                                        if ((String.Compare(chars, 14, "PlusYards", 0, 9, false) == 0) && (chars.Length == 23))
                                                                            return TypeValueKnownValues.Value_NFLReceiving10PlusYards;
                                                                        break;
                                                                    case 's':
                                                                        if ((String.Compare(chars, 14, "tDowns", 0, 6, false) == 0) && (chars.Length == 20))
                                                                            return TypeValueKnownValues.Value_NFLReceiving1stDowns;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                                break;
                                                            case '2':
                                                                if ((String.Compare(chars, 13, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 23))
                                                                    return TypeValueKnownValues.Value_NFLReceiving20PlusYards;
                                                                break;
                                                            case '3':
                                                                if ((String.Compare(chars, 13, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 23))
                                                                    return TypeValueKnownValues.Value_NFLReceiving30PlusYards;
                                                                break;
                                                            case '4':
                                                                if ((String.Compare(chars, 13, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 23))
                                                                    return TypeValueKnownValues.Value_NFLReceiving40PlusYards;
                                                                break;
                                                            case '5':
                                                                if ((String.Compare(chars, 13, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 23))
                                                                    return TypeValueKnownValues.Value_NFLReceiving50PlusYards;
                                                                break;
                                                            case 'A':
                                                                if ((String.Compare(chars, 13, "verageReception", 0, 15, false) == 0) && (chars.Length == 28))
                                                                    return TypeValueKnownValues.Value_NFLReceivingAverageReception;
                                                                break;
                                                            case 'F':
                                                                if ((String.Compare(chars, 13, "umbledOnReception", 0, 17, false) == 0) && (chars.Length == 30))
                                                                    return TypeValueKnownValues.Value_NFLReceivingFumbledOnReception;
                                                                break;
                                                            case 'L':
                                                                if ((String.Compare(chars, 13, "ongestReception", 0, 15, false) == 0) && (chars.Length == 28))
                                                                    return TypeValueKnownValues.Value_NFLReceivingLongestReception;
                                                                break;
                                                            case 'R':
                                                                if (String.Compare(chars, 13, "e", 0, 1, false) == 0)
                                                                  {
                                                                    switch (chars[14])
                                                                      {
                                                                        case 'c':
                                                                            if ((String.Compare(chars, 15, "eptions", 0, 7, false) == 0) && (chars.Length == 22))
                                                                                return TypeValueKnownValues.Value_NFLReceivingReceptions;
                                                                            break;
                                                                        case 'd':
                                                                            if ((String.Compare(chars, 15, "ZoneTargets", 0, 11, false) == 0) && (chars.Length == 26))
                                                                                return TypeValueKnownValues.Value_NFLReceivingRedZoneTargets;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'T':
                                                                switch (chars[13])
                                                                  {
                                                                    case 'a':
                                                                        if ((String.Compare(chars, 14, "rgets", 0, 5, false) == 0) && (chars.Length == 19))
                                                                            return TypeValueKnownValues.Value_NFLReceivingTargets;
                                                                        break;
                                                                    case 'o':
                                                                        switch (chars[14])
                                                                          {
                                                                            case 't':
                                                                                if ((String.Compare(chars, 15, "alYards", 0, 7, false) == 0) && (chars.Length == 22))
                                                                                    return TypeValueKnownValues.Value_NFLReceivingTotalYards;
                                                                                break;
                                                                            case 'u':
                                                                                if ((String.Compare(chars, 15, "chdowns", 0, 7, false) == 0) && (chars.Length == 22))
                                                                                    return TypeValueKnownValues.Value_NFLReceivingTouchdowns;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                                break;
                                                            case 'Y':
                                                                if ((String.Compare(chars, 13, "ardsAfterCompletion", 0, 19, false) == 0) && (chars.Length == 32))
                                                                    return TypeValueKnownValues.Value_NFLReceivingYardsAfterCompletion;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'd':
                                                    if (String.Compare(chars, 6, "ZoneEfficiency", 0, 14, false) == 0)
                                                      {
                                                        switch (chars[20])
                                                          {
                                                            case 'A':
                                                                if ((String.Compare(chars, 21, "ttempts", 0, 7, false) == 0) && (chars.Length == 28))
                                                                    return TypeValueKnownValues.Value_NFLRedZoneEfficiencyAttempts;
                                                                break;
                                                            case 'C':
                                                                if ((String.Compare(chars, 21, "onversions", 0, 10, false) == 0) && (chars.Length == 31))
                                                                    return TypeValueKnownValues.Value_NFLRedZoneEfficiencyConversions;
                                                                break;
                                                            case 'P':
                                                                if ((String.Compare(chars, 21, "erc", 0, 3, false) == 0) && (chars.Length == 24))
                                                                    return TypeValueKnownValues.Value_NFLRedZoneEfficiencyPerc;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'u':
                                            if (String.Compare(chars, 5, "shing", 0, 5, false) == 0)
                                              {
                                                switch (chars[10])
                                                  {
                                                    case '1':
                                                        switch (chars[11])
                                                          {
                                                            case '0':
                                                                if ((String.Compare(chars, 12, "PlusYards", 0, 9, false) == 0) && (chars.Length == 21))
                                                                    return TypeValueKnownValues.Value_NFLRushing10PlusYards;
                                                                break;
                                                            case 's':
                                                                if (String.Compare(chars, 12, "tDown", 0, 5, false) == 0)
                                                                  {
                                                                    switch (chars[17])
                                                                      {
                                                                        case 'P':
                                                                            if ((String.Compare(chars, 18, "erc", 0, 3, false) == 0) && (chars.Length == 21))
                                                                                return TypeValueKnownValues.Value_NFLRushing1stDownPerc;
                                                                            break;
                                                                        case 's':
                                                                            if (chars.Length == 18)
                                                                                return TypeValueKnownValues.Value_NFLRushing1stDowns;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case '2':
                                                        if ((String.Compare(chars, 11, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 21))
                                                            return TypeValueKnownValues.Value_NFLRushing20PlusYards;
                                                        break;
                                                    case '3':
                                                        if ((String.Compare(chars, 11, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 21))
                                                            return TypeValueKnownValues.Value_NFLRushing30PlusYards;
                                                        break;
                                                    case '4':
                                                        if ((String.Compare(chars, 11, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 21))
                                                            return TypeValueKnownValues.Value_NFLRushing40PlusYards;
                                                        break;
                                                    case '5':
                                                        if ((String.Compare(chars, 11, "0PlusYards", 0, 10, false) == 0) && (chars.Length == 21))
                                                            return TypeValueKnownValues.Value_NFLRushing50PlusYards;
                                                        break;
                                                    case 'A':
                                                        switch (chars[11])
                                                          {
                                                            case 't':
                                                                if ((String.Compare(chars, 12, "tempts", 0, 6, false) == 0) && (chars.Length == 18))
                                                                    return TypeValueKnownValues.Value_NFLRushingAttempts;
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(chars, 12, "erageRush", 0, 9, false) == 0) && (chars.Length == 21))
                                                                    return TypeValueKnownValues.Value_NFLRushingAverageRush;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'F':
                                                        if ((String.Compare(chars, 11, "umbledOnRush", 0, 12, false) == 0) && (chars.Length == 23))
                                                            return TypeValueKnownValues.Value_NFLRushingFumbledOnRush;
                                                        break;
                                                    case 'L':
                                                        if ((String.Compare(chars, 11, "ongestRush", 0, 10, false) == 0) && (chars.Length == 21))
                                                            return TypeValueKnownValues.Value_NFLRushingLongestRush;
                                                        break;
                                                    case 'R':
                                                        if ((String.Compare(chars, 11, "edZoneAttempts", 0, 14, false) == 0) && (chars.Length == 25))
                                                            return TypeValueKnownValues.Value_NFLRushingRedZoneAttempts;
                                                        break;
                                                    case 'T':
                                                        switch (chars[11])
                                                          {
                                                            case 'a':
                                                                if ((String.Compare(chars, 12, "ckledForSafety", 0, 14, false) == 0) && (chars.Length == 26))
                                                                    return TypeValueKnownValues.Value_NFLRushingTackledForSafety;
                                                                break;
                                                            case 'o':
                                                                switch (chars[12])
                                                                  {
                                                                    case 't':
                                                                        if ((String.Compare(chars, 13, "alYards", 0, 7, false) == 0) && (chars.Length == 20))
                                                                            return TypeValueKnownValues.Value_NFLRushingTotalYards;
                                                                        break;
                                                                    case 'u':
                                                                        if ((String.Compare(chars, 13, "chdowns", 0, 7, false) == 0) && (chars.Length == 20))
                                                                            return TypeValueKnownValues.Value_NFLRushingTouchdowns;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'S':
                                    switch (chars[4])
                                      {
                                        case 'a':
                                            switch (chars[5])
                                              {
                                                case 'c':
                                                    if (String.Compare(chars, 6, "k", 0, 1, false) == 0)
                                                      {
                                                        switch (chars[7])
                                                          {
                                                            case 'Y':
                                                                if ((String.Compare(chars, 8, "ards", 0, 4, false) == 0) && (chars.Length == 12))
                                                                    return TypeValueKnownValues.Value_NFLSackYards;
                                                                break;
                                                            case 's':
                                                                if (chars.Length == 8)
                                                                    return TypeValueKnownValues.Value_NFLSacks;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'f':
                                                    if ((String.Compare(chars, 6, "eties", 0, 5, false) == 0) && (chars.Length == 11))
                                                        return TypeValueKnownValues.Value_NFLSafeties;
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'p':
                                            if (String.Compare(chars, 5, "ecialTeams", 0, 10, false) == 0)
                                              {
                                                switch (chars[15])
                                                  {
                                                    case 'A':
                                                        if ((String.Compare(chars, 16, "ssistedTackles", 0, 14, false) == 0) && (chars.Length == 30))
                                                            return TypeValueKnownValues.Value_NFLSpecialTeamsAssistedTackles;
                                                        break;
                                                    case 'C':
                                                        if ((String.Compare(chars, 16, "ombinedTackles", 0, 14, false) == 0) && (chars.Length == 30))
                                                            return TypeValueKnownValues.Value_NFLSpecialTeamsCombinedTackles;
                                                        break;
                                                    case 'F':
                                                        switch (chars[16])
                                                          {
                                                            case 'o':
                                                                if ((String.Compare(chars, 17, "rcedFumbles", 0, 11, false) == 0) && (chars.Length == 28))
                                                                    return TypeValueKnownValues.Value_NFLSpecialTeamsForcedFumbles;
                                                                break;
                                                            case 'u':
                                                                if ((String.Compare(chars, 17, "mblesRecovered", 0, 14, false) == 0) && (chars.Length == 31))
                                                                    return TypeValueKnownValues.Value_NFLSpecialTeamsFumblesRecovered;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'T':
                                                        if ((String.Compare(chars, 16, "otalTackles", 0, 11, false) == 0) && (chars.Length == 27))
                                                            return TypeValueKnownValues.Value_NFLSpecialTeamsTotalTackles;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'T':
                                    if (String.Compare(chars, 4, "ackles", 0, 6, false) == 0)
                                      {
                                        if (chars.Length == 10)
                                          {
                                            return TypeValueKnownValues.Value_NFLTackles;
                                          }
                                        switch (chars[10])
                                          {
                                            case 'A':
                                                if ((String.Compare(chars, 11, "ssisted", 0, 7, false) == 0) && (chars.Length == 18))
                                                    return TypeValueKnownValues.Value_NFLTacklesAssisted;
                                                break;
                                            case 'C':
                                                if ((String.Compare(chars, 11, "ombined", 0, 7, false) == 0) && (chars.Length == 18))
                                                    return TypeValueKnownValues.Value_NFLTacklesCombined;
                                                break;
                                            case 'F':
                                                if ((String.Compare(chars, 11, "orLoss", 0, 6, false) == 0) && (chars.Length == 17))
                                                    return TypeValueKnownValues.Value_NFLTacklesForLoss;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'H':
                        if (String.Compare(chars, 2, "L", 0, 1, false) == 0)
                          {
                            switch (chars[3])
                              {
                                case 'A':
                                    switch (chars[4])
                                      {
                                        case 's':
                                            if (String.Compare(chars, 5, "sists", 0, 5, false) == 0)
                                              {
                                                if (chars.Length == 10)
                                                  {
                                                    return TypeValueKnownValues.Value_NHLAssists;
                                                  }
                                                switch (chars[10])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(chars, 11, "erGame", 0, 6, false) == 0) && (chars.Length == 17))
                                                            return TypeValueKnownValues.Value_NHLAssistsPerGame;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(chars, 5, "erageTimeOnIce", 0, 14, false) == 0) && (chars.Length == 19))
                                                return TypeValueKnownValues.Value_NHLAverageTimeOnIce;
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'B':
                                    if (String.Compare(chars, 4, "locked", 0, 6, false) == 0)
                                      {
                                        switch (chars[10])
                                          {
                                            case 'A':
                                                if (String.Compare(chars, 11, "ttempts", 0, 7, false) == 0)
                                                  {
                                                    if (chars.Length == 18)
                                                      {
                                                        return TypeValueKnownValues.Value_NHLBlockedAttempts;
                                                      }
                                                    switch (chars[18])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 19, "erGame", 0, 6, false) == 0) && (chars.Length == 25))
                                                                return TypeValueKnownValues.Value_NHLBlockedAttemptsPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'S':
                                                if (String.Compare(chars, 11, "hots", 0, 4, false) == 0)
                                                  {
                                                    if (chars.Length == 15)
                                                      {
                                                        return TypeValueKnownValues.Value_NHLBlockedShots;
                                                      }
                                                    switch (chars[15])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(chars, 16, "erGame", 0, 6, false) == 0) && (chars.Length == 22))
                                                                return TypeValueKnownValues.Value_NHLBlockedShotsPerGame;
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'E':
                                    if (String.Compare(chars, 4, "venStrength", 0, 11, false) == 0)
                                      {
                                        switch (chars[15])
                                          {
                                            case 'A':
                                                if ((String.Compare(chars, 16, "ssists", 0, 6, false) == 0) && (chars.Length == 22))
                                                    return TypeValueKnownValues.Value_NHLEvenStrengthAssists;
                                                break;
                                            case 'F':
                                                if (String.Compare(chars, 16, "aceoff", 0, 6, false) == 0)
                                                  {
                                                    switch (chars[22])
                                                      {
                                                        case 'W':
                                                            if ((String.Compare(chars, 23, "inPerc", 0, 6, false) == 0) && (chars.Length == 29))
                                                                return TypeValueKnownValues.Value_NHLEvenStrengthFaceoffWinPerc;
                                                            break;
                                                        case 's':
                                                            if (chars.Length == 23)
                                                              {
                                                                return TypeValueKnownValues.Value_NHLEvenStrengthFaceoffs;
                                                              }
                                                            switch (chars[23])
                                                              {
                                                                case 'L':
                                                                    if ((String.Compare(chars, 24, "ost", 0, 3, false) == 0) && (chars.Length == 27))
                                                                        return TypeValueKnownValues.Value_NHLEvenStrengthFaceoffsLost;
                                                                    break;
                                                                case 'W':
                                                                    if ((String.Compare(chars, 24, "on", 0, 2, false) == 0) && (chars.Length == 26))
                                                                        return TypeValueKnownValues.Value_NHLEvenStrengthFaceoffsWon;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'G':
                                                if ((String.Compare(chars, 16, "oals", 0, 4, false) == 0) && (chars.Length == 20))
                                                    return TypeValueKnownValues.Value_NHLEvenStrengthGoals;
                                                break;
                                            case 'M':
                                                if ((String.Compare(chars, 16, "issedShots", 0, 10, false) == 0) && (chars.Length == 26))
                                                    return TypeValueKnownValues.Value_NHLEvenStrengthMissedShots;
                                                break;
                                            case 'S':
                                                if ((String.Compare(chars, 16, "hotsOnGoal", 0, 10, false) == 0) && (chars.Length == 26))
                                                    return TypeValueKnownValues.Value_NHLEvenStrengthShotsOnGoal;
                                                break;
                                            case 'T':
                                                if ((String.Compare(chars, 16, "imeOnIce", 0, 8, false) == 0) && (chars.Length == 24))
                                                    return TypeValueKnownValues.Value_NHLEvenStrengthTimeOnIce;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'F':
                                    if (String.Compare(chars, 4, "aceoff", 0, 6, false) == 0)
                                      {
                                        switch (chars[10])
                                          {
                                            case 'W':
                                                if ((String.Compare(chars, 11, "inPerc", 0, 6, false) == 0) && (chars.Length == 17))
                                                    return TypeValueKnownValues.Value_NHLFaceoffWinPerc;
                                                break;
                                            case 's':
                                                if (chars.Length == 11)
                                                  {
                                                    return TypeValueKnownValues.Value_NHLFaceoffs;
                                                  }
                                                switch (chars[11])
                                                  {
                                                    case 'L':
                                                        if ((String.Compare(chars, 12, "ost", 0, 3, false) == 0) && (chars.Length == 15))
                                                            return TypeValueKnownValues.Value_NHLFaceoffsLost;
                                                        break;
                                                    case 'W':
                                                        if ((String.Compare(chars, 12, "on", 0, 2, false) == 0) && (chars.Length == 14))
                                                            return TypeValueKnownValues.Value_NHLFaceoffsWon;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'G':
                                    switch (chars[4])
                                      {
                                        case 'a':
                                            if (String.Compare(chars, 5, "me", 0, 2, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 'W':
                                                        if (String.Compare(chars, 8, "inningGoal", 0, 10, false) == 0)
                                                          {
                                                            switch (chars[18])
                                                              {
                                                                case 'F':
                                                                    if ((String.Compare(chars, 19, "lag", 0, 3, false) == 0) && (chars.Length == 22))
                                                                        return TypeValueKnownValues.Value_NHLGameWinningGoalFlag;
                                                                    break;
                                                                case 's':
                                                                    if (chars.Length == 19)
                                                                        return TypeValueKnownValues.Value_NHLGameWinningGoals;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 's':
                                                        if ((String.Compare(chars, 8, "Played", 0, 6, false) == 0) && (chars.Length == 14))
                                                            return TypeValueKnownValues.Value_NHLGamesPlayed;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'i':
                                            if (String.Compare(chars, 5, "veaways", 0, 7, false) == 0)
                                              {
                                                if (chars.Length == 12)
                                                  {
                                                    return TypeValueKnownValues.Value_NHLGiveaways;
                                                  }
                                                switch (chars[12])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(chars, 13, "erGame", 0, 6, false) == 0) && (chars.Length == 19))
                                                            return TypeValueKnownValues.Value_NHLGiveawaysPerGame;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'o':
                                            if (String.Compare(chars, 5, "al", 0, 2, false) == 0)
                                              {
                                                switch (chars[7])
                                                  {
                                                    case 's':
                                                        if (chars.Length == 8)
                                                          {
                                                            return TypeValueKnownValues.Value_NHLGoals;
                                                          }
                                                        switch (chars[8])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(chars, 9, "erGame", 0, 6, false) == 0) && (chars.Length == 15))
                                                                    return TypeValueKnownValues.Value_NHLGoalsPerGame;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 't':
                                                        if (String.Compare(chars, 8, "ending", 0, 6, false) == 0)
                                                          {
                                                            switch (chars[14])
                                                              {
                                                                case 'E':
                                                                    switch (chars[15])
                                                                      {
                                                                        case 'm':
                                                                            if (String.Compare(chars, 16, "ptyNet", 0, 6, false) == 0)
                                                                              {
                                                                                switch (chars[22])
                                                                                  {
                                                                                    case 'E':
                                                                                        if ((String.Compare(chars, 23, "venStrengthGoalsAgainst", 0, 23, false) == 0) && (chars.Length == 46))
                                                                                            return TypeValueKnownValues.Value_NHLGoaltendingEmptyNetEvenStrengthGoalsAgainst;
                                                                                        break;
                                                                                    case 'G':
                                                                                        if ((String.Compare(chars, 23, "oalsAgainst", 0, 11, false) == 0) && (chars.Length == 34))
                                                                                            return TypeValueKnownValues.Value_NHLGoaltendingEmptyNetGoalsAgainst;
                                                                                        break;
                                                                                    case 'P':
                                                                                        if ((String.Compare(chars, 23, "owerPlayGoalsAgainst", 0, 20, false) == 0) && (chars.Length == 43))
                                                                                            return TypeValueKnownValues.Value_NHLGoaltendingEmptyNetPowerPlayGoalsAgainst;
                                                                                        break;
                                                                                    case 'S':
                                                                                        if (String.Compare(chars, 23, "ho", 0, 2, false) == 0)
                                                                                          {
                                                                                            switch (chars[25])
                                                                                              {
                                                                                                case 'r':
                                                                                                    if ((String.Compare(chars, 26, "tHandedGoalsAgainst", 0, 19, false) == 0) && (chars.Length == 45))
                                                                                                        return TypeValueKnownValues.Value_NHLGoaltendingEmptyNetShortHandedGoalsAgainst;
                                                                                                    break;
                                                                                                case 't':
                                                                                                    if ((String.Compare(chars, 26, "sAgainst", 0, 8, false) == 0) && (chars.Length == 34))
                                                                                                        return TypeValueKnownValues.Value_NHLGoaltendingEmptyNetShotsAgainst;
                                                                                                    break;
                                                                                                default:
                                                                                                    break;
                                                                                              }
                                                                                          }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 'v':
                                                                            if (String.Compare(chars, 16, "enStrength", 0, 10, false) == 0)
                                                                              {
                                                                                switch (chars[26])
                                                                                  {
                                                                                    case 'G':
                                                                                        if ((String.Compare(chars, 27, "oalsAgainst", 0, 11, false) == 0) && (chars.Length == 38))
                                                                                            return TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthGoalsAgainst;
                                                                                        break;
                                                                                    case 'S':
                                                                                        switch (chars[27])
                                                                                          {
                                                                                            case 'a':
                                                                                                if (String.Compare(chars, 28, "ve", 0, 2, false) == 0)
                                                                                                  {
                                                                                                    switch (chars[30])
                                                                                                      {
                                                                                                        case 'P':
                                                                                                            if ((String.Compare(chars, 31, "erc", 0, 3, false) == 0) && (chars.Length == 34))
                                                                                                                return TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthSavePerc;
                                                                                                            break;
                                                                                                        case 's':
                                                                                                            if (chars.Length == 31)
                                                                                                                return TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthSaves;
                                                                                                            break;
                                                                                                        default:
                                                                                                            break;
                                                                                                      }
                                                                                                  }
                                                                                                break;
                                                                                            case 'h':
                                                                                                if ((String.Compare(chars, 28, "otsAgainst", 0, 10, false) == 0) && (chars.Length == 38))
                                                                                                    return TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthShotsAgainst;
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'G':
                                                                    if (String.Compare(chars, 15, "oalsAgainst", 0, 11, false) == 0)
                                                                      {
                                                                        if (chars.Length == 26)
                                                                          {
                                                                            return TypeValueKnownValues.Value_NHLGoaltendingGoalsAgainst;
                                                                          }
                                                                        switch (chars[26])
                                                                          {
                                                                            case 'A':
                                                                                if ((String.Compare(chars, 27, "verage", 0, 6, false) == 0) && (chars.Length == 33))
                                                                                    return TypeValueKnownValues.Value_NHLGoaltendingGoalsAgainstAverage;
                                                                                break;
                                                                            case 'P':
                                                                                if ((String.Compare(chars, 27, "erGame", 0, 6, false) == 0) && (chars.Length == 33))
                                                                                    return TypeValueKnownValues.Value_NHLGoaltendingGoalsAgainstPerGame;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(chars, 15, "osses", 0, 5, false) == 0) && (chars.Length == 20))
                                                                        return TypeValueKnownValues.Value_NHLGoaltendingLosses;
                                                                    break;
                                                                case 'O':
                                                                    switch (chars[15])
                                                                      {
                                                                        case 'u':
                                                                            if ((String.Compare(chars, 16, "tcome", 0, 5, false) == 0) && (chars.Length == 21))
                                                                                return TypeValueKnownValues.Value_NHLGoaltendingOutcome;
                                                                            break;
                                                                        case 'v':
                                                                            if ((String.Compare(chars, 16, "ertimeLosses", 0, 12, false) == 0) && (chars.Length == 28))
                                                                                return TypeValueKnownValues.Value_NHLGoaltendingOvertimeLosses;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'P':
                                                                    switch (chars[15])
                                                                      {
                                                                        case 'e':
                                                                            if (String.Compare(chars, 16, "nalty", 0, 5, false) == 0)
                                                                              {
                                                                                switch (chars[21])
                                                                                  {
                                                                                    case 'G':
                                                                                        if ((String.Compare(chars, 22, "oalsAgainst", 0, 11, false) == 0) && (chars.Length == 33))
                                                                                            return TypeValueKnownValues.Value_NHLGoaltendingPenaltyGoalsAgainst;
                                                                                        break;
                                                                                    case 'S':
                                                                                        switch (chars[22])
                                                                                          {
                                                                                            case 'a':
                                                                                                if (String.Compare(chars, 23, "ve", 0, 2, false) == 0)
                                                                                                  {
                                                                                                    switch (chars[25])
                                                                                                      {
                                                                                                        case 'P':
                                                                                                            if ((String.Compare(chars, 26, "erc", 0, 3, false) == 0) && (chars.Length == 29))
                                                                                                                return TypeValueKnownValues.Value_NHLGoaltendingPenaltySavePerc;
                                                                                                            break;
                                                                                                        case 's':
                                                                                                            if (chars.Length == 26)
                                                                                                                return TypeValueKnownValues.Value_NHLGoaltendingPenaltySaves;
                                                                                                            break;
                                                                                                        default:
                                                                                                            break;
                                                                                                      }
                                                                                                  }
                                                                                                break;
                                                                                            case 'h':
                                                                                                if ((String.Compare(chars, 23, "otsAgainst", 0, 10, false) == 0) && (chars.Length == 33))
                                                                                                    return TypeValueKnownValues.Value_NHLGoaltendingPenaltyShotsAgainst;
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 'o':
                                                                            if (String.Compare(chars, 16, "werPlay", 0, 7, false) == 0)
                                                                              {
                                                                                switch (chars[23])
                                                                                  {
                                                                                    case 'G':
                                                                                        if ((String.Compare(chars, 24, "oalsAgainst", 0, 11, false) == 0) && (chars.Length == 35))
                                                                                            return TypeValueKnownValues.Value_NHLGoaltendingPowerPlayGoalsAgainst;
                                                                                        break;
                                                                                    case 'S':
                                                                                        switch (chars[24])
                                                                                          {
                                                                                            case 'a':
                                                                                                if (String.Compare(chars, 25, "ve", 0, 2, false) == 0)
                                                                                                  {
                                                                                                    switch (chars[27])
                                                                                                      {
                                                                                                        case 'P':
                                                                                                            if ((String.Compare(chars, 28, "erc", 0, 3, false) == 0) && (chars.Length == 31))
                                                                                                                return TypeValueKnownValues.Value_NHLGoaltendingPowerPlaySavePerc;
                                                                                                            break;
                                                                                                        case 's':
                                                                                                            if (chars.Length == 28)
                                                                                                                return TypeValueKnownValues.Value_NHLGoaltendingPowerPlaySaves;
                                                                                                            break;
                                                                                                        default:
                                                                                                            break;
                                                                                                      }
                                                                                                  }
                                                                                                break;
                                                                                            case 'h':
                                                                                                if ((String.Compare(chars, 25, "otsAgainst", 0, 10, false) == 0) && (chars.Length == 35))
                                                                                                    return TypeValueKnownValues.Value_NHLGoaltendingPowerPlayShotsAgainst;
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'S':
                                                                    switch (chars[15])
                                                                      {
                                                                        case 'a':
                                                                            if (String.Compare(chars, 16, "ve", 0, 2, false) == 0)
                                                                              {
                                                                                switch (chars[18])
                                                                                  {
                                                                                    case 'P':
                                                                                        if ((String.Compare(chars, 19, "erc", 0, 3, false) == 0) && (chars.Length == 22))
                                                                                            return TypeValueKnownValues.Value_NHLGoaltendingSavePerc;
                                                                                        break;
                                                                                    case 's':
                                                                                        if (chars.Length == 19)
                                                                                            return TypeValueKnownValues.Value_NHLGoaltendingSaves;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 'h':
                                                                            switch (chars[16])
                                                                              {
                                                                                case 'o':
                                                                                    switch (chars[17])
                                                                                      {
                                                                                        case 'o':
                                                                                            if (String.Compare(chars, 18, "tout", 0, 4, false) == 0)
                                                                                              {
                                                                                                switch (chars[22])
                                                                                                  {
                                                                                                    case 'G':
                                                                                                        if ((String.Compare(chars, 23, "oalsAgainst", 0, 11, false) == 0) && (chars.Length == 34))
                                                                                                            return TypeValueKnownValues.Value_NHLGoaltendingShootoutGoalsAgainst;
                                                                                                        break;
                                                                                                    case 'S':
                                                                                                        switch (chars[23])
                                                                                                          {
                                                                                                            case 'a':
                                                                                                                if (String.Compare(chars, 24, "ve", 0, 2, false) == 0)
                                                                                                                  {
                                                                                                                    switch (chars[26])
                                                                                                                      {
                                                                                                                        case 'P':
                                                                                                                            if ((String.Compare(chars, 27, "erc", 0, 3, false) == 0) && (chars.Length == 30))
                                                                                                                                return TypeValueKnownValues.Value_NHLGoaltendingShootoutSavePerc;
                                                                                                                            break;
                                                                                                                        case 's':
                                                                                                                            if (chars.Length == 27)
                                                                                                                                return TypeValueKnownValues.Value_NHLGoaltendingShootoutSaves;
                                                                                                                            break;
                                                                                                                        default:
                                                                                                                            break;
                                                                                                                      }
                                                                                                                  }
                                                                                                                break;
                                                                                                            case 'h':
                                                                                                                if ((String.Compare(chars, 24, "otsAgainst", 0, 10, false) == 0) && (chars.Length == 34))
                                                                                                                    return TypeValueKnownValues.Value_NHLGoaltendingShootoutShotsAgainst;
                                                                                                                break;
                                                                                                            default:
                                                                                                                break;
                                                                                                          }
                                                                                                        break;
                                                                                                    default:
                                                                                                        break;
                                                                                                  }
                                                                                              }
                                                                                            break;
                                                                                        case 'r':
                                                                                            if (String.Compare(chars, 18, "tHanded", 0, 7, false) == 0)
                                                                                              {
                                                                                                switch (chars[25])
                                                                                                  {
                                                                                                    case 'G':
                                                                                                        if ((String.Compare(chars, 26, "oalsAgainst", 0, 11, false) == 0) && (chars.Length == 37))
                                                                                                            return TypeValueKnownValues.Value_NHLGoaltendingShortHandedGoalsAgainst;
                                                                                                        break;
                                                                                                    case 'S':
                                                                                                        switch (chars[26])
                                                                                                          {
                                                                                                            case 'a':
                                                                                                                if (String.Compare(chars, 27, "ve", 0, 2, false) == 0)
                                                                                                                  {
                                                                                                                    switch (chars[29])
                                                                                                                      {
                                                                                                                        case 'P':
                                                                                                                            if ((String.Compare(chars, 30, "erc", 0, 3, false) == 0) && (chars.Length == 33))
                                                                                                                                return TypeValueKnownValues.Value_NHLGoaltendingShortHandedSavePerc;
                                                                                                                            break;
                                                                                                                        case 's':
                                                                                                                            if (chars.Length == 30)
                                                                                                                                return TypeValueKnownValues.Value_NHLGoaltendingShortHandedSaves;
                                                                                                                            break;
                                                                                                                        default:
                                                                                                                            break;
                                                                                                                      }
                                                                                                                  }
                                                                                                                break;
                                                                                                            case 'h':
                                                                                                                if ((String.Compare(chars, 27, "otsAgainst", 0, 10, false) == 0) && (chars.Length == 37))
                                                                                                                    return TypeValueKnownValues.Value_NHLGoaltendingShortHandedShotsAgainst;
                                                                                                                break;
                                                                                                            default:
                                                                                                                break;
                                                                                                          }
                                                                                                        break;
                                                                                                    default:
                                                                                                        break;
                                                                                                  }
                                                                                              }
                                                                                            break;
                                                                                        case 't':
                                                                                            if (String.Compare(chars, 18, "sAgainst", 0, 8, false) == 0)
                                                                                              {
                                                                                                if (chars.Length == 26)
                                                                                                  {
                                                                                                    return TypeValueKnownValues.Value_NHLGoaltendingShotsAgainst;
                                                                                                  }
                                                                                                switch (chars[26])
                                                                                                  {
                                                                                                    case 'P':
                                                                                                        if ((String.Compare(chars, 27, "erGame", 0, 6, false) == 0) && (chars.Length == 33))
                                                                                                            return TypeValueKnownValues.Value_NHLGoaltendingShotsAgainstPerGame;
                                                                                                        break;
                                                                                                    default:
                                                                                                        break;
                                                                                                  }
                                                                                              }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                    break;
                                                                                case 'u':
                                                                                    if (String.Compare(chars, 17, "tout", 0, 4, false) == 0)
                                                                                      {
                                                                                        switch (chars[21])
                                                                                          {
                                                                                            case 'F':
                                                                                                if ((String.Compare(chars, 22, "lag", 0, 3, false) == 0) && (chars.Length == 25))
                                                                                                    return TypeValueKnownValues.Value_NHLGoaltendingShutoutFlag;
                                                                                                break;
                                                                                            case 's':
                                                                                                if (chars.Length == 22)
                                                                                                    return TypeValueKnownValues.Value_NHLGoaltendingShutouts;
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                      }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'T':
                                                                    if (String.Compare(chars, 15, "otal", 0, 4, false) == 0)
                                                                      {
                                                                        switch (chars[19])
                                                                          {
                                                                            case 'G':
                                                                                if ((String.Compare(chars, 20, "oalsAgainst", 0, 11, false) == 0) && (chars.Length == 31))
                                                                                    return TypeValueKnownValues.Value_NHLGoaltendingTotalGoalsAgainst;
                                                                                break;
                                                                            case 'S':
                                                                                if ((String.Compare(chars, 20, "hotsAgainst", 0, 11, false) == 0) && (chars.Length == 31))
                                                                                    return TypeValueKnownValues.Value_NHLGoaltendingTotalShotsAgainst;
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'W':
                                                                    if ((String.Compare(chars, 15, "ins", 0, 3, false) == 0) && (chars.Length == 18))
                                                                        return TypeValueKnownValues.Value_NHLGoaltendingWins;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'H':
                                    if (String.Compare(chars, 4, "its", 0, 3, false) == 0)
                                      {
                                        if (chars.Length == 7)
                                          {
                                            return TypeValueKnownValues.Value_NHLHits;
                                          }
                                        switch (chars[7])
                                          {
                                            case 'P':
                                                if ((String.Compare(chars, 8, "erGame", 0, 6, false) == 0) && (chars.Length == 14))
                                                    return TypeValueKnownValues.Value_NHLHitsPerGame;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'M':
                                    if (String.Compare(chars, 4, "issedShots", 0, 10, false) == 0)
                                      {
                                        if (chars.Length == 14)
                                          {
                                            return TypeValueKnownValues.Value_NHLMissedShots;
                                          }
                                        switch (chars[14])
                                          {
                                            case 'P':
                                                if ((String.Compare(chars, 15, "erGame", 0, 6, false) == 0) && (chars.Length == 21))
                                                    return TypeValueKnownValues.Value_NHLMissedShotsPerGame;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'P':
                                    switch (chars[4])
                                      {
                                        case 'e':
                                            if (String.Compare(chars, 5, "nalt", 0, 4, false) == 0)
                                              {
                                                switch (chars[9])
                                                  {
                                                    case 'i':
                                                        if (String.Compare(chars, 10, "es", 0, 2, false) == 0)
                                                          {
                                                            if (chars.Length == 12)
                                                              {
                                                                return TypeValueKnownValues.Value_NHLPenalties;
                                                              }
                                                            switch (chars[12])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 13, "erGame", 0, 6, false) == 0) && (chars.Length == 19))
                                                                        return TypeValueKnownValues.Value_NHLPenaltiesPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'y':
                                                        switch (chars[10])
                                                          {
                                                            case 'G':
                                                                if ((String.Compare(chars, 11, "oals", 0, 4, false) == 0) && (chars.Length == 15))
                                                                    return TypeValueKnownValues.Value_NHLPenaltyGoals;
                                                                break;
                                                            case 'M':
                                                                if (String.Compare(chars, 11, "i", 0, 1, false) == 0)
                                                                  {
                                                                    switch (chars[12])
                                                                      {
                                                                        case 'n':
                                                                            if (String.Compare(chars, 13, "utes", 0, 4, false) == 0)
                                                                              {
                                                                                if (chars.Length == 17)
                                                                                  {
                                                                                    return TypeValueKnownValues.Value_NHLPenaltyMinutes;
                                                                                  }
                                                                                switch (chars[17])
                                                                                  {
                                                                                    case 'P':
                                                                                        if ((String.Compare(chars, 18, "erGame", 0, 6, false) == 0) && (chars.Length == 24))
                                                                                            return TypeValueKnownValues.Value_NHLPenaltyMinutesPerGame;
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 's':
                                                                            if ((String.Compare(chars, 13, "sedShots", 0, 8, false) == 0) && (chars.Length == 21))
                                                                                return TypeValueKnownValues.Value_NHLPenaltyMissedShots;
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'S':
                                                                if ((String.Compare(chars, 11, "hotsOnGoal", 0, 10, false) == 0) && (chars.Length == 21))
                                                                    return TypeValueKnownValues.Value_NHLPenaltyShotsOnGoal;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'l':
                                            if ((String.Compare(chars, 5, "usMinus", 0, 7, false) == 0) && (chars.Length == 12))
                                                return TypeValueKnownValues.Value_NHLPlusMinus;
                                            break;
                                        case 'o':
                                            switch (chars[5])
                                              {
                                                case 'i':
                                                    if (String.Compare(chars, 6, "nts", 0, 3, false) == 0)
                                                      {
                                                        if (chars.Length == 9)
                                                          {
                                                            return TypeValueKnownValues.Value_NHLPoints;
                                                          }
                                                        switch (chars[9])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(chars, 10, "erGame", 0, 6, false) == 0) && (chars.Length == 16))
                                                                    return TypeValueKnownValues.Value_NHLPointsPerGame;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'w':
                                                    if (String.Compare(chars, 6, "erPlay", 0, 6, false) == 0)
                                                      {
                                                        switch (chars[12])
                                                          {
                                                            case 'A':
                                                                if ((String.Compare(chars, 13, "ssists", 0, 6, false) == 0) && (chars.Length == 19))
                                                                    return TypeValueKnownValues.Value_NHLPowerPlayAssists;
                                                                break;
                                                            case 'F':
                                                                if (String.Compare(chars, 13, "aceoff", 0, 6, false) == 0)
                                                                  {
                                                                    switch (chars[19])
                                                                      {
                                                                        case 'W':
                                                                            if ((String.Compare(chars, 20, "inPerc", 0, 6, false) == 0) && (chars.Length == 26))
                                                                                return TypeValueKnownValues.Value_NHLPowerPlayFaceoffWinPerc;
                                                                            break;
                                                                        case 's':
                                                                            if (chars.Length == 20)
                                                                              {
                                                                                return TypeValueKnownValues.Value_NHLPowerPlayFaceoffs;
                                                                              }
                                                                            switch (chars[20])
                                                                              {
                                                                                case 'L':
                                                                                    if ((String.Compare(chars, 21, "ost", 0, 3, false) == 0) && (chars.Length == 24))
                                                                                        return TypeValueKnownValues.Value_NHLPowerPlayFaceoffsLost;
                                                                                    break;
                                                                                case 'W':
                                                                                    if ((String.Compare(chars, 21, "on", 0, 2, false) == 0) && (chars.Length == 23))
                                                                                        return TypeValueKnownValues.Value_NHLPowerPlayFaceoffsWon;
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'G':
                                                                if ((String.Compare(chars, 13, "oals", 0, 4, false) == 0) && (chars.Length == 17))
                                                                    return TypeValueKnownValues.Value_NHLPowerPlayGoals;
                                                                break;
                                                            case 'M':
                                                                if ((String.Compare(chars, 13, "issedShots", 0, 10, false) == 0) && (chars.Length == 23))
                                                                    return TypeValueKnownValues.Value_NHLPowerPlayMissedShots;
                                                                break;
                                                            case 'O':
                                                                if ((String.Compare(chars, 13, "pportunities", 0, 12, false) == 0) && (chars.Length == 25))
                                                                    return TypeValueKnownValues.Value_NHLPowerPlayOpportunities;
                                                                break;
                                                            case 'P':
                                                                if ((String.Compare(chars, 13, "oints", 0, 5, false) == 0) && (chars.Length == 18))
                                                                    return TypeValueKnownValues.Value_NHLPowerPlayPoints;
                                                                break;
                                                            case 'S':
                                                                if ((String.Compare(chars, 13, "hotsOnGoal", 0, 10, false) == 0) && (chars.Length == 23))
                                                                    return TypeValueKnownValues.Value_NHLPowerPlayShotsOnGoal;
                                                                break;
                                                            case 'T':
                                                                if ((String.Compare(chars, 13, "imeOnIce", 0, 8, false) == 0) && (chars.Length == 21))
                                                                    return TypeValueKnownValues.Value_NHLPowerPlayTimeOnIce;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'S':
                                    switch (chars[4])
                                      {
                                        case 'c':
                                            if ((String.Compare(chars, 5, "ratches", 0, 7, false) == 0) && (chars.Length == 12))
                                                return TypeValueKnownValues.Value_NHLScratches;
                                            break;
                                        case 'h':
                                            switch (chars[5])
                                              {
                                                case 'i':
                                                    if (String.Compare(chars, 6, "fts", 0, 3, false) == 0)
                                                      {
                                                        if (chars.Length == 9)
                                                          {
                                                            return TypeValueKnownValues.Value_NHLShifts;
                                                          }
                                                        switch (chars[9])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(chars, 10, "erGame", 0, 6, false) == 0) && (chars.Length == 16))
                                                                    return TypeValueKnownValues.Value_NHLShiftsPerGame;
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'o':
                                                    switch (chars[6])
                                                      {
                                                        case 'o':
                                                            if (String.Compare(chars, 7, "t", 0, 1, false) == 0)
                                                              {
                                                                switch (chars[8])
                                                                  {
                                                                    case 'i':
                                                                        if ((String.Compare(chars, 9, "ngPerc", 0, 6, false) == 0) && (chars.Length == 15))
                                                                            return TypeValueKnownValues.Value_NHLShootingPerc;
                                                                        break;
                                                                    case 'o':
                                                                        if (String.Compare(chars, 9, "ut", 0, 2, false) == 0)
                                                                          {
                                                                            switch (chars[11])
                                                                              {
                                                                                case 'G':
                                                                                    if ((String.Compare(chars, 12, "oals", 0, 4, false) == 0) && (chars.Length == 16))
                                                                                        return TypeValueKnownValues.Value_NHLShootoutGoals;
                                                                                    break;
                                                                                case 'M':
                                                                                    if ((String.Compare(chars, 12, "issedShots", 0, 10, false) == 0) && (chars.Length == 22))
                                                                                        return TypeValueKnownValues.Value_NHLShootoutMissedShots;
                                                                                    break;
                                                                                case 'S':
                                                                                    if ((String.Compare(chars, 12, "hotsOnGoal", 0, 10, false) == 0) && (chars.Length == 22))
                                                                                        return TypeValueKnownValues.Value_NHLShootoutShotsOnGoal;
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'r':
                                                            if (String.Compare(chars, 7, "tHanded", 0, 7, false) == 0)
                                                              {
                                                                switch (chars[14])
                                                                  {
                                                                    case 'A':
                                                                        if ((String.Compare(chars, 15, "ssists", 0, 6, false) == 0) && (chars.Length == 21))
                                                                            return TypeValueKnownValues.Value_NHLShortHandedAssists;
                                                                        break;
                                                                    case 'F':
                                                                        if (String.Compare(chars, 15, "aceoff", 0, 6, false) == 0)
                                                                          {
                                                                            switch (chars[21])
                                                                              {
                                                                                case 'W':
                                                                                    if ((String.Compare(chars, 22, "inPerc", 0, 6, false) == 0) && (chars.Length == 28))
                                                                                        return TypeValueKnownValues.Value_NHLShortHandedFaceoffWinPerc;
                                                                                    break;
                                                                                case 's':
                                                                                    if (chars.Length == 22)
                                                                                      {
                                                                                        return TypeValueKnownValues.Value_NHLShortHandedFaceoffs;
                                                                                      }
                                                                                    switch (chars[22])
                                                                                      {
                                                                                        case 'L':
                                                                                            if ((String.Compare(chars, 23, "ost", 0, 3, false) == 0) && (chars.Length == 26))
                                                                                                return TypeValueKnownValues.Value_NHLShortHandedFaceoffsLost;
                                                                                            break;
                                                                                        case 'W':
                                                                                            if ((String.Compare(chars, 23, "on", 0, 2, false) == 0) && (chars.Length == 25))
                                                                                                return TypeValueKnownValues.Value_NHLShortHandedFaceoffsWon;
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    case 'G':
                                                                        if ((String.Compare(chars, 15, "oals", 0, 4, false) == 0) && (chars.Length == 19))
                                                                            return TypeValueKnownValues.Value_NHLShortHandedGoals;
                                                                        break;
                                                                    case 'M':
                                                                        if ((String.Compare(chars, 15, "issedShots", 0, 10, false) == 0) && (chars.Length == 25))
                                                                            return TypeValueKnownValues.Value_NHLShortHandedMissedShots;
                                                                        break;
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 15, "oints", 0, 5, false) == 0) && (chars.Length == 20))
                                                                            return TypeValueKnownValues.Value_NHLShortHandedPoints;
                                                                        break;
                                                                    case 'S':
                                                                        if ((String.Compare(chars, 15, "hotsOnGoal", 0, 10, false) == 0) && (chars.Length == 25))
                                                                            return TypeValueKnownValues.Value_NHLShortHandedShotsOnGoal;
                                                                        break;
                                                                    case 'T':
                                                                        if ((String.Compare(chars, 15, "imeOnIce", 0, 8, false) == 0) && (chars.Length == 23))
                                                                            return TypeValueKnownValues.Value_NHLShortHandedTimeOnIce;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 't':
                                                            if (String.Compare(chars, 7, "sOnGoal", 0, 7, false) == 0)
                                                              {
                                                                if (chars.Length == 14)
                                                                  {
                                                                    return TypeValueKnownValues.Value_NHLShotsOnGoal;
                                                                  }
                                                                switch (chars[14])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(chars, 15, "erGame", 0, 6, false) == 0) && (chars.Length == 21))
                                                                            return TypeValueKnownValues.Value_NHLShotsOnGoalPerGame;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'T':
                                    switch (chars[4])
                                      {
                                        case 'a':
                                            if (String.Compare(chars, 5, "keaways", 0, 7, false) == 0)
                                              {
                                                if (chars.Length == 12)
                                                  {
                                                    return TypeValueKnownValues.Value_NHLTakeaways;
                                                  }
                                                switch (chars[12])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(chars, 13, "erGame", 0, 6, false) == 0) && (chars.Length == 19))
                                                            return TypeValueKnownValues.Value_NHLTakeawaysPerGame;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'e':
                                            if (String.Compare(chars, 5, "amPenalt", 0, 8, false) == 0)
                                              {
                                                switch (chars[13])
                                                  {
                                                    case 'i':
                                                        if (String.Compare(chars, 14, "es", 0, 2, false) == 0)
                                                          {
                                                            if (chars.Length == 16)
                                                              {
                                                                return TypeValueKnownValues.Value_NHLTeamPenalties;
                                                              }
                                                            switch (chars[16])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 17, "erGame", 0, 6, false) == 0) && (chars.Length == 23))
                                                                        return TypeValueKnownValues.Value_NHLTeamPenaltiesPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'y':
                                                        if (String.Compare(chars, 14, "Minutes", 0, 7, false) == 0)
                                                          {
                                                            if (chars.Length == 21)
                                                              {
                                                                return TypeValueKnownValues.Value_NHLTeamPenaltyMinutes;
                                                              }
                                                            switch (chars[21])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(chars, 22, "erGame", 0, 6, false) == 0) && (chars.Length == 28))
                                                                        return TypeValueKnownValues.Value_NHLTeamPenaltyMinutesPerGame;
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'o':
                                            if (String.Compare(chars, 5, "talTimeOnIce", 0, 12, false) == 0)
                                              {
                                                if (chars.Length == 17)
                                                  {
                                                    return TypeValueKnownValues.Value_NHLTotalTimeOnIce;
                                                  }
                                                switch (chars[17])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(chars, 18, "erGame", 0, 6, false) == 0) && (chars.Length == 24))
                                                            return TypeValueKnownValues.Value_NHLTotalTimeOnIcePerGame;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'S':
                if (String.Compare(chars, 1, "occer", 0, 5, false) == 0)
                  {
                    switch (chars[6])
                      {
                        case 'B':
                            if ((String.Compare(chars, 7, "allPossessions", 0, 14, false) == 0) && (chars.Length == 21))
                                return TypeValueKnownValues.Value_SoccerBallPossessions;
                            break;
                        case 'C':
                            switch (chars[7])
                              {
                                case 'a':
                                    if ((String.Compare(chars, 8, "rdsGiven", 0, 8, false) == 0) && (chars.Length == 16))
                                        return TypeValueKnownValues.Value_SoccerCardsGiven;
                                    break;
                                case 'o':
                                    if ((String.Compare(chars, 8, "rnerKicks", 0, 9, false) == 0) && (chars.Length == 17))
                                        return TypeValueKnownValues.Value_SoccerCornerKicks;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'F':
                            if ((String.Compare(chars, 7, "reeKicks", 0, 8, false) == 0) && (chars.Length == 15))
                                return TypeValueKnownValues.Value_SoccerFreeKicks;
                            break;
                        case 'G':
                            if (String.Compare(chars, 7, "oal", 0, 3, false) == 0)
                              {
                                switch (chars[10])
                                  {
                                    case 'A':
                                        if ((String.Compare(chars, 11, "ttempts", 0, 7, false) == 0) && (chars.Length == 18))
                                            return TypeValueKnownValues.Value_SoccerGoalAttempts;
                                        break;
                                    case 's':
                                        switch (chars[11])
                                          {
                                            case 'B':
                                                if (String.Compare(chars, 12, "y", 0, 1, false) == 0)
                                                  {
                                                    switch (chars[13])
                                                      {
                                                        case 'F':
                                                            if ((String.Compare(chars, 14, "oot", 0, 3, false) == 0) && (chars.Length == 17))
                                                                return TypeValueKnownValues.Value_SoccerGoalsByFoot;
                                                            break;
                                                        case 'H':
                                                            if ((String.Compare(chars, 14, "eaders", 0, 6, false) == 0) && (chars.Length == 20))
                                                                return TypeValueKnownValues.Value_SoccerGoalsByHeaders;
                                                            break;
                                                        case 'T':
                                                            if (String.Compare(chars, 14, "ime", 0, 3, false) == 0)
                                                              {
                                                                switch (chars[17])
                                                                  {
                                                                    case '0':
                                                                        if ((String.Compare(chars, 18, "0To15", 0, 5, false) == 0) && (chars.Length == 23))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsByTime00To15;
                                                                        break;
                                                                    case '1':
                                                                        if ((String.Compare(chars, 18, "6To30", 0, 5, false) == 0) && (chars.Length == 23))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsByTime16To30;
                                                                        break;
                                                                    case '3':
                                                                        if ((String.Compare(chars, 18, "1To45", 0, 5, false) == 0) && (chars.Length == 23))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsByTime31To45;
                                                                        break;
                                                                    case '4':
                                                                        if ((String.Compare(chars, 18, "6To60", 0, 5, false) == 0) && (chars.Length == 23))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsByTime46To60;
                                                                        break;
                                                                    case '6':
                                                                        if ((String.Compare(chars, 18, "1To75", 0, 5, false) == 0) && (chars.Length == 23))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsByTime61To75;
                                                                        break;
                                                                    case '7':
                                                                        if ((String.Compare(chars, 18, "6To90", 0, 5, false) == 0) && (chars.Length == 23))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsByTime76To90;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'C':
                                                if (String.Compare(chars, 12, "onceded", 0, 7, false) == 0)
                                                  {
                                                    if (chars.Length == 19)
                                                      {
                                                        return TypeValueKnownValues.Value_SoccerGoalsConceded;
                                                      }
                                                    switch (chars[19])
                                                      {
                                                        case 'B':
                                                            if (String.Compare(chars, 20, "yTime", 0, 5, false) == 0)
                                                              {
                                                                switch (chars[25])
                                                                  {
                                                                    case '0':
                                                                        if ((String.Compare(chars, 26, "0To15", 0, 5, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsConcededByTime00To15;
                                                                        break;
                                                                    case '1':
                                                                        if ((String.Compare(chars, 26, "6To30", 0, 5, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsConcededByTime16To30;
                                                                        break;
                                                                    case '3':
                                                                        if ((String.Compare(chars, 26, "1To45", 0, 5, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsConcededByTime31To45;
                                                                        break;
                                                                    case '4':
                                                                        if ((String.Compare(chars, 26, "6To60", 0, 5, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsConcededByTime46To60;
                                                                        break;
                                                                    case '6':
                                                                        if ((String.Compare(chars, 26, "1To75", 0, 5, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsConcededByTime61To75;
                                                                        break;
                                                                    case '7':
                                                                        if ((String.Compare(chars, 26, "6To90", 0, 5, false) == 0) && (chars.Length == 31))
                                                                            return TypeValueKnownValues.Value_SoccerGoalsConcededByTime76To90;
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'S':
                                                if ((String.Compare(chars, 12, "cored", 0, 5, false) == 0) && (chars.Length == 17))
                                                    return TypeValueKnownValues.Value_SoccerGoalsScored;
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'M':
                            if ((String.Compare(chars, 7, "atchesPlayed", 0, 12, false) == 0) && (chars.Length == 19))
                                return TypeValueKnownValues.Value_SoccerMatchesPlayed;
                            break;
                        case 'O':
                            switch (chars[7])
                              {
                                case 'f':
                                    if ((String.Compare(chars, 8, "fsides", 0, 6, false) == 0) && (chars.Length == 14))
                                        return TypeValueKnownValues.Value_SoccerOffsides;
                                    break;
                                case 'w':
                                    if ((String.Compare(chars, 8, "nGoals", 0, 6, false) == 0) && (chars.Length == 14))
                                        return TypeValueKnownValues.Value_SoccerOwnGoals;
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'S':
                            switch (chars[7])
                              {
                                case 'h':
                                    if (String.Compare(chars, 8, "ots", 0, 3, false) == 0)
                                      {
                                        switch (chars[11])
                                          {
                                            case 'B':
                                                if ((String.Compare(chars, 12, "locked", 0, 6, false) == 0) && (chars.Length == 18))
                                                    return TypeValueKnownValues.Value_SoccerShotsBlocked;
                                                break;
                                            case 'O':
                                                switch (chars[12])
                                                  {
                                                    case 'f':
                                                        if ((String.Compare(chars, 13, "fGoal", 0, 5, false) == 0) && (chars.Length == 18))
                                                            return TypeValueKnownValues.Value_SoccerShotsOffGoal;
                                                        break;
                                                    case 'n':
                                                        if ((String.Compare(chars, 13, "Goal", 0, 4, false) == 0) && (chars.Length == 17))
                                                            return TypeValueKnownValues.Value_SoccerShotsOnGoal;
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'u':
                                    if (String.Compare(chars, 8, "bstituted", 0, 9, false) == 0)
                                      {
                                        switch (chars[17])
                                          {
                                            case 'I':
                                                if ((String.Compare(chars, 18, "n", 0, 1, false) == 0) && (chars.Length == 19))
                                                    return TypeValueKnownValues.Value_SoccerSubstitutedIn;
                                                break;
                                            case 'O':
                                                if ((String.Compare(chars, 18, "ut", 0, 2, false) == 0) && (chars.Length == 20))
                                                    return TypeValueKnownValues.Value_SoccerSubstitutedOut;
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            default:
                break;
          }
        return TypeValueKnownValues.Value__none;
      }

    public static string  stringFromValue(TypeValueKnownValues the_enum)
      {
        switch (the_enum)
          {
            case TypeValueKnownValues.Value_MLBBaserunningCaughtStealing:
                return "MLBBaserunningCaughtStealing";
            case TypeValueKnownValues.Value_MLBBaserunningPickoffs:
                return "MLBBaserunningPickoffs";
            case TypeValueKnownValues.Value_MLBBaserunningStolenBasePerc:
                return "MLBBaserunningStolenBasePerc";
            case TypeValueKnownValues.Value_MLBBaserunningStolenBases:
                return "MLBBaserunningStolenBases";
            case TypeValueKnownValues.Value_MLBFieldingAssists:
                return "MLBFieldingAssists";
            case TypeValueKnownValues.Value_MLBFieldingCompleteGames:
                return "MLBFieldingCompleteGames";
            case TypeValueKnownValues.Value_MLBFieldingDoublePlays:
                return "MLBFieldingDoublePlays";
            case TypeValueKnownValues.Value_MLBFieldingErrors:
                return "MLBFieldingErrors";
            case TypeValueKnownValues.Value_MLBFieldingFieldingPercentage:
                return "MLBFieldingFieldingPercentage";
            case TypeValueKnownValues.Value_MLBFieldingGamesFinished:
                return "MLBFieldingGamesFinished";
            case TypeValueKnownValues.Value_MLBFieldingGamesPlayed:
                return "MLBFieldingGamesPlayed";
            case TypeValueKnownValues.Value_MLBFieldingGamesStarted:
                return "MLBFieldingGamesStarted";
            case TypeValueKnownValues.Value_MLBFieldingPassedBalls:
                return "MLBFieldingPassedBalls";
            case TypeValueKnownValues.Value_MLBFieldingPutouts:
                return "MLBFieldingPutouts";
            case TypeValueKnownValues.Value_MLBFieldingRangeFactor:
                return "MLBFieldingRangeFactor";
            case TypeValueKnownValues.Value_MLBFieldingTotalChances:
                return "MLBFieldingTotalChances";
            case TypeValueKnownValues.Value_MLBFieldingTriplePlays:
                return "MLBFieldingTriplePlays";
            case TypeValueKnownValues.Value_MLBHittingAtBats:
                return "MLBHittingAtBats";
            case TypeValueKnownValues.Value_MLBHittingAtBatsPerHomeRun:
                return "MLBHittingAtBatsPerHomeRun";
            case TypeValueKnownValues.Value_MLBHittingAtBatsPerStrikeout:
                return "MLBHittingAtBatsPerStrikeout";
            case TypeValueKnownValues.Value_MLBHittingAtBatsWithRunnersInScoringPosition:
                return "MLBHittingAtBatsWithRunnersInScoringPosition";
            case TypeValueKnownValues.Value_MLBHittingBalls:
                return "MLBHittingBalls";
            case TypeValueKnownValues.Value_MLBHittingBallsInPlay:
                return "MLBHittingBallsInPlay";
            case TypeValueKnownValues.Value_MLBHittingBattingAverage:
                return "MLBHittingBattingAverage";
            case TypeValueKnownValues.Value_MLBHittingBattingAverageOnBallsInPlay:
                return "MLBHittingBattingAverageOnBallsInPlay";
            case TypeValueKnownValues.Value_MLBHittingCompleteGames:
                return "MLBHittingCompleteGames";
            case TypeValueKnownValues.Value_MLBHittingCycles:
                return "MLBHittingCycles";
            case TypeValueKnownValues.Value_MLBHittingDirtBallsFaced:
                return "MLBHittingDirtBallsFaced";
            case TypeValueKnownValues.Value_MLBHittingDoubles:
                return "MLBHittingDoubles";
            case TypeValueKnownValues.Value_MLBHittingEarnedRunsScored:
                return "MLBHittingEarnedRunsScored";
            case TypeValueKnownValues.Value_MLBHittingExtraBaseHits:
                return "MLBHittingExtraBaseHits";
            case TypeValueKnownValues.Value_MLBHittingFieldersChoice:
                return "MLBHittingFieldersChoice";
            case TypeValueKnownValues.Value_MLBHittingFlyBalls:
                return "MLBHittingFlyBalls";
            case TypeValueKnownValues.Value_MLBHittingFlyOuts:
                return "MLBHittingFlyOuts";
            case TypeValueKnownValues.Value_MLBHittingFlyOutsIntoDoublePlays:
                return "MLBHittingFlyOutsIntoDoublePlays";
            case TypeValueKnownValues.Value_MLBHittingFoulBalls:
                return "MLBHittingFoulBalls";
            case TypeValueKnownValues.Value_MLBHittingGamesFinished:
                return "MLBHittingGamesFinished";
            case TypeValueKnownValues.Value_MLBHittingGamesPlayed:
                return "MLBHittingGamesPlayed";
            case TypeValueKnownValues.Value_MLBHittingGamesStarted:
                return "MLBHittingGamesStarted";
            case TypeValueKnownValues.Value_MLBHittingGroundBallToFlyBallRatio:
                return "MLBHittingGroundBallToFlyBallRatio";
            case TypeValueKnownValues.Value_MLBHittingGroundBalls:
                return "MLBHittingGroundBalls";
            case TypeValueKnownValues.Value_MLBHittingGroundOuts:
                return "MLBHittingGroundOuts";
            case TypeValueKnownValues.Value_MLBHittingGroundedIntoDoublePlay:
                return "MLBHittingGroundedIntoDoublePlay";
            case TypeValueKnownValues.Value_MLBHittingHitByPitch:
                return "MLBHittingHitByPitch";
            case TypeValueKnownValues.Value_MLBHittingHits:
                return "MLBHittingHits";
            case TypeValueKnownValues.Value_MLBHittingHitsWithRunnersInScoringPosition:
                return "MLBHittingHitsWithRunnersInScoringPosition";
            case TypeValueKnownValues.Value_MLBHittingHomeRuns:
                return "MLBHittingHomeRuns";
            case TypeValueKnownValues.Value_MLBHittingIntentionalBalls:
                return "MLBHittingIntentionalBalls";
            case TypeValueKnownValues.Value_MLBHittingIntentionalWalks:
                return "MLBHittingIntentionalWalks";
            case TypeValueKnownValues.Value_MLBHittingIsolatedPower:
                return "MLBHittingIsolatedPower";
            case TypeValueKnownValues.Value_MLBHittingLineDrives:
                return "MLBHittingLineDrives";
            case TypeValueKnownValues.Value_MLBHittingLineOuts:
                return "MLBHittingLineOuts";
            case TypeValueKnownValues.Value_MLBHittingLineOutsIntoDoublePlay:
                return "MLBHittingLineOutsIntoDoublePlay";
            case TypeValueKnownValues.Value_MLBHittingOnBasePlusSluggingPerc:
                return "MLBHittingOnBasePlusSluggingPerc";
            case TypeValueKnownValues.Value_MLBHittingOnBasePerc:
                return "MLBHittingOnBasePerc";
            case TypeValueKnownValues.Value_MLBHittingPitchesFaced:
                return "MLBHittingPitchesFaced";
            case TypeValueKnownValues.Value_MLBHittingPlateAppearances:
                return "MLBHittingPlateAppearances";
            case TypeValueKnownValues.Value_MLBHittingPopOuts:
                return "MLBHittingPopOuts";
            case TypeValueKnownValues.Value_MLBHittingPopUps:
                return "MLBHittingPopUps";
            case TypeValueKnownValues.Value_MLBHittingReachedOnError:
                return "MLBHittingReachedOnError";
            case TypeValueKnownValues.Value_MLBHittingRunnersLeftOnBase:
                return "MLBHittingRunnersLeftOnBase";
            case TypeValueKnownValues.Value_MLBHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition:
                return "MLBHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition";
            case TypeValueKnownValues.Value_MLBHittingRunsBattedIn:
                return "MLBHittingRunsBattedIn";
            case TypeValueKnownValues.Value_MLBHittingRunsBattedInWithTwoOuts:
                return "MLBHittingRunsBattedInWithTwoOuts";
            case TypeValueKnownValues.Value_MLBHittingSacrificeFlys:
                return "MLBHittingSacrificeFlys";
            case TypeValueKnownValues.Value_MLBHittingSacrificeHits:
                return "MLBHittingSacrificeHits";
            case TypeValueKnownValues.Value_MLBHittingSecondaryAverage:
                return "MLBHittingSecondaryAverage";
            case TypeValueKnownValues.Value_MLBHittingSingles:
                return "MLBHittingSingles";
            case TypeValueKnownValues.Value_MLBHittingSluggingPerc:
                return "MLBHittingSluggingPerc";
            case TypeValueKnownValues.Value_MLBHittingStrikeoutsLooking:
                return "MLBHittingStrikeoutsLooking";
            case TypeValueKnownValues.Value_MLBHittingStrikeoutsSwinging:
                return "MLBHittingStrikeoutsSwinging";
            case TypeValueKnownValues.Value_MLBHittingStrikesLooking:
                return "MLBHittingStrikesLooking";
            case TypeValueKnownValues.Value_MLBHittingStrikesSwinging:
                return "MLBHittingStrikesSwinging";
            case TypeValueKnownValues.Value_MLBHittingTotalBases:
                return "MLBHittingTotalBases";
            case TypeValueKnownValues.Value_MLBHittingTotalRunsScored:
                return "MLBHittingTotalRunsScored";
            case TypeValueKnownValues.Value_MLBHittingTotalStrikeouts:
                return "MLBHittingTotalStrikeouts";
            case TypeValueKnownValues.Value_MLBHittingTotalStrikes:
                return "MLBHittingTotalStrikes";
            case TypeValueKnownValues.Value_MLBHittingTriples:
                return "MLBHittingTriples";
            case TypeValueKnownValues.Value_MLBHittingUnearnedRunsScored:
                return "MLBHittingUnearnedRunsScored";
            case TypeValueKnownValues.Value_MLBHittingWalks:
                return "MLBHittingWalks";
            case TypeValueKnownValues.Value_MLBHittingWalksPerPlaceAppearance:
                return "MLBHittingWalksPerPlaceAppearance";
            case TypeValueKnownValues.Value_MLBHittingWalksPerStrikeout:
                return "MLBHittingWalksPerStrikeout";
            case TypeValueKnownValues.Value_MLBPitchingBalks:
                return "MLBPitchingBalks";
            case TypeValueKnownValues.Value_MLBPitchingBalls:
                return "MLBPitchingBalls";
            case TypeValueKnownValues.Value_MLBPitchingBattersFaced:
                return "MLBPitchingBattersFaced";
            case TypeValueKnownValues.Value_MLBPitchingBlownSaves:
                return "MLBPitchingBlownSaves";
            case TypeValueKnownValues.Value_MLBPitchingCompleteGames:
                return "MLBPitchingCompleteGames";
            case TypeValueKnownValues.Value_MLBPitchingDirtBallsThrown:
                return "MLBPitchingDirtBallsThrown";
            case TypeValueKnownValues.Value_MLBPitchingDoublesAllowed:
                return "MLBPitchingDoublesAllowed";
            case TypeValueKnownValues.Value_MLBPitchingEarnedRunAverage:
                return "MLBPitchingEarnedRunAverage";
            case TypeValueKnownValues.Value_MLBPitchingEarnedRunsAllowed:
                return "MLBPitchingEarnedRunsAllowed";
            case TypeValueKnownValues.Value_MLBPitchingErrors:
                return "MLBPitchingErrors";
            case TypeValueKnownValues.Value_MLBPitchingFieldersChoice:
                return "MLBPitchingFieldersChoice";
            case TypeValueKnownValues.Value_MLBPitchingFlyOuts:
                return "MLBPitchingFlyOuts";
            case TypeValueKnownValues.Value_MLBPitchingFlyOutsIntoDoublePlays:
                return "MLBPitchingFlyOutsIntoDoublePlays";
            case TypeValueKnownValues.Value_MLBPitchingFoulBalls:
                return "MLBPitchingFoulBalls";
            case TypeValueKnownValues.Value_MLBPitchingGamesFinished:
                return "MLBPitchingGamesFinished";
            case TypeValueKnownValues.Value_MLBPitchingGamesPlayed:
                return "MLBPitchingGamesPlayed";
            case TypeValueKnownValues.Value_MLBPitchingGamesStarted:
                return "MLBPitchingGamesStarted";
            case TypeValueKnownValues.Value_MLBPitchingGroundBallToFlyBallRatio:
                return "MLBPitchingGroundBallToFlyBallRatio";
            case TypeValueKnownValues.Value_MLBPitchingGroundOuts:
                return "MLBPitchingGroundOuts";
            case TypeValueKnownValues.Value_MLBPitchingGroundOutsIntoDoublePlays:
                return "MLBPitchingGroundOutsIntoDoublePlays";
            case TypeValueKnownValues.Value_MLBPitchingHitBatters:
                return "MLBPitchingHitBatters";
            case TypeValueKnownValues.Value_MLBPitchingHitsAllowed:
                return "MLBPitchingHitsAllowed";
            case TypeValueKnownValues.Value_MLBPitchingHolds:
                return "MLBPitchingHolds";
            case TypeValueKnownValues.Value_MLBPitchingHomeRunsAllowed:
                return "MLBPitchingHomeRunsAllowed";
            case TypeValueKnownValues.Value_MLBPitchingInningsPitchedCompletePartial:
                return "MLBPitchingInningsPitchedCompletePartial";
            case TypeValueKnownValues.Value_MLBPitchingInningsPitchedTotalOuts:
                return "MLBPitchingInningsPitchedTotalOuts";
            case TypeValueKnownValues.Value_MLBPitchingIntentionalBalls:
                return "MLBPitchingIntentionalBalls";
            case TypeValueKnownValues.Value_MLBPitchingIntentionalWalks:
                return "MLBPitchingIntentionalWalks";
            case TypeValueKnownValues.Value_MLBPitchingLineOuts:
                return "MLBPitchingLineOuts";
            case TypeValueKnownValues.Value_MLBPitchingLineOutsIntoDoublePlays:
                return "MLBPitchingLineOutsIntoDoublePlays";
            case TypeValueKnownValues.Value_MLBPitchingLosses:
                return "MLBPitchingLosses";
            case TypeValueKnownValues.Value_MLBPitchingOpponentsBattingAverage:
                return "MLBPitchingOpponentsBattingAverage";
            case TypeValueKnownValues.Value_MLBPitchingOpponentRunnersLeftOnBase:
                return "MLBPitchingOpponentRunnersLeftOnBase";
            case TypeValueKnownValues.Value_MLBPitchingPickoffs:
                return "MLBPitchingPickoffs";
            case TypeValueKnownValues.Value_MLBPitchingPitchCount:
                return "MLBPitchingPitchCount";
            case TypeValueKnownValues.Value_MLBPitchingPopOutsForced:
                return "MLBPitchingPopOutsForced";
            case TypeValueKnownValues.Value_MLBPitchingQualityStarts:
                return "MLBPitchingQualityStarts";
            case TypeValueKnownValues.Value_MLBPitchingReachedOnError:
                return "MLBPitchingReachedOnError";
            case TypeValueKnownValues.Value_MLBPitchingRunnersCaughtStealing:
                return "MLBPitchingRunnersCaughtStealing";
            case TypeValueKnownValues.Value_MLBPitchingSacrificeFlys:
                return "MLBPitchingSacrificeFlys";
            case TypeValueKnownValues.Value_MLBPitchingSacrificeHits:
                return "MLBPitchingSacrificeHits";
            case TypeValueKnownValues.Value_MLBPitchingSaveOpportunities:
                return "MLBPitchingSaveOpportunities";
            case TypeValueKnownValues.Value_MLBPitchingSaves:
                return "MLBPitchingSaves";
            case TypeValueKnownValues.Value_MLBPitchingShutouts:
                return "MLBPitchingShutouts";
            case TypeValueKnownValues.Value_MLBPitchingSinglesAllowed:
                return "MLBPitchingSinglesAllowed";
            case TypeValueKnownValues.Value_MLBPitchingStolenBasesAllowed:
                return "MLBPitchingStolenBasesAllowed";
            case TypeValueKnownValues.Value_MLBPitchingStrikeoutsLooking:
                return "MLBPitchingStrikeoutsLooking";
            case TypeValueKnownValues.Value_MLBPitchingStrikeoutsPer9Innings:
                return "MLBPitchingStrikeoutsPer9Innings";
            case TypeValueKnownValues.Value_MLBPitchingStrikeoutsPerWalk:
                return "MLBPitchingStrikeoutsPerWalk";
            case TypeValueKnownValues.Value_MLBPitchingStrikeoutsSwinging:
                return "MLBPitchingStrikeoutsSwinging";
            case TypeValueKnownValues.Value_MLBPitchingStrikesLooking:
                return "MLBPitchingStrikesLooking";
            case TypeValueKnownValues.Value_MLBPitchingStrikesSwinging:
                return "MLBPitchingStrikesSwinging";
            case TypeValueKnownValues.Value_MLBPitchingTotalBasesAllowed:
                return "MLBPitchingTotalBasesAllowed";
            case TypeValueKnownValues.Value_MLBPitchingTotalRunsAllowed:
                return "MLBPitchingTotalRunsAllowed";
            case TypeValueKnownValues.Value_MLBPitchingTotalStrikeouts:
                return "MLBPitchingTotalStrikeouts";
            case TypeValueKnownValues.Value_MLBPitchingTotalStrikes:
                return "MLBPitchingTotalStrikes";
            case TypeValueKnownValues.Value_MLBPitchingTriplesAllowed:
                return "MLBPitchingTriplesAllowed";
            case TypeValueKnownValues.Value_MLBPitchingUnearnedRunsAllowed:
                return "MLBPitchingUnearnedRunsAllowed";
            case TypeValueKnownValues.Value_MLBPitchingWalks:
                return "MLBPitchingWalks";
            case TypeValueKnownValues.Value_MLBPitchingWalksPlusHitsPerInningPitched:
                return "MLBPitchingWalksPlusHitsPerInningPitched";
            case TypeValueKnownValues.Value_MLBPitchingWildPitches:
                return "MLBPitchingWildPitches";
            case TypeValueKnownValues.Value_MLBPitchingWins:
                return "MLBPitchingWins";
            case TypeValueKnownValues.Value_NHLAssists:
                return "NHLAssists";
            case TypeValueKnownValues.Value_NHLAssistsPerGame:
                return "NHLAssistsPerGame";
            case TypeValueKnownValues.Value_NHLAverageTimeOnIce:
                return "NHLAverageTimeOnIce";
            case TypeValueKnownValues.Value_NHLBlockedAttempts:
                return "NHLBlockedAttempts";
            case TypeValueKnownValues.Value_NHLBlockedAttemptsPerGame:
                return "NHLBlockedAttemptsPerGame";
            case TypeValueKnownValues.Value_NHLBlockedShots:
                return "NHLBlockedShots";
            case TypeValueKnownValues.Value_NHLBlockedShotsPerGame:
                return "NHLBlockedShotsPerGame";
            case TypeValueKnownValues.Value_NHLEvenStrengthAssists:
                return "NHLEvenStrengthAssists";
            case TypeValueKnownValues.Value_NHLEvenStrengthFaceoffWinPerc:
                return "NHLEvenStrengthFaceoffWinPerc";
            case TypeValueKnownValues.Value_NHLEvenStrengthFaceoffs:
                return "NHLEvenStrengthFaceoffs";
            case TypeValueKnownValues.Value_NHLEvenStrengthFaceoffsLost:
                return "NHLEvenStrengthFaceoffsLost";
            case TypeValueKnownValues.Value_NHLEvenStrengthFaceoffsWon:
                return "NHLEvenStrengthFaceoffsWon";
            case TypeValueKnownValues.Value_NHLEvenStrengthGoals:
                return "NHLEvenStrengthGoals";
            case TypeValueKnownValues.Value_NHLEvenStrengthMissedShots:
                return "NHLEvenStrengthMissedShots";
            case TypeValueKnownValues.Value_NHLEvenStrengthShotsOnGoal:
                return "NHLEvenStrengthShotsOnGoal";
            case TypeValueKnownValues.Value_NHLEvenStrengthTimeOnIce:
                return "NHLEvenStrengthTimeOnIce";
            case TypeValueKnownValues.Value_NHLFaceoffWinPerc:
                return "NHLFaceoffWinPerc";
            case TypeValueKnownValues.Value_NHLFaceoffs:
                return "NHLFaceoffs";
            case TypeValueKnownValues.Value_NHLFaceoffsWon:
                return "NHLFaceoffsWon";
            case TypeValueKnownValues.Value_NHLFaceoffsLost:
                return "NHLFaceoffsLost";
            case TypeValueKnownValues.Value_NHLGameWinningGoalFlag:
                return "NHLGameWinningGoalFlag";
            case TypeValueKnownValues.Value_NHLGameWinningGoals:
                return "NHLGameWinningGoals";
            case TypeValueKnownValues.Value_NHLGamesPlayed:
                return "NHLGamesPlayed";
            case TypeValueKnownValues.Value_NHLGiveaways:
                return "NHLGiveaways";
            case TypeValueKnownValues.Value_NHLGiveawaysPerGame:
                return "NHLGiveawaysPerGame";
            case TypeValueKnownValues.Value_NHLGoals:
                return "NHLGoals";
            case TypeValueKnownValues.Value_NHLGoalsPerGame:
                return "NHLGoalsPerGame";
            case TypeValueKnownValues.Value_NHLHits:
                return "NHLHits";
            case TypeValueKnownValues.Value_NHLHitsPerGame:
                return "NHLHitsPerGame";
            case TypeValueKnownValues.Value_NHLMissedShots:
                return "NHLMissedShots";
            case TypeValueKnownValues.Value_NHLMissedShotsPerGame:
                return "NHLMissedShotsPerGame";
            case TypeValueKnownValues.Value_NHLPenalties:
                return "NHLPenalties";
            case TypeValueKnownValues.Value_NHLPenaltiesPerGame:
                return "NHLPenaltiesPerGame";
            case TypeValueKnownValues.Value_NHLPenaltyGoals:
                return "NHLPenaltyGoals";
            case TypeValueKnownValues.Value_NHLPenaltyMinutes:
                return "NHLPenaltyMinutes";
            case TypeValueKnownValues.Value_NHLPenaltyMinutesPerGame:
                return "NHLPenaltyMinutesPerGame";
            case TypeValueKnownValues.Value_NHLPenaltyMissedShots:
                return "NHLPenaltyMissedShots";
            case TypeValueKnownValues.Value_NHLPenaltyShotsOnGoal:
                return "NHLPenaltyShotsOnGoal";
            case TypeValueKnownValues.Value_NHLPlusMinus:
                return "NHLPlusMinus";
            case TypeValueKnownValues.Value_NHLPoints:
                return "NHLPoints";
            case TypeValueKnownValues.Value_NHLPointsPerGame:
                return "NHLPointsPerGame";
            case TypeValueKnownValues.Value_NHLPowerPlayAssists:
                return "NHLPowerPlayAssists";
            case TypeValueKnownValues.Value_NHLPowerPlayFaceoffWinPerc:
                return "NHLPowerPlayFaceoffWinPerc";
            case TypeValueKnownValues.Value_NHLPowerPlayFaceoffs:
                return "NHLPowerPlayFaceoffs";
            case TypeValueKnownValues.Value_NHLPowerPlayFaceoffsLost:
                return "NHLPowerPlayFaceoffsLost";
            case TypeValueKnownValues.Value_NHLPowerPlayFaceoffsWon:
                return "NHLPowerPlayFaceoffsWon";
            case TypeValueKnownValues.Value_NHLPowerPlayGoals:
                return "NHLPowerPlayGoals";
            case TypeValueKnownValues.Value_NHLPowerPlayMissedShots:
                return "NHLPowerPlayMissedShots";
            case TypeValueKnownValues.Value_NHLPowerPlayOpportunities:
                return "NHLPowerPlayOpportunities";
            case TypeValueKnownValues.Value_NHLPowerPlayPoints:
                return "NHLPowerPlayPoints";
            case TypeValueKnownValues.Value_NHLPowerPlayShotsOnGoal:
                return "NHLPowerPlayShotsOnGoal";
            case TypeValueKnownValues.Value_NHLPowerPlayTimeOnIce:
                return "NHLPowerPlayTimeOnIce";
            case TypeValueKnownValues.Value_NHLScratches:
                return "NHLScratches";
            case TypeValueKnownValues.Value_NHLShifts:
                return "NHLShifts";
            case TypeValueKnownValues.Value_NHLShiftsPerGame:
                return "NHLShiftsPerGame";
            case TypeValueKnownValues.Value_NHLShootingPerc:
                return "NHLShootingPerc";
            case TypeValueKnownValues.Value_NHLShootoutGoals:
                return "NHLShootoutGoals";
            case TypeValueKnownValues.Value_NHLShootoutMissedShots:
                return "NHLShootoutMissedShots";
            case TypeValueKnownValues.Value_NHLShootoutShotsOnGoal:
                return "NHLShootoutShotsOnGoal";
            case TypeValueKnownValues.Value_NHLShortHandedAssists:
                return "NHLShortHandedAssists";
            case TypeValueKnownValues.Value_NHLShortHandedFaceoffWinPerc:
                return "NHLShortHandedFaceoffWinPerc";
            case TypeValueKnownValues.Value_NHLShortHandedFaceoffs:
                return "NHLShortHandedFaceoffs";
            case TypeValueKnownValues.Value_NHLShortHandedFaceoffsLost:
                return "NHLShortHandedFaceoffsLost";
            case TypeValueKnownValues.Value_NHLShortHandedFaceoffsWon:
                return "NHLShortHandedFaceoffsWon";
            case TypeValueKnownValues.Value_NHLShortHandedGoals:
                return "NHLShortHandedGoals";
            case TypeValueKnownValues.Value_NHLShortHandedMissedShots:
                return "NHLShortHandedMissedShots";
            case TypeValueKnownValues.Value_NHLShortHandedPoints:
                return "NHLShortHandedPoints";
            case TypeValueKnownValues.Value_NHLShortHandedShotsOnGoal:
                return "NHLShortHandedShotsOnGoal";
            case TypeValueKnownValues.Value_NHLShortHandedTimeOnIce:
                return "NHLShortHandedTimeOnIce";
            case TypeValueKnownValues.Value_NHLShotsOnGoal:
                return "NHLShotsOnGoal";
            case TypeValueKnownValues.Value_NHLShotsOnGoalPerGame:
                return "NHLShotsOnGoalPerGame";
            case TypeValueKnownValues.Value_NHLTakeaways:
                return "NHLTakeaways";
            case TypeValueKnownValues.Value_NHLTakeawaysPerGame:
                return "NHLTakeawaysPerGame";
            case TypeValueKnownValues.Value_NHLTeamPenalties:
                return "NHLTeamPenalties";
            case TypeValueKnownValues.Value_NHLTeamPenaltiesPerGame:
                return "NHLTeamPenaltiesPerGame";
            case TypeValueKnownValues.Value_NHLTeamPenaltyMinutes:
                return "NHLTeamPenaltyMinutes";
            case TypeValueKnownValues.Value_NHLTeamPenaltyMinutesPerGame:
                return "NHLTeamPenaltyMinutesPerGame";
            case TypeValueKnownValues.Value_NHLTotalTimeOnIce:
                return "NHLTotalTimeOnIce";
            case TypeValueKnownValues.Value_NHLTotalTimeOnIcePerGame:
                return "NHLTotalTimeOnIcePerGame";
            case TypeValueKnownValues.Value_NHLGoaltendingEmptyNetEvenStrengthGoalsAgainst:
                return "NHLGoaltendingEmptyNetEvenStrengthGoalsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingEmptyNetGoalsAgainst:
                return "NHLGoaltendingEmptyNetGoalsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingEmptyNetPowerPlayGoalsAgainst:
                return "NHLGoaltendingEmptyNetPowerPlayGoalsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingEmptyNetShortHandedGoalsAgainst:
                return "NHLGoaltendingEmptyNetShortHandedGoalsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingEmptyNetShotsAgainst:
                return "NHLGoaltendingEmptyNetShotsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthGoalsAgainst:
                return "NHLGoaltendingEvenStrengthGoalsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthSavePerc:
                return "NHLGoaltendingEvenStrengthSavePerc";
            case TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthSaves:
                return "NHLGoaltendingEvenStrengthSaves";
            case TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthShotsAgainst:
                return "NHLGoaltendingEvenStrengthShotsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingGoalsAgainst:
                return "NHLGoaltendingGoalsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingGoalsAgainstAverage:
                return "NHLGoaltendingGoalsAgainstAverage";
            case TypeValueKnownValues.Value_NHLGoaltendingGoalsAgainstPerGame:
                return "NHLGoaltendingGoalsAgainstPerGame";
            case TypeValueKnownValues.Value_NHLGoaltendingLosses:
                return "NHLGoaltendingLosses";
            case TypeValueKnownValues.Value_NHLGoaltendingOutcome:
                return "NHLGoaltendingOutcome";
            case TypeValueKnownValues.Value_NHLGoaltendingOvertimeLosses:
                return "NHLGoaltendingOvertimeLosses";
            case TypeValueKnownValues.Value_NHLGoaltendingPenaltyGoalsAgainst:
                return "NHLGoaltendingPenaltyGoalsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingPenaltySavePerc:
                return "NHLGoaltendingPenaltySavePerc";
            case TypeValueKnownValues.Value_NHLGoaltendingPenaltySaves:
                return "NHLGoaltendingPenaltySaves";
            case TypeValueKnownValues.Value_NHLGoaltendingPenaltyShotsAgainst:
                return "NHLGoaltendingPenaltyShotsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingPowerPlayGoalsAgainst:
                return "NHLGoaltendingPowerPlayGoalsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingPowerPlaySavePerc:
                return "NHLGoaltendingPowerPlaySavePerc";
            case TypeValueKnownValues.Value_NHLGoaltendingPowerPlaySaves:
                return "NHLGoaltendingPowerPlaySaves";
            case TypeValueKnownValues.Value_NHLGoaltendingPowerPlayShotsAgainst:
                return "NHLGoaltendingPowerPlayShotsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingSavePerc:
                return "NHLGoaltendingSavePerc";
            case TypeValueKnownValues.Value_NHLGoaltendingSaves:
                return "NHLGoaltendingSaves";
            case TypeValueKnownValues.Value_NHLGoaltendingShootoutGoalsAgainst:
                return "NHLGoaltendingShootoutGoalsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingShootoutSavePerc:
                return "NHLGoaltendingShootoutSavePerc";
            case TypeValueKnownValues.Value_NHLGoaltendingShootoutSaves:
                return "NHLGoaltendingShootoutSaves";
            case TypeValueKnownValues.Value_NHLGoaltendingShootoutShotsAgainst:
                return "NHLGoaltendingShootoutShotsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingShortHandedGoalsAgainst:
                return "NHLGoaltendingShortHandedGoalsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingShortHandedSavePerc:
                return "NHLGoaltendingShortHandedSavePerc";
            case TypeValueKnownValues.Value_NHLGoaltendingShortHandedSaves:
                return "NHLGoaltendingShortHandedSaves";
            case TypeValueKnownValues.Value_NHLGoaltendingShortHandedShotsAgainst:
                return "NHLGoaltendingShortHandedShotsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingShotsAgainst:
                return "NHLGoaltendingShotsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingShotsAgainstPerGame:
                return "NHLGoaltendingShotsAgainstPerGame";
            case TypeValueKnownValues.Value_NHLGoaltendingShutoutFlag:
                return "NHLGoaltendingShutoutFlag";
            case TypeValueKnownValues.Value_NHLGoaltendingShutouts:
                return "NHLGoaltendingShutouts";
            case TypeValueKnownValues.Value_NHLGoaltendingTotalGoalsAgainst:
                return "NHLGoaltendingTotalGoalsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingTotalShotsAgainst:
                return "NHLGoaltendingTotalShotsAgainst";
            case TypeValueKnownValues.Value_NHLGoaltendingWins:
                return "NHLGoaltendingWins";
            case TypeValueKnownValues.Value_NFL3rdDownConversionAttempts:
                return "NFL3rdDownConversionAttempts";
            case TypeValueKnownValues.Value_NFL3rdDownConversions:
                return "NFL3rdDownConversions";
            case TypeValueKnownValues.Value_NFL3rdDownConversionPerc:
                return "NFL3rdDownConversionPerc";
            case TypeValueKnownValues.Value_NFL3rdDownConversionsViaPass:
                return "NFL3rdDownConversionsViaPass";
            case TypeValueKnownValues.Value_NFL3rdDownConversionsViaPenalty:
                return "NFL3rdDownConversionsViaPenalty";
            case TypeValueKnownValues.Value_NFL3rdDownConversionsViaRush:
                return "NFL3rdDownConversionsViaRush";
            case TypeValueKnownValues.Value_NFL4thDownConversionAttempts:
                return "NFL4thDownConversionAttempts";
            case TypeValueKnownValues.Value_NFL4thDownConversions:
                return "NFL4thDownConversions";
            case TypeValueKnownValues.Value_NFL4thDownConversionPerc:
                return "NFL4thDownConversionPerc";
            case TypeValueKnownValues.Value_NFL4thDownConversionsViaPass:
                return "NFL4thDownConversionsViaPass";
            case TypeValueKnownValues.Value_NFL4thDownConversionsViaPenalty:
                return "NFL4thDownConversionsViaPenalty";
            case TypeValueKnownValues.Value_NFL4thDownConversionsViaRush:
                return "NFL4thDownConversionsViaRush";
            case TypeValueKnownValues.Value_NFLGamesPlayed:
                return "NFLGamesPlayed";
            case TypeValueKnownValues.Value_NFLGamesStarted:
                return "NFLGamesStarted";
            case TypeValueKnownValues.Value_NFLGoalEfficiencyAttempts:
                return "NFLGoalEfficiencyAttempts";
            case TypeValueKnownValues.Value_NFLGoalEfficiencyPerc:
                return "NFLGoalEfficiencyPerc";
            case TypeValueKnownValues.Value_NFLGoalEfficiencyTouchdowns:
                return "NFLGoalEfficiencyTouchdowns";
            case TypeValueKnownValues.Value_NFLPassing10PlusYards:
                return "NFLPassing10PlusYards";
            case TypeValueKnownValues.Value_NFLPassing20PlusYards:
                return "NFLPassing20PlusYards";
            case TypeValueKnownValues.Value_NFLPassing30PlusYards:
                return "NFLPassing30PlusYards";
            case TypeValueKnownValues.Value_NFLPassing40PlusYards:
                return "NFLPassing40PlusYards";
            case TypeValueKnownValues.Value_NFLPassing50PlusYards:
                return "NFLPassing50PlusYards";
            case TypeValueKnownValues.Value_NFLPassingAttempts:
                return "NFLPassingAttempts";
            case TypeValueKnownValues.Value_NFLPassingAverageYardsPerCompletion:
                return "NFLPassingAverageYardsPerCompletion";
            case TypeValueKnownValues.Value_NFLPassingAverageYardsPerAttempt:
                return "NFLPassingAverageYardsPerAttempt";
            case TypeValueKnownValues.Value_NFLPassingCompletionPerc:
                return "NFLPassingCompletionPerc";
            case TypeValueKnownValues.Value_NFLPassingCompletions:
                return "NFLPassingCompletions";
            case TypeValueKnownValues.Value_NFLPassing1stDowns:
                return "NFLPassing1stDowns";
            case TypeValueKnownValues.Value_NFLPassingGrossYards:
                return "NFLPassingGrossYards";
            case TypeValueKnownValues.Value_NFLPassingInterceptionPerc:
                return "NFLPassingInterceptionPerc";
            case TypeValueKnownValues.Value_NFLPassingInterceptions:
                return "NFLPassingInterceptions";
            case TypeValueKnownValues.Value_NFLPassingInterceptionsReturnedForTouchdown:
                return "NFLPassingInterceptionsReturnedForTouchdown";
            case TypeValueKnownValues.Value_NFLPassingLongestPass:
                return "NFLPassingLongestPass";
            case TypeValueKnownValues.Value_NFLPassingNetYards:
                return "NFLPassingNetYards";
            case TypeValueKnownValues.Value_NFLPassingRating:
                return "NFLPassingRating";
            case TypeValueKnownValues.Value_NFLPassingRedZoneAttempts:
                return "NFLPassingRedZoneAttempts";
            case TypeValueKnownValues.Value_NFLPassingSacked:
                return "NFLPassingSacked";
            case TypeValueKnownValues.Value_NFLPassingSackedYardsLost:
                return "NFLPassingSackedYardsLost";
            case TypeValueKnownValues.Value_NFLPassingTackledForSafety:
                return "NFLPassingTackledForSafety";
            case TypeValueKnownValues.Value_NFLPassingTotalYards:
                return "NFLPassingTotalYards";
            case TypeValueKnownValues.Value_NFLPassingTouchdownPerc:
                return "NFLPassingTouchdownPerc";
            case TypeValueKnownValues.Value_NFLPassingTouchdowns:
                return "NFLPassingTouchdowns";
            case TypeValueKnownValues.Value_NFLReceiving10PlusYards:
                return "NFLReceiving10PlusYards";
            case TypeValueKnownValues.Value_NFLReceiving20PlusYards:
                return "NFLReceiving20PlusYards";
            case TypeValueKnownValues.Value_NFLReceiving30PlusYards:
                return "NFLReceiving30PlusYards";
            case TypeValueKnownValues.Value_NFLReceiving40PlusYards:
                return "NFLReceiving40PlusYards";
            case TypeValueKnownValues.Value_NFLReceiving50PlusYards:
                return "NFLReceiving50PlusYards";
            case TypeValueKnownValues.Value_NFLReceivingAverageReception:
                return "NFLReceivingAverageReception";
            case TypeValueKnownValues.Value_NFLReceiving1stDowns:
                return "NFLReceiving1stDowns";
            case TypeValueKnownValues.Value_NFLReceivingFumbledOnReception:
                return "NFLReceivingFumbledOnReception";
            case TypeValueKnownValues.Value_NFLReceivingLongestReception:
                return "NFLReceivingLongestReception";
            case TypeValueKnownValues.Value_NFLReceivingReceptions:
                return "NFLReceivingReceptions";
            case TypeValueKnownValues.Value_NFLReceivingRedZoneTargets:
                return "NFLReceivingRedZoneTargets";
            case TypeValueKnownValues.Value_NFLReceivingTargets:
                return "NFLReceivingTargets";
            case TypeValueKnownValues.Value_NFLReceivingTotalYards:
                return "NFLReceivingTotalYards";
            case TypeValueKnownValues.Value_NFLReceivingTouchdowns:
                return "NFLReceivingTouchdowns";
            case TypeValueKnownValues.Value_NFLReceivingYardsAfterCompletion:
                return "NFLReceivingYardsAfterCompletion";
            case TypeValueKnownValues.Value_NFLRedZoneEfficiencyAttempts:
                return "NFLRedZoneEfficiencyAttempts";
            case TypeValueKnownValues.Value_NFLRedZoneEfficiencyConversions:
                return "NFLRedZoneEfficiencyConversions";
            case TypeValueKnownValues.Value_NFLRedZoneEfficiencyPerc:
                return "NFLRedZoneEfficiencyPerc";
            case TypeValueKnownValues.Value_NFLRushing10PlusYards:
                return "NFLRushing10PlusYards";
            case TypeValueKnownValues.Value_NFLRushing20PlusYards:
                return "NFLRushing20PlusYards";
            case TypeValueKnownValues.Value_NFLRushing30PlusYards:
                return "NFLRushing30PlusYards";
            case TypeValueKnownValues.Value_NFLRushing40PlusYards:
                return "NFLRushing40PlusYards";
            case TypeValueKnownValues.Value_NFLRushing50PlusYards:
                return "NFLRushing50PlusYards";
            case TypeValueKnownValues.Value_NFLRushingAttempts:
                return "NFLRushingAttempts";
            case TypeValueKnownValues.Value_NFLRushingAverageRush:
                return "NFLRushingAverageRush";
            case TypeValueKnownValues.Value_NFLRushing1stDownPerc:
                return "NFLRushing1stDownPerc";
            case TypeValueKnownValues.Value_NFLRushing1stDowns:
                return "NFLRushing1stDowns";
            case TypeValueKnownValues.Value_NFLRushingFumbledOnRush:
                return "NFLRushingFumbledOnRush";
            case TypeValueKnownValues.Value_NFLRushingLongestRush:
                return "NFLRushingLongestRush";
            case TypeValueKnownValues.Value_NFLRushingRedZoneAttempts:
                return "NFLRushingRedZoneAttempts";
            case TypeValueKnownValues.Value_NFLRushingTackledForSafety:
                return "NFLRushingTackledForSafety";
            case TypeValueKnownValues.Value_NFLRushingTotalYards:
                return "NFLRushingTotalYards";
            case TypeValueKnownValues.Value_NFLRushingTouchdowns:
                return "NFLRushingTouchdowns";
            case TypeValueKnownValues.Value_NFL1stDowns:
                return "NFL1stDowns";
            case TypeValueKnownValues.Value_NFL2PointConversionsAttempted:
                return "NFL2PointConversionsAttempted";
            case TypeValueKnownValues.Value_NFL2PointConversionsFailed:
                return "NFL2PointConversionsFailed";
            case TypeValueKnownValues.Value_NFL2PointConversionsMade:
                return "NFL2PointConversionsMade";
            case TypeValueKnownValues.Value_NFL2PointConversionsPassing:
                return "NFL2PointConversionsPassing";
            case TypeValueKnownValues.Value_NFL2PointConversionsReceiving:
                return "NFL2PointConversionsReceiving";
            case TypeValueKnownValues.Value_NFL2PointConversionsRushing:
                return "NFL2PointConversionsRushing";
            case TypeValueKnownValues.Value_NFL1PointSafety:
                return "NFL1PointSafety";
            case TypeValueKnownValues.Value_NFLBlockedKicks:
                return "NFLBlockedKicks";
            case TypeValueKnownValues.Value_NFLConversionAttempts:
                return "NFLConversionAttempts";
            case TypeValueKnownValues.Value_NFLConversionsCompleted:
                return "NFLConversionsCompleted";
            case TypeValueKnownValues.Value_NFLConversionsFailed:
                return "NFLConversionsFailed";
            case TypeValueKnownValues.Value_NFLForcedFumbles:
                return "NFLForcedFumbles";
            case TypeValueKnownValues.Value_NFLFumblesRecovered:
                return "NFLFumblesRecovered";
            case TypeValueKnownValues.Value_NFLFumblesRecoveredForTouchdowns:
                return "NFLFumblesRecoveredForTouchdowns";
            case TypeValueKnownValues.Value_NFLInterceptions:
                return "NFLInterceptions";
            case TypeValueKnownValues.Value_NFLInterceptionsLongestInterception:
                return "NFLInterceptionsLongestInterception";
            case TypeValueKnownValues.Value_NFLInterceptionsTouchdowns:
                return "NFLInterceptionsTouchdowns";
            case TypeValueKnownValues.Value_NFLInterceptionsYards:
                return "NFLInterceptionsYards";
            case TypeValueKnownValues.Value_NFLMiscAssistedTackles:
                return "NFLMiscAssistedTackles";
            case TypeValueKnownValues.Value_NFLMiscCombinedTackles:
                return "NFLMiscCombinedTackles";
            case TypeValueKnownValues.Value_NFLMiscForcedFumbles:
                return "NFLMiscForcedFumbles";
            case TypeValueKnownValues.Value_NFLMiscFumblesRecovered:
                return "NFLMiscFumblesRecovered";
            case TypeValueKnownValues.Value_NFLMiscTackles:
                return "NFLMiscTackles";
            case TypeValueKnownValues.Value_NFLPassesDefended:
                return "NFLPassesDefended";
            case TypeValueKnownValues.Value_NFLQuarterbackHits:
                return "NFLQuarterbackHits";
            case TypeValueKnownValues.Value_NFLSacks:
                return "NFLSacks";
            case TypeValueKnownValues.Value_NFLSackYards:
                return "NFLSackYards";
            case TypeValueKnownValues.Value_NFLSafeties:
                return "NFLSafeties";
            case TypeValueKnownValues.Value_NFLSpecialTeamsAssistedTackles:
                return "NFLSpecialTeamsAssistedTackles";
            case TypeValueKnownValues.Value_NFLSpecialTeamsCombinedTackles:
                return "NFLSpecialTeamsCombinedTackles";
            case TypeValueKnownValues.Value_NFLSpecialTeamsForcedFumbles:
                return "NFLSpecialTeamsForcedFumbles";
            case TypeValueKnownValues.Value_NFLSpecialTeamsFumblesRecovered:
                return "NFLSpecialTeamsFumblesRecovered";
            case TypeValueKnownValues.Value_NFLSpecialTeamsTotalTackles:
                return "NFLSpecialTeamsTotalTackles";
            case TypeValueKnownValues.Value_NFLTacklesAssisted:
                return "NFLTacklesAssisted";
            case TypeValueKnownValues.Value_NFLTacklesCombined:
                return "NFLTacklesCombined";
            case TypeValueKnownValues.Value_NFLTacklesForLoss:
                return "NFLTacklesForLoss";
            case TypeValueKnownValues.Value_NFLTackles:
                return "NFLTackles";
            case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns10PlusYards:
                return "NFLBlockedFieldGoalReturns10PlusYards";
            case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns20PlusYards:
                return "NFLBlockedFieldGoalReturns20PlusYards";
            case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns30PlusYards:
                return "NFLBlockedFieldGoalReturns30PlusYards";
            case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns40PlusYards:
                return "NFLBlockedFieldGoalReturns40PlusYards";
            case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns50PlusYards:
                return "NFLBlockedFieldGoalReturns50PlusYards";
            case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsAverageReturn:
                return "NFLBlockedFieldGoalReturnsAverageReturn";
            case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsLongestReturn:
                return "NFLBlockedFieldGoalReturnsLongestReturn";
            case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns:
                return "NFLBlockedFieldGoalReturns";
            case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsTotalYards:
                return "NFLBlockedFieldGoalReturnsTotalYards";
            case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsTouchdowns:
                return "NFLBlockedFieldGoalReturnsTouchdowns";
            case TypeValueKnownValues.Value_NFLBlockedPuntReturn10PlusYards:
                return "NFLBlockedPuntReturn10PlusYards";
            case TypeValueKnownValues.Value_NFLBlockedPuntReturn20PlusYards:
                return "NFLBlockedPuntReturn20PlusYards";
            case TypeValueKnownValues.Value_NFLBlockedPuntReturn30PlusYards:
                return "NFLBlockedPuntReturn30PlusYards";
            case TypeValueKnownValues.Value_NFLBlockedPuntReturn40PlusYards:
                return "NFLBlockedPuntReturn40PlusYards";
            case TypeValueKnownValues.Value_NFLBlockedPuntReturn50PlusYards:
                return "NFLBlockedPuntReturn50PlusYards";
            case TypeValueKnownValues.Value_NFLBlockedPuntReturnsAverageReturn:
                return "NFLBlockedPuntReturnsAverageReturn";
            case TypeValueKnownValues.Value_NFLBlockedPuntReturnsLongestReturn:
                return "NFLBlockedPuntReturnsLongestReturn";
            case TypeValueKnownValues.Value_NFLBlockedPuntReturns:
                return "NFLBlockedPuntReturns";
            case TypeValueKnownValues.Value_NFLBlockedPuntReturnsTotalYards:
                return "NFLBlockedPuntReturnsTotalYards";
            case TypeValueKnownValues.Value_NFLBlockedPuntReturnsTouchdowns:
                return "NFLBlockedPuntReturnsTouchdowns";
            case TypeValueKnownValues.Value_NFLExtraPointsAttempted:
                return "NFLExtraPointsAttempted";
            case TypeValueKnownValues.Value_NFLExtraPointsAttemptedKicking:
                return "NFLExtraPointsAttemptedKicking";
            case TypeValueKnownValues.Value_NFLExtraPointsAttempted2PointConversion:
                return "NFLExtraPointsAttempted2PointConversion";
            case TypeValueKnownValues.Value_NFLExtraPointsBlocked:
                return "NFLExtraPointsBlocked";
            case TypeValueKnownValues.Value_NFLExtraPointsMade:
                return "NFLExtraPointsMade";
            case TypeValueKnownValues.Value_NFLExtraPointsMadeKicking:
                return "NFLExtraPointsMadeKicking";
            case TypeValueKnownValues.Value_NFLExtraPointsMade2PointConversion:
                return "NFLExtraPointsMade2PointConversion";
            case TypeValueKnownValues.Value_NFLExtraPointsPerc:
                return "NFLExtraPointsPerc";
            case TypeValueKnownValues.Value_NFLFieldGoalReturns10PlusYards:
                return "NFLFieldGoalReturns10PlusYards";
            case TypeValueKnownValues.Value_NFLFieldGoalReturns20PlusYards:
                return "NFLFieldGoalReturns20PlusYards";
            case TypeValueKnownValues.Value_NFLFieldGoalReturns30PlusYards:
                return "NFLFieldGoalReturns30PlusYards";
            case TypeValueKnownValues.Value_NFLFieldGoalReturns40PlusYards:
                return "NFLFieldGoalReturns40PlusYards";
            case TypeValueKnownValues.Value_NFLFieldGoalReturns50PlusYards:
                return "NFLFieldGoalReturns50PlusYards";
            case TypeValueKnownValues.Value_NFLFieldGoalReturnsAverageReturn:
                return "NFLFieldGoalReturnsAverageReturn";
            case TypeValueKnownValues.Value_NFLFieldGoalReturnsLongestReturn:
                return "NFLFieldGoalReturnsLongestReturn";
            case TypeValueKnownValues.Value_NFLFieldGoalReturns:
                return "NFLFieldGoalReturns";
            case TypeValueKnownValues.Value_NFLFieldGoalReturnsTotalYards:
                return "NFLFieldGoalReturnsTotalYards";
            case TypeValueKnownValues.Value_NFLFieldGoalReturnsTouchdowns:
                return "NFLFieldGoalReturnsTouchdowns";
            case TypeValueKnownValues.Value_NFLFieldGoalsAttempted:
                return "NFLFieldGoalsAttempted";
            case TypeValueKnownValues.Value_NFLFieldGoalsAttempted1to19Yards:
                return "NFLFieldGoalsAttempted1to19Yards";
            case TypeValueKnownValues.Value_NFLFieldGoalsAttempted20to29Yards:
                return "NFLFieldGoalsAttempted20to29Yards";
            case TypeValueKnownValues.Value_NFLFieldGoalsAttempted30to39Yards:
                return "NFLFieldGoalsAttempted30to39Yards";
            case TypeValueKnownValues.Value_NFLFieldGoalsAttempted40to49Yards:
                return "NFLFieldGoalsAttempted40to49Yards";
            case TypeValueKnownValues.Value_NFLFieldGoalsAttempted50PlusYards:
                return "NFLFieldGoalsAttempted50PlusYards";
            case TypeValueKnownValues.Value_NFLFieldGoalsBlocked:
                return "NFLFieldGoalsBlocked";
            case TypeValueKnownValues.Value_NFLFieldGoalsLongestMade:
                return "NFLFieldGoalsLongestMade";
            case TypeValueKnownValues.Value_NFLFieldGoalsMade:
                return "NFLFieldGoalsMade";
            case TypeValueKnownValues.Value_NFLFieldGoalsMade1to19Yards:
                return "NFLFieldGoalsMade1to19Yards";
            case TypeValueKnownValues.Value_NFLFieldGoalsMade20to29Yards:
                return "NFLFieldGoalsMade20to29Yards";
            case TypeValueKnownValues.Value_NFLFieldGoalsMade30to39Yards:
                return "NFLFieldGoalsMade30to39Yards";
            case TypeValueKnownValues.Value_NFLFieldGoalsMade40to49Yards:
                return "NFLFieldGoalsMade40to49Yards";
            case TypeValueKnownValues.Value_NFLFieldGoalsMade50PlusYards:
                return "NFLFieldGoalsMade50PlusYards";
            case TypeValueKnownValues.Value_NFLFieldGoalsPerc:
                return "NFLFieldGoalsPerc";
            case TypeValueKnownValues.Value_NFLKickoffReturns10PlusYards:
                return "NFLKickoffReturns10PlusYards";
            case TypeValueKnownValues.Value_NFLKickoffReturns20PlusYards:
                return "NFLKickoffReturns20PlusYards";
            case TypeValueKnownValues.Value_NFLKickoffReturns30PlusYards:
                return "NFLKickoffReturns30PlusYards";
            case TypeValueKnownValues.Value_NFLKickoffReturns40PlusYards:
                return "NFLKickoffReturns40PlusYards";
            case TypeValueKnownValues.Value_NFLKickoffReturns50PlusYards:
                return "NFLKickoffReturns50PlusYards";
            case TypeValueKnownValues.Value_NFLKickoffReturnsAverageRun:
                return "NFLKickoffReturnsAverageRun";
            case TypeValueKnownValues.Value_NFLKickoffReturnsFairCatches:
                return "NFLKickoffReturnsFairCatches";
            case TypeValueKnownValues.Value_NFLKickoffReturnsLongestKickReturn:
                return "NFLKickoffReturnsLongestKickReturn";
            case TypeValueKnownValues.Value_NFLKickoffReturnsReturns:
                return "NFLKickoffReturnsReturns";
            case TypeValueKnownValues.Value_NFLKickoffReturnsTouchdowns:
                return "NFLKickoffReturnsTouchdowns";
            case TypeValueKnownValues.Value_NFLKickoffReturnsYards:
                return "NFLKickoffReturnsYards";
            case TypeValueKnownValues.Value_NFLKickoffsAverageGrossYards:
                return "NFLKickoffsAverageGrossYards";
            case TypeValueKnownValues.Value_NFLKickoffsAverageNetYards:
                return "NFLKickoffsAverageNetYards";
            case TypeValueKnownValues.Value_NFLKickoffsAverageReturnYards:
                return "NFLKickoffsAverageReturnYards";
            case TypeValueKnownValues.Value_NFLKickoffsEndZoneKicks:
                return "NFLKickoffsEndZoneKicks";
            case TypeValueKnownValues.Value_NFLKickoffsGrossYards:
                return "NFLKickoffsGrossYards";
            case TypeValueKnownValues.Value_NFLKickoffsInsideOpponents20YardLine:
                return "NFLKickoffsInsideOpponents20YardLine";
            case TypeValueKnownValues.Value_NFLKickoffsKicks:
                return "NFLKickoffsKicks";
            case TypeValueKnownValues.Value_NFLKickoffsLongestKick:
                return "NFLKickoffsLongestKick";
            case TypeValueKnownValues.Value_NFLKickoffsNetYards:
                return "NFLKickoffsNetYards";
            case TypeValueKnownValues.Value_NFLKickoffsInsideOpponents20YardLinePerc:
                return "NFLKickoffsInsideOpponents20YardLinePerc";
            case TypeValueKnownValues.Value_NFLKickoffsTouchbacksPerc:
                return "NFLKickoffsTouchbacksPerc";
            case TypeValueKnownValues.Value_NFLKickoffsReturned:
                return "NFLKickoffsReturned";
            case TypeValueKnownValues.Value_NFLKickoffsTotalReturnYards:
                return "NFLKickoffsTotalReturnYards";
            case TypeValueKnownValues.Value_NFLKickoffsTouchbacks:
                return "NFLKickoffsTouchbacks";
            case TypeValueKnownValues.Value_NFLPuntReturns10PlusYards:
                return "NFLPuntReturns10PlusYards";
            case TypeValueKnownValues.Value_NFLPuntReturns20PlusYards:
                return "NFLPuntReturns20PlusYards";
            case TypeValueKnownValues.Value_NFLPuntReturns30PlusYards:
                return "NFLPuntReturns30PlusYards";
            case TypeValueKnownValues.Value_NFLPuntReturns40PlusYards:
                return "NFLPuntReturns40PlusYards";
            case TypeValueKnownValues.Value_NFLPuntReturns50PlusYards:
                return "NFLPuntReturns50PlusYards";
            case TypeValueKnownValues.Value_NFLPuntReturnsAverageRun:
                return "NFLPuntReturnsAverageRun";
            case TypeValueKnownValues.Value_NFLPuntReturnsFairCatches:
                return "NFLPuntReturnsFairCatches";
            case TypeValueKnownValues.Value_NFLPuntReturnsLongestKickReturn:
                return "NFLPuntReturnsLongestKickReturn";
            case TypeValueKnownValues.Value_NFLPuntReturns:
                return "NFLPuntReturns";
            case TypeValueKnownValues.Value_NFLPuntReturnsTouchdowns:
                return "NFLPuntReturnsTouchdowns";
            case TypeValueKnownValues.Value_NFLPuntReturnsYards:
                return "NFLPuntReturnsYards";
            case TypeValueKnownValues.Value_NFLPuntingAverageGrossYards:
                return "NFLPuntingAverageGrossYards";
            case TypeValueKnownValues.Value_NFLPuntingAverageNetYards:
                return "NFLPuntingAverageNetYards";
            case TypeValueKnownValues.Value_NFLPuntingAverageReturnYards:
                return "NFLPuntingAverageReturnYards";
            case TypeValueKnownValues.Value_NFLPuntingBlocked:
                return "NFLPuntingBlocked";
            case TypeValueKnownValues.Value_NFLPuntingGrossYards:
                return "NFLPuntingGrossYards";
            case TypeValueKnownValues.Value_NFLPuntingInsideOpponents20YardLine:
                return "NFLPuntingInsideOpponents20YardLine";
            case TypeValueKnownValues.Value_NFLPuntingLongestPunt:
                return "NFLPuntingLongestPunt";
            case TypeValueKnownValues.Value_NFLPuntingNetYards:
                return "NFLPuntingNetYards";
            case TypeValueKnownValues.Value_NFLPuntingInsideOpponents20YardLinePerc:
                return "NFLPuntingInsideOpponents20YardLinePerc";
            case TypeValueKnownValues.Value_NFLPuntingTouchbacksPerc:
                return "NFLPuntingTouchbacksPerc";
            case TypeValueKnownValues.Value_NFLPuntingPunts:
                return "NFLPuntingPunts";
            case TypeValueKnownValues.Value_NFLPuntingReturnYards:
                return "NFLPuntingReturnYards";
            case TypeValueKnownValues.Value_NFLPuntingReturned:
                return "NFLPuntingReturned";
            case TypeValueKnownValues.Value_NFLPuntingTouchbacks:
                return "NFLPuntingTouchbacks";
            case TypeValueKnownValues.Value_NFLFumblesForced:
                return "NFLFumblesForced";
            case TypeValueKnownValues.Value_NFLFumbles:
                return "NFLFumbles";
            case TypeValueKnownValues.Value_NFLFumblesLost:
                return "NFLFumblesLost";
            case TypeValueKnownValues.Value_NFLFumblesOpponentRecovery:
                return "NFLFumblesOpponentRecovery";
            case TypeValueKnownValues.Value_NFLFumblesOpponentTouchdownsFromRecovery:
                return "NFLFumblesOpponentTouchdownsFromRecovery";
            case TypeValueKnownValues.Value_NFLFumblesOutOfBounds:
                return "NFLFumblesOutOfBounds";
            case TypeValueKnownValues.Value_NFLFumblesOwnRecovery:
                return "NFLFumblesOwnRecovery";
            case TypeValueKnownValues.Value_NFLFumblesOwnTouchdownsFromRecovery:
                return "NFLFumblesOwnTouchdownsFromRecovery";
            case TypeValueKnownValues.Value_NFLFumblesYardsFromOpponentRecovery:
                return "NFLFumblesYardsFromOpponentRecovery";
            case TypeValueKnownValues.Value_NFLFumblesYardsFromOwnRecovery:
                return "NFLFumblesYardsFromOwnRecovery";
            case TypeValueKnownValues.Value_NFLPenalties1stDowns:
                return "NFLPenalties1stDowns";
            case TypeValueKnownValues.Value_NFLPenalties:
                return "NFLPenalties";
            case TypeValueKnownValues.Value_NFLPenaltiesYards:
                return "NFLPenaltiesYards";
            case TypeValueKnownValues.Value_NCAAFB3rdDownConversionAttempts:
                return "NCAAFB3rdDownConversionAttempts";
            case TypeValueKnownValues.Value_NCAAFB3rdDownConversions:
                return "NCAAFB3rdDownConversions";
            case TypeValueKnownValues.Value_NCAAFB3rdDownConversionPerc:
                return "NCAAFB3rdDownConversionPerc";
            case TypeValueKnownValues.Value_NCAAFB3rdDownConversionsViaPass:
                return "NCAAFB3rdDownConversionsViaPass";
            case TypeValueKnownValues.Value_NCAAFB3rdDownConversionsViaPenalty:
                return "NCAAFB3rdDownConversionsViaPenalty";
            case TypeValueKnownValues.Value_NCAAFB3rdDownConversionsViaRush:
                return "NCAAFB3rdDownConversionsViaRush";
            case TypeValueKnownValues.Value_NCAAFB4thDownConversionAttempts:
                return "NCAAFB4thDownConversionAttempts";
            case TypeValueKnownValues.Value_NCAAFB4thDownConversions:
                return "NCAAFB4thDownConversions";
            case TypeValueKnownValues.Value_NCAAFB4thDownConversionPerc:
                return "NCAAFB4thDownConversionPerc";
            case TypeValueKnownValues.Value_NCAAFB4thDownConversionsViaPass:
                return "NCAAFB4thDownConversionsViaPass";
            case TypeValueKnownValues.Value_NCAAFB4thDownConversionsViaPenalty:
                return "NCAAFB4thDownConversionsViaPenalty";
            case TypeValueKnownValues.Value_NCAAFB4thDownConversionsViaRush:
                return "NCAAFB4thDownConversionsViaRush";
            case TypeValueKnownValues.Value_NCAAFBGamesPlayed:
                return "NCAAFBGamesPlayed";
            case TypeValueKnownValues.Value_NCAAFBGamesStarted:
                return "NCAAFBGamesStarted";
            case TypeValueKnownValues.Value_NCAAFBGoalEfficiencyAttempts:
                return "NCAAFBGoalEfficiencyAttempts";
            case TypeValueKnownValues.Value_NCAAFBGoalEfficiencyPerc:
                return "NCAAFBGoalEfficiencyPerc";
            case TypeValueKnownValues.Value_NCAAFBGoalEfficiencyTouchdowns:
                return "NCAAFBGoalEfficiencyTouchdowns";
            case TypeValueKnownValues.Value_NCAAFBPassing10PlusYards:
                return "NCAAFBPassing10PlusYards";
            case TypeValueKnownValues.Value_NCAAFBPassing20PlusYards:
                return "NCAAFBPassing20PlusYards";
            case TypeValueKnownValues.Value_NCAAFBPassing30PlusYards:
                return "NCAAFBPassing30PlusYards";
            case TypeValueKnownValues.Value_NCAAFBPassing40PlusYards:
                return "NCAAFBPassing40PlusYards";
            case TypeValueKnownValues.Value_NCAAFBPassing50PlusYards:
                return "NCAAFBPassing50PlusYards";
            case TypeValueKnownValues.Value_NCAAFBPassingAttempts:
                return "NCAAFBPassingAttempts";
            case TypeValueKnownValues.Value_NCAAFBPassingAverageYardsPerCompletion:
                return "NCAAFBPassingAverageYardsPerCompletion";
            case TypeValueKnownValues.Value_NCAAFBPassingAverageYardsPerAttempt:
                return "NCAAFBPassingAverageYardsPerAttempt";
            case TypeValueKnownValues.Value_NCAAFBPassingCompletionPerc:
                return "NCAAFBPassingCompletionPerc";
            case TypeValueKnownValues.Value_NCAAFBPassingCompletions:
                return "NCAAFBPassingCompletions";
            case TypeValueKnownValues.Value_NCAAFBPassing1stDowns:
                return "NCAAFBPassing1stDowns";
            case TypeValueKnownValues.Value_NCAAFBPassingGrossYards:
                return "NCAAFBPassingGrossYards";
            case TypeValueKnownValues.Value_NCAAFBPassingInterceptionPerc:
                return "NCAAFBPassingInterceptionPerc";
            case TypeValueKnownValues.Value_NCAAFBPassingInterceptions:
                return "NCAAFBPassingInterceptions";
            case TypeValueKnownValues.Value_NCAAFBPassingInterceptionsReturnedForTouchdown:
                return "NCAAFBPassingInterceptionsReturnedForTouchdown";
            case TypeValueKnownValues.Value_NCAAFBPassingLongestPass:
                return "NCAAFBPassingLongestPass";
            case TypeValueKnownValues.Value_NCAAFBPassingNetYards:
                return "NCAAFBPassingNetYards";
            case TypeValueKnownValues.Value_NCAAFBPassingRating:
                return "NCAAFBPassingRating";
            case TypeValueKnownValues.Value_NCAAFBPassingRedZoneAttempts:
                return "NCAAFBPassingRedZoneAttempts";
            case TypeValueKnownValues.Value_NCAAFBPassingSacked:
                return "NCAAFBPassingSacked";
            case TypeValueKnownValues.Value_NCAAFBPassingSackedYardsLost:
                return "NCAAFBPassingSackedYardsLost";
            case TypeValueKnownValues.Value_NCAAFBPassingTackledForSafety:
                return "NCAAFBPassingTackledForSafety";
            case TypeValueKnownValues.Value_NCAAFBPassingTotalYards:
                return "NCAAFBPassingTotalYards";
            case TypeValueKnownValues.Value_NCAAFBPassingTouchdownPerc:
                return "NCAAFBPassingTouchdownPerc";
            case TypeValueKnownValues.Value_NCAAFBPassingTouchdowns:
                return "NCAAFBPassingTouchdowns";
            case TypeValueKnownValues.Value_NCAAFBReceiving10PlusYards:
                return "NCAAFBReceiving10PlusYards";
            case TypeValueKnownValues.Value_NCAAFBReceiving20PlusYards:
                return "NCAAFBReceiving20PlusYards";
            case TypeValueKnownValues.Value_NCAAFBReceiving30PlusYards:
                return "NCAAFBReceiving30PlusYards";
            case TypeValueKnownValues.Value_NCAAFBReceiving40PlusYards:
                return "NCAAFBReceiving40PlusYards";
            case TypeValueKnownValues.Value_NCAAFBReceiving50PlusYards:
                return "NCAAFBReceiving50PlusYards";
            case TypeValueKnownValues.Value_NCAAFBReceivingAverageReception:
                return "NCAAFBReceivingAverageReception";
            case TypeValueKnownValues.Value_NCAAFBReceiving1stDowns:
                return "NCAAFBReceiving1stDowns";
            case TypeValueKnownValues.Value_NCAAFBReceivingFumbledOnReception:
                return "NCAAFBReceivingFumbledOnReception";
            case TypeValueKnownValues.Value_NCAAFBReceivingLongestReception:
                return "NCAAFBReceivingLongestReception";
            case TypeValueKnownValues.Value_NCAAFBReceivingReceptions:
                return "NCAAFBReceivingReceptions";
            case TypeValueKnownValues.Value_NCAAFBReceivingRedZoneTargets:
                return "NCAAFBReceivingRedZoneTargets";
            case TypeValueKnownValues.Value_NCAAFBReceivingTargets:
                return "NCAAFBReceivingTargets";
            case TypeValueKnownValues.Value_NCAAFBReceivingTotalYards:
                return "NCAAFBReceivingTotalYards";
            case TypeValueKnownValues.Value_NCAAFBReceivingTouchdowns:
                return "NCAAFBReceivingTouchdowns";
            case TypeValueKnownValues.Value_NCAAFBReceivingYardsAfterCompletion:
                return "NCAAFBReceivingYardsAfterCompletion";
            case TypeValueKnownValues.Value_NCAAFBRedZoneEfficiencyAttempts:
                return "NCAAFBRedZoneEfficiencyAttempts";
            case TypeValueKnownValues.Value_NCAAFBRedZoneEfficiencyConversions:
                return "NCAAFBRedZoneEfficiencyConversions";
            case TypeValueKnownValues.Value_NCAAFBRedZoneEfficiencyPerc:
                return "NCAAFBRedZoneEfficiencyPerc";
            case TypeValueKnownValues.Value_NCAAFBRushing10PlusYards:
                return "NCAAFBRushing10PlusYards";
            case TypeValueKnownValues.Value_NCAAFBRushing20PlusYards:
                return "NCAAFBRushing20PlusYards";
            case TypeValueKnownValues.Value_NCAAFBRushing30PlusYards:
                return "NCAAFBRushing30PlusYards";
            case TypeValueKnownValues.Value_NCAAFBRushing40PlusYards:
                return "NCAAFBRushing40PlusYards";
            case TypeValueKnownValues.Value_NCAAFBRushing50PlusYards:
                return "NCAAFBRushing50PlusYards";
            case TypeValueKnownValues.Value_NCAAFBRushingAttempts:
                return "NCAAFBRushingAttempts";
            case TypeValueKnownValues.Value_NCAAFBRushingAverageRush:
                return "NCAAFBRushingAverageRush";
            case TypeValueKnownValues.Value_NCAAFBRushing1stDownPerc:
                return "NCAAFBRushing1stDownPerc";
            case TypeValueKnownValues.Value_NCAAFBRushing1stDowns:
                return "NCAAFBRushing1stDowns";
            case TypeValueKnownValues.Value_NCAAFBRushingFumbledOnRush:
                return "NCAAFBRushingFumbledOnRush";
            case TypeValueKnownValues.Value_NCAAFBRushingLongestRush:
                return "NCAAFBRushingLongestRush";
            case TypeValueKnownValues.Value_NCAAFBRushingRedZoneAttempts:
                return "NCAAFBRushingRedZoneAttempts";
            case TypeValueKnownValues.Value_NCAAFBRushingTackledForSafety:
                return "NCAAFBRushingTackledForSafety";
            case TypeValueKnownValues.Value_NCAAFBRushingTotalYards:
                return "NCAAFBRushingTotalYards";
            case TypeValueKnownValues.Value_NCAAFBRushingTouchdowns:
                return "NCAAFBRushingTouchdowns";
            case TypeValueKnownValues.Value_NCAAFB1stDowns:
                return "NCAAFB1stDowns";
            case TypeValueKnownValues.Value_NCAAFB2PointConversionsAttempted:
                return "NCAAFB2PointConversionsAttempted";
            case TypeValueKnownValues.Value_NCAAFB2PointConversionsFailed:
                return "NCAAFB2PointConversionsFailed";
            case TypeValueKnownValues.Value_NCAAFB2PointConversionsMade:
                return "NCAAFB2PointConversionsMade";
            case TypeValueKnownValues.Value_NCAAFB2PointConversionsPassing:
                return "NCAAFB2PointConversionsPassing";
            case TypeValueKnownValues.Value_NCAAFB2PointConversionsReceiving:
                return "NCAAFB2PointConversionsReceiving";
            case TypeValueKnownValues.Value_NCAAFB2PointConversionsRushing:
                return "NCAAFB2PointConversionsRushing";
            case TypeValueKnownValues.Value_NCAAFBBlockedKicks:
                return "NCAAFBBlockedKicks";
            case TypeValueKnownValues.Value_NCAAFBForcedFumbles:
                return "NCAAFBForcedFumbles";
            case TypeValueKnownValues.Value_NCAAFBFumblesRecovered:
                return "NCAAFBFumblesRecovered";
            case TypeValueKnownValues.Value_NCAAFBFumblesRecoveredForTouchdowns:
                return "NCAAFBFumblesRecoveredForTouchdowns";
            case TypeValueKnownValues.Value_NCAAFBInterceptions:
                return "NCAAFBInterceptions";
            case TypeValueKnownValues.Value_NCAAFBInterceptionsLongestInterception:
                return "NCAAFBInterceptionsLongestInterception";
            case TypeValueKnownValues.Value_NCAAFBInterceptionsTouchdowns:
                return "NCAAFBInterceptionsTouchdowns";
            case TypeValueKnownValues.Value_NCAAFBInterceptionsYards:
                return "NCAAFBInterceptionsYards";
            case TypeValueKnownValues.Value_NCAAFBMiscAssistedTackles:
                return "NCAAFBMiscAssistedTackles";
            case TypeValueKnownValues.Value_NCAAFBMiscCombinedTackles:
                return "NCAAFBMiscCombinedTackles";
            case TypeValueKnownValues.Value_NCAAFBMiscForcedFumbles:
                return "NCAAFBMiscForcedFumbles";
            case TypeValueKnownValues.Value_NCAAFBMiscFumblesRecovered:
                return "NCAAFBMiscFumblesRecovered";
            case TypeValueKnownValues.Value_NCAAFBMiscTackles:
                return "NCAAFBMiscTackles";
            case TypeValueKnownValues.Value_NCAAFBPassesDefended:
                return "NCAAFBPassesDefended";
            case TypeValueKnownValues.Value_NCAAFBQuarterbackHits:
                return "NCAAFBQuarterbackHits";
            case TypeValueKnownValues.Value_NCAAFBSacks:
                return "NCAAFBSacks";
            case TypeValueKnownValues.Value_NCAAFBSackYards:
                return "NCAAFBSackYards";
            case TypeValueKnownValues.Value_NCAAFBSafeties:
                return "NCAAFBSafeties";
            case TypeValueKnownValues.Value_NCAAFBSpecialTeamsAssistedTackles:
                return "NCAAFBSpecialTeamsAssistedTackles";
            case TypeValueKnownValues.Value_NCAAFBSpecialTeamsCombinedTackles:
                return "NCAAFBSpecialTeamsCombinedTackles";
            case TypeValueKnownValues.Value_NCAAFBSpecialTeamsForcedFumbles:
                return "NCAAFBSpecialTeamsForcedFumbles";
            case TypeValueKnownValues.Value_NCAAFBSpecialTeamsFumblesRecovered:
                return "NCAAFBSpecialTeamsFumblesRecovered";
            case TypeValueKnownValues.Value_NCAAFBSpecialTeamsTotalTackles:
                return "NCAAFBSpecialTeamsTotalTackles";
            case TypeValueKnownValues.Value_NCAAFBTacklesAssisted:
                return "NCAAFBTacklesAssisted";
            case TypeValueKnownValues.Value_NCAAFBTacklesCombined:
                return "NCAAFBTacklesCombined";
            case TypeValueKnownValues.Value_NCAAFBTacklesForLoss:
                return "NCAAFBTacklesForLoss";
            case TypeValueKnownValues.Value_NCAAFBTackles:
                return "NCAAFBTackles";
            case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns10PlusYards:
                return "NCAAFBBlockedFieldGoalReturns10PlusYards";
            case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns20PlusYards:
                return "NCAAFBBlockedFieldGoalReturns20PlusYards";
            case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns30PlusYards:
                return "NCAAFBBlockedFieldGoalReturns30PlusYards";
            case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns40PlusYards:
                return "NCAAFBBlockedFieldGoalReturns40PlusYards";
            case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns50PlusYards:
                return "NCAAFBBlockedFieldGoalReturns50PlusYards";
            case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsAverageReturn:
                return "NCAAFBBlockedFieldGoalReturnsAverageReturn";
            case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsLongestReturn:
                return "NCAAFBBlockedFieldGoalReturnsLongestReturn";
            case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns:
                return "NCAAFBBlockedFieldGoalReturns";
            case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsTotalYards:
                return "NCAAFBBlockedFieldGoalReturnsTotalYards";
            case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsTouchdowns:
                return "NCAAFBBlockedFieldGoalReturnsTouchdowns";
            case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn10PlusYards:
                return "NCAAFBBlockedPuntReturn10PlusYards";
            case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn20PlusYards:
                return "NCAAFBBlockedPuntReturn20PlusYards";
            case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn30PlusYards:
                return "NCAAFBBlockedPuntReturn30PlusYards";
            case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn40PlusYards:
                return "NCAAFBBlockedPuntReturn40PlusYards";
            case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn50PlusYards:
                return "NCAAFBBlockedPuntReturn50PlusYards";
            case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsAverageReturn:
                return "NCAAFBBlockedPuntReturnsAverageReturn";
            case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsLongestReturn:
                return "NCAAFBBlockedPuntReturnsLongestReturn";
            case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturns:
                return "NCAAFBBlockedPuntReturns";
            case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsTotalYards:
                return "NCAAFBBlockedPuntReturnsTotalYards";
            case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsTouchdowns:
                return "NCAAFBBlockedPuntReturnsTouchdowns";
            case TypeValueKnownValues.Value_NCAAFBExtraPointsAttempted:
                return "NCAAFBExtraPointsAttempted";
            case TypeValueKnownValues.Value_NCAAFBExtraPointsAttemptedKicking:
                return "NCAAFBExtraPointsAttemptedKicking";
            case TypeValueKnownValues.Value_NCAAFBExtraPointsAttempted2PointConversion:
                return "NCAAFBExtraPointsAttempted2PointConversion";
            case TypeValueKnownValues.Value_NCAAFBExtraPointsBlocked:
                return "NCAAFBExtraPointsBlocked";
            case TypeValueKnownValues.Value_NCAAFBExtraPointsMade:
                return "NCAAFBExtraPointsMade";
            case TypeValueKnownValues.Value_NCAAFBExtraPointsMadeKicking:
                return "NCAAFBExtraPointsMadeKicking";
            case TypeValueKnownValues.Value_NCAAFBExtraPointsMade2PointConversion:
                return "NCAAFBExtraPointsMade2PointConversion";
            case TypeValueKnownValues.Value_NCAAFBExtraPointsPerc:
                return "NCAAFBExtraPointsPerc";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns10PlusYards:
                return "NCAAFBFieldGoalReturns10PlusYards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns20PlusYards:
                return "NCAAFBFieldGoalReturns20PlusYards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns30PlusYards:
                return "NCAAFBFieldGoalReturns30PlusYards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns40PlusYards:
                return "NCAAFBFieldGoalReturns40PlusYards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns50PlusYards:
                return "NCAAFBFieldGoalReturns50PlusYards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsAverageReturn:
                return "NCAAFBFieldGoalReturnsAverageReturn";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsLongestReturn:
                return "NCAAFBFieldGoalReturnsLongestReturn";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns:
                return "NCAAFBFieldGoalReturns";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsTotalYards:
                return "NCAAFBFieldGoalReturnsTotalYards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsTouchdowns:
                return "NCAAFBFieldGoalReturnsTouchdowns";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted:
                return "NCAAFBFieldGoalsAttempted";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted1to19Yards:
                return "NCAAFBFieldGoalsAttempted1to19Yards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted20to29Yards:
                return "NCAAFBFieldGoalsAttempted20to29Yards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted30to39Yards:
                return "NCAAFBFieldGoalsAttempted30to39Yards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted40to49Yards:
                return "NCAAFBFieldGoalsAttempted40to49Yards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted50PlusYards:
                return "NCAAFBFieldGoalsAttempted50PlusYards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalsBlocked:
                return "NCAAFBFieldGoalsBlocked";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalsLongestMade:
                return "NCAAFBFieldGoalsLongestMade";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade:
                return "NCAAFBFieldGoalsMade";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade1to19Yards:
                return "NCAAFBFieldGoalsMade1to19Yards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade20to29Yards:
                return "NCAAFBFieldGoalsMade20to29Yards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade30to39Yards:
                return "NCAAFBFieldGoalsMade30to39Yards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade40to49Yards:
                return "NCAAFBFieldGoalsMade40to49Yards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade50PlusYards:
                return "NCAAFBFieldGoalsMade50PlusYards";
            case TypeValueKnownValues.Value_NCAAFBFieldGoalsPerc:
                return "NCAAFBFieldGoalsPerc";
            case TypeValueKnownValues.Value_NCAAFBKickoffReturns10PlusYards:
                return "NCAAFBKickoffReturns10PlusYards";
            case TypeValueKnownValues.Value_NCAAFBKickoffReturns20PlusYards:
                return "NCAAFBKickoffReturns20PlusYards";
            case TypeValueKnownValues.Value_NCAAFBKickoffReturns30PlusYards:
                return "NCAAFBKickoffReturns30PlusYards";
            case TypeValueKnownValues.Value_NCAAFBKickoffReturns40PlusYards:
                return "NCAAFBKickoffReturns40PlusYards";
            case TypeValueKnownValues.Value_NCAAFBKickoffReturns50PlusYards:
                return "NCAAFBKickoffReturns50PlusYards";
            case TypeValueKnownValues.Value_NCAAFBKickoffReturnsAverageRun:
                return "NCAAFBKickoffReturnsAverageRun";
            case TypeValueKnownValues.Value_NCAAFBKickoffReturnsFairCatches:
                return "NCAAFBKickoffReturnsFairCatches";
            case TypeValueKnownValues.Value_NCAAFBKickoffReturnsLongestKickReturn:
                return "NCAAFBKickoffReturnsLongestKickReturn";
            case TypeValueKnownValues.Value_NCAAFBKickoffReturnsReturns:
                return "NCAAFBKickoffReturnsReturns";
            case TypeValueKnownValues.Value_NCAAFBKickoffReturnsTouchdowns:
                return "NCAAFBKickoffReturnsTouchdowns";
            case TypeValueKnownValues.Value_NCAAFBKickoffReturnsYards:
                return "NCAAFBKickoffReturnsYards";
            case TypeValueKnownValues.Value_NCAAFBKickoffsAverageGrossYards:
                return "NCAAFBKickoffsAverageGrossYards";
            case TypeValueKnownValues.Value_NCAAFBKickoffsAverageNetYards:
                return "NCAAFBKickoffsAverageNetYards";
            case TypeValueKnownValues.Value_NCAAFBKickoffsAverageReturnYards:
                return "NCAAFBKickoffsAverageReturnYards";
            case TypeValueKnownValues.Value_NCAAFBKickoffsEndZoneKicks:
                return "NCAAFBKickoffsEndZoneKicks";
            case TypeValueKnownValues.Value_NCAAFBKickoffsGrossYards:
                return "NCAAFBKickoffsGrossYards";
            case TypeValueKnownValues.Value_NCAAFBKickoffsInsideOpponents20YardLine:
                return "NCAAFBKickoffsInsideOpponents20YardLine";
            case TypeValueKnownValues.Value_NCAAFBKickoffsKicks:
                return "NCAAFBKickoffsKicks";
            case TypeValueKnownValues.Value_NCAAFBKickoffsLongestKick:
                return "NCAAFBKickoffsLongestKick";
            case TypeValueKnownValues.Value_NCAAFBKickoffsNetYards:
                return "NCAAFBKickoffsNetYards";
            case TypeValueKnownValues.Value_NCAAFBKickoffsInsideOpponents20YardLinePerc:
                return "NCAAFBKickoffsInsideOpponents20YardLinePerc";
            case TypeValueKnownValues.Value_NCAAFBKickoffsTouchbacksPerc:
                return "NCAAFBKickoffsTouchbacksPerc";
            case TypeValueKnownValues.Value_NCAAFBKickoffsReturned:
                return "NCAAFBKickoffsReturned";
            case TypeValueKnownValues.Value_NCAAFBKickoffsTotalReturnYards:
                return "NCAAFBKickoffsTotalReturnYards";
            case TypeValueKnownValues.Value_NCAAFBKickoffsTouchbacks:
                return "NCAAFBKickoffsTouchbacks";
            case TypeValueKnownValues.Value_NCAAFBPuntReturns10PlusYards:
                return "NCAAFBPuntReturns10PlusYards";
            case TypeValueKnownValues.Value_NCAAFBPuntReturns20PlusYards:
                return "NCAAFBPuntReturns20PlusYards";
            case TypeValueKnownValues.Value_NCAAFBPuntReturns30PlusYards:
                return "NCAAFBPuntReturns30PlusYards";
            case TypeValueKnownValues.Value_NCAAFBPuntReturns40PlusYards:
                return "NCAAFBPuntReturns40PlusYards";
            case TypeValueKnownValues.Value_NCAAFBPuntReturns50PlusYards:
                return "NCAAFBPuntReturns50PlusYards";
            case TypeValueKnownValues.Value_NCAAFBPuntReturnsAverageRun:
                return "NCAAFBPuntReturnsAverageRun";
            case TypeValueKnownValues.Value_NCAAFBPuntReturnsFairCatches:
                return "NCAAFBPuntReturnsFairCatches";
            case TypeValueKnownValues.Value_NCAAFBPuntReturnsLongestKickReturn:
                return "NCAAFBPuntReturnsLongestKickReturn";
            case TypeValueKnownValues.Value_NCAAFBPuntReturns:
                return "NCAAFBPuntReturns";
            case TypeValueKnownValues.Value_NCAAFBPuntReturnsTouchdowns:
                return "NCAAFBPuntReturnsTouchdowns";
            case TypeValueKnownValues.Value_NCAAFBPuntReturnsYards:
                return "NCAAFBPuntReturnsYards";
            case TypeValueKnownValues.Value_NCAAFBPuntingAverageGrossYards:
                return "NCAAFBPuntingAverageGrossYards";
            case TypeValueKnownValues.Value_NCAAFBPuntingAverageNetYards:
                return "NCAAFBPuntingAverageNetYards";
            case TypeValueKnownValues.Value_NCAAFBPuntingAverageReturnYards:
                return "NCAAFBPuntingAverageReturnYards";
            case TypeValueKnownValues.Value_NCAAFBPuntingBlocked:
                return "NCAAFBPuntingBlocked";
            case TypeValueKnownValues.Value_NCAAFBPuntingGrossYards:
                return "NCAAFBPuntingGrossYards";
            case TypeValueKnownValues.Value_NCAAFBPuntingInsideOpponents20YardLine:
                return "NCAAFBPuntingInsideOpponents20YardLine";
            case TypeValueKnownValues.Value_NCAAFBPuntingLongestPunt:
                return "NCAAFBPuntingLongestPunt";
            case TypeValueKnownValues.Value_NCAAFBPuntingNetYards:
                return "NCAAFBPuntingNetYards";
            case TypeValueKnownValues.Value_NCAAFBPuntingInsideOpponents20YardLinePerc:
                return "NCAAFBPuntingInsideOpponents20YardLinePerc";
            case TypeValueKnownValues.Value_NCAAFBPuntingTouchbacksPerc:
                return "NCAAFBPuntingTouchbacksPerc";
            case TypeValueKnownValues.Value_NCAAFBPuntingPunts:
                return "NCAAFBPuntingPunts";
            case TypeValueKnownValues.Value_NCAAFBPuntingReturnYards:
                return "NCAAFBPuntingReturnYards";
            case TypeValueKnownValues.Value_NCAAFBPuntingReturned:
                return "NCAAFBPuntingReturned";
            case TypeValueKnownValues.Value_NCAAFBPuntingTouchbacks:
                return "NCAAFBPuntingTouchbacks";
            case TypeValueKnownValues.Value_NCAAFBFumblesForced:
                return "NCAAFBFumblesForced";
            case TypeValueKnownValues.Value_NCAAFBFumbles:
                return "NCAAFBFumbles";
            case TypeValueKnownValues.Value_NCAAFBFumblesLost:
                return "NCAAFBFumblesLost";
            case TypeValueKnownValues.Value_NCAAFBFumblesOpponentRecovery:
                return "NCAAFBFumblesOpponentRecovery";
            case TypeValueKnownValues.Value_NCAAFBFumblesOpponentTouchdownsFromRecovery:
                return "NCAAFBFumblesOpponentTouchdownsFromRecovery";
            case TypeValueKnownValues.Value_NCAAFBFumblesOutOfBounds:
                return "NCAAFBFumblesOutOfBounds";
            case TypeValueKnownValues.Value_NCAAFBFumblesOwnRecovery:
                return "NCAAFBFumblesOwnRecovery";
            case TypeValueKnownValues.Value_NCAAFBFumblesOwnTouchdownsFromRecovery:
                return "NCAAFBFumblesOwnTouchdownsFromRecovery";
            case TypeValueKnownValues.Value_NCAAFBFumblesYardsFromOpponentRecovery:
                return "NCAAFBFumblesYardsFromOpponentRecovery";
            case TypeValueKnownValues.Value_NCAAFBFumblesYardsFromOwnRecovery:
                return "NCAAFBFumblesYardsFromOwnRecovery";
            case TypeValueKnownValues.Value_NCAAFBPenalties1stDowns:
                return "NCAAFBPenalties1stDowns";
            case TypeValueKnownValues.Value_NCAAFBPenalties:
                return "NCAAFBPenalties";
            case TypeValueKnownValues.Value_NCAAFBPenaltiesYards:
                return "NCAAFBPenaltiesYards";
            case TypeValueKnownValues.Value_NBAAssists:
                return "NBAAssists";
            case TypeValueKnownValues.Value_NBAAssistsPerGame:
                return "NBAAssistsPerGame";
            case TypeValueKnownValues.Value_NBAAssistsToTurnoverRatio:
                return "NBAAssistsToTurnoverRatio";
            case TypeValueKnownValues.Value_NBABlockedAttempts:
                return "NBABlockedAttempts";
            case TypeValueKnownValues.Value_NBABlockedAttemptsPerGame:
                return "NBABlockedAttemptsPerGame";
            case TypeValueKnownValues.Value_NBABlockedShots:
                return "NBABlockedShots";
            case TypeValueKnownValues.Value_NBABlockedShotsPerGame:
                return "NBABlockedShotsPerGame";
            case TypeValueKnownValues.Value_NBACoachTechnicalFouls:
                return "NBACoachTechnicalFouls";
            case TypeValueKnownValues.Value_NBADefensiveRebounds:
                return "NBADefensiveRebounds";
            case TypeValueKnownValues.Value_NBADefensiveReboundsPerGame:
                return "NBADefensiveReboundsPerGame";
            case TypeValueKnownValues.Value_NBAEjections:
                return "NBAEjections";
            case TypeValueKnownValues.Value_NBAFastBreakPoints:
                return "NBAFastBreakPoints";
            case TypeValueKnownValues.Value_NBAFastBreakPointsPerGame:
                return "NBAFastBreakPointsPerGame";
            case TypeValueKnownValues.Value_NBAFieldGoalAttempts:
                return "NBAFieldGoalAttempts";
            case TypeValueKnownValues.Value_NBAFieldGoalAttemptsPerGame:
                return "NBAFieldGoalAttemptsPerGame";
            case TypeValueKnownValues.Value_NBAFieldGoalPercentage:
                return "NBAFieldGoalPercentage";
            case TypeValueKnownValues.Value_NBAFieldGoalsMade:
                return "NBAFieldGoalsMade";
            case TypeValueKnownValues.Value_NBAFieldGoalsMadePerGame:
                return "NBAFieldGoalsMadePerGame";
            case TypeValueKnownValues.Value_NBAFlagrantFouls:
                return "NBAFlagrantFouls";
            case TypeValueKnownValues.Value_NBAFlagrantFoulsPerGame:
                return "NBAFlagrantFoulsPerGame";
            case TypeValueKnownValues.Value_NBAFreeThrowAttempts:
                return "NBAFreeThrowAttempts";
            case TypeValueKnownValues.Value_NBAFreeThrowAttemptsPerGame:
                return "NBAFreeThrowAttemptsPerGame";
            case TypeValueKnownValues.Value_NBAFreeThrowPercentage:
                return "NBAFreeThrowPercentage";
            case TypeValueKnownValues.Value_NBAFreeThrowsMade:
                return "NBAFreeThrowsMade";
            case TypeValueKnownValues.Value_NBAFreeThrowsMadePerGame:
                return "NBAFreeThrowsMadePerGame";
            case TypeValueKnownValues.Value_NBAGamesPlayed:
                return "NBAGamesPlayed";
            case TypeValueKnownValues.Value_NBAGamesStarted:
                return "NBAGamesStarted";
            case TypeValueKnownValues.Value_NBAMinutesPlayed:
                return "NBAMinutesPlayed";
            case TypeValueKnownValues.Value_NBAMinutesPlayedPerGame:
                return "NBAMinutesPlayedPerGame";
            case TypeValueKnownValues.Value_NBAOffensiveRebounds:
                return "NBAOffensiveRebounds";
            case TypeValueKnownValues.Value_NBAOffensiveReboundsPerGame:
                return "NBAOffensiveReboundsPerGame";
            case TypeValueKnownValues.Value_NBAPersonalFouls:
                return "NBAPersonalFouls";
            case TypeValueKnownValues.Value_NBAPersonalFoulsPerGame:
                return "NBAPersonalFoulsPerGame";
            case TypeValueKnownValues.Value_NBAPoints:
                return "NBAPoints";
            case TypeValueKnownValues.Value_NBAPointsPerGame:
                return "NBAPointsPerGame";
            case TypeValueKnownValues.Value_NBAPointsInPaint:
                return "NBAPointsInPaint";
            case TypeValueKnownValues.Value_NBAPointsInPaintPerGame:
                return "NBAPointsInPaintPerGame";
            case TypeValueKnownValues.Value_NBAPointsOffTurnovers:
                return "NBAPointsOffTurnovers";
            case TypeValueKnownValues.Value_NBAPointsOffTurnoversPerGame:
                return "NBAPointsOffTurnoversPerGame";
            case TypeValueKnownValues.Value_NBARebounds:
                return "NBARebounds";
            case TypeValueKnownValues.Value_NBAReboundsPerGame:
                return "NBAReboundsPerGame";
            case TypeValueKnownValues.Value_NBASecondChancePoints:
                return "NBASecondChancePoints";
            case TypeValueKnownValues.Value_NBASecondChancePointsPerGame:
                return "NBASecondChancePointsPerGame";
            case TypeValueKnownValues.Value_NBASteals:
                return "NBASteals";
            case TypeValueKnownValues.Value_NBAStealsPerGame:
                return "NBAStealsPerGame";
            case TypeValueKnownValues.Value_NBATeamTechnicalFouls:
                return "NBATeamTechnicalFouls";
            case TypeValueKnownValues.Value_NBAPlayerTechnicalFouls:
                return "NBAPlayerTechnicalFouls";
            case TypeValueKnownValues.Value_NBAThreePointAttempts:
                return "NBAThreePointAttempts";
            case TypeValueKnownValues.Value_NBAThreePointAttemptsPerGame:
                return "NBAThreePointAttemptsPerGame";
            case TypeValueKnownValues.Value_NBAThreePointPercentage:
                return "NBAThreePointPercentage";
            case TypeValueKnownValues.Value_NBAThreePointsMade:
                return "NBAThreePointsMade";
            case TypeValueKnownValues.Value_NBAThreePointsMadePerGame:
                return "NBAThreePointsMadePerGame";
            case TypeValueKnownValues.Value_NBATurnovers:
                return "NBATurnovers";
            case TypeValueKnownValues.Value_NBATurnoversPerGame:
                return "NBATurnoversPerGame";
            case TypeValueKnownValues.Value_NBATwoPointAttempts:
                return "NBATwoPointAttempts";
            case TypeValueKnownValues.Value_NBATwoPointAttemptsPerGame:
                return "NBATwoPointAttemptsPerGame";
            case TypeValueKnownValues.Value_NBATwoPointPercentage:
                return "NBATwoPointPercentage";
            case TypeValueKnownValues.Value_NBATwoPointsMade:
                return "NBATwoPointsMade";
            case TypeValueKnownValues.Value_NBATwoPointsMadePerGame:
                return "NBATwoPointsMadePerGame";
            case TypeValueKnownValues.Value_NCAAMBAssists:
                return "NCAAMBAssists";
            case TypeValueKnownValues.Value_NCAAMBAssistsPerGame:
                return "NCAAMBAssistsPerGame";
            case TypeValueKnownValues.Value_NCAAMBAssistsToTurnoverRatio:
                return "NCAAMBAssistsToTurnoverRatio";
            case TypeValueKnownValues.Value_NCAAMBBlockedAttempts:
                return "NCAAMBBlockedAttempts";
            case TypeValueKnownValues.Value_NCAAMBBlockedAttemptsPerGame:
                return "NCAAMBBlockedAttemptsPerGame";
            case TypeValueKnownValues.Value_NCAAMBBlockedShots:
                return "NCAAMBBlockedShots";
            case TypeValueKnownValues.Value_NCAAMBBlockedShotsPerGame:
                return "NCAAMBBlockedShotsPerGame";
            case TypeValueKnownValues.Value_NCAAMBCoachTechnicalFouls:
                return "NCAAMBCoachTechnicalFouls";
            case TypeValueKnownValues.Value_NCAAMBDefensiveRebounds:
                return "NCAAMBDefensiveRebounds";
            case TypeValueKnownValues.Value_NCAAMBDefensiveReboundsPerGame:
                return "NCAAMBDefensiveReboundsPerGame";
            case TypeValueKnownValues.Value_NCAAMBEjections:
                return "NCAAMBEjections";
            case TypeValueKnownValues.Value_NCAAMBFastBreakPoints:
                return "NCAAMBFastBreakPoints";
            case TypeValueKnownValues.Value_NCAAMBFastBreakPointsPerGame:
                return "NCAAMBFastBreakPointsPerGame";
            case TypeValueKnownValues.Value_NCAAMBFieldGoalAttempts:
                return "NCAAMBFieldGoalAttempts";
            case TypeValueKnownValues.Value_NCAAMBFieldGoalAttemptsPerGame:
                return "NCAAMBFieldGoalAttemptsPerGame";
            case TypeValueKnownValues.Value_NCAAMBFieldGoalPercentage:
                return "NCAAMBFieldGoalPercentage";
            case TypeValueKnownValues.Value_NCAAMBFieldGoalsMade:
                return "NCAAMBFieldGoalsMade";
            case TypeValueKnownValues.Value_NCAAMBFieldGoalsMadePerGame:
                return "NCAAMBFieldGoalsMadePerGame";
            case TypeValueKnownValues.Value_NCAAMBFlagrantFouls:
                return "NCAAMBFlagrantFouls";
            case TypeValueKnownValues.Value_NCAAMBFlagrantFoulsPerGame:
                return "NCAAMBFlagrantFoulsPerGame";
            case TypeValueKnownValues.Value_NCAAMBFreeThrowAttempts:
                return "NCAAMBFreeThrowAttempts";
            case TypeValueKnownValues.Value_NCAAMBFreeThrowAttemptsPerGame:
                return "NCAAMBFreeThrowAttemptsPerGame";
            case TypeValueKnownValues.Value_NCAAMBFreeThrowPercentage:
                return "NCAAMBFreeThrowPercentage";
            case TypeValueKnownValues.Value_NCAAMBFreeThrowsMade:
                return "NCAAMBFreeThrowsMade";
            case TypeValueKnownValues.Value_NCAAMBFreeThrowsMadePerGame:
                return "NCAAMBFreeThrowsMadePerGame";
            case TypeValueKnownValues.Value_NCAAMBGamesPlayed:
                return "NCAAMBGamesPlayed";
            case TypeValueKnownValues.Value_NCAAMBGamesStarted:
                return "NCAAMBGamesStarted";
            case TypeValueKnownValues.Value_NCAAMBMinutesPlayed:
                return "NCAAMBMinutesPlayed";
            case TypeValueKnownValues.Value_NCAAMBMinutesPlayedPerGame:
                return "NCAAMBMinutesPlayedPerGame";
            case TypeValueKnownValues.Value_NCAAMBOffensiveRebounds:
                return "NCAAMBOffensiveRebounds";
            case TypeValueKnownValues.Value_NCAAMBOffensiveReboundsPerGame:
                return "NCAAMBOffensiveReboundsPerGame";
            case TypeValueKnownValues.Value_NCAAMBPersonalFouls:
                return "NCAAMBPersonalFouls";
            case TypeValueKnownValues.Value_NCAAMBPersonalFoulsPerGame:
                return "NCAAMBPersonalFoulsPerGame";
            case TypeValueKnownValues.Value_NCAAMBPoints:
                return "NCAAMBPoints";
            case TypeValueKnownValues.Value_NCAAMBPointsPerGame:
                return "NCAAMBPointsPerGame";
            case TypeValueKnownValues.Value_NCAAMBPointsInPaint:
                return "NCAAMBPointsInPaint";
            case TypeValueKnownValues.Value_NCAAMBPointsInPaintPerGame:
                return "NCAAMBPointsInPaintPerGame";
            case TypeValueKnownValues.Value_NCAAMBPointsOffTurnovers:
                return "NCAAMBPointsOffTurnovers";
            case TypeValueKnownValues.Value_NCAAMBPointsOffTurnoversPerGame:
                return "NCAAMBPointsOffTurnoversPerGame";
            case TypeValueKnownValues.Value_NCAAMBRebounds:
                return "NCAAMBRebounds";
            case TypeValueKnownValues.Value_NCAAMBReboundsPerGame:
                return "NCAAMBReboundsPerGame";
            case TypeValueKnownValues.Value_NCAAMBSecondChancePoints:
                return "NCAAMBSecondChancePoints";
            case TypeValueKnownValues.Value_NCAAMBSecondChancePointsPerGame:
                return "NCAAMBSecondChancePointsPerGame";
            case TypeValueKnownValues.Value_NCAAMBSteals:
                return "NCAAMBSteals";
            case TypeValueKnownValues.Value_NCAAMBStealsPerGame:
                return "NCAAMBStealsPerGame";
            case TypeValueKnownValues.Value_NCAAMBTeamTechnicalFouls:
                return "NCAAMBTeamTechnicalFouls";
            case TypeValueKnownValues.Value_NCAAMBPlayerTechnicalFouls:
                return "NCAAMBPlayerTechnicalFouls";
            case TypeValueKnownValues.Value_NCAAMBThreePointAttempts:
                return "NCAAMBThreePointAttempts";
            case TypeValueKnownValues.Value_NCAAMBThreePointAttemptsPerGame:
                return "NCAAMBThreePointAttemptsPerGame";
            case TypeValueKnownValues.Value_NCAAMBThreePointPercentage:
                return "NCAAMBThreePointPercentage";
            case TypeValueKnownValues.Value_NCAAMBThreePointsMade:
                return "NCAAMBThreePointsMade";
            case TypeValueKnownValues.Value_NCAAMBThreePointsMadePerGame:
                return "NCAAMBThreePointsMadePerGame";
            case TypeValueKnownValues.Value_NCAAMBTurnovers:
                return "NCAAMBTurnovers";
            case TypeValueKnownValues.Value_NCAAMBTurnoversPerGame:
                return "NCAAMBTurnoversPerGame";
            case TypeValueKnownValues.Value_NCAAMBTwoPointAttempts:
                return "NCAAMBTwoPointAttempts";
            case TypeValueKnownValues.Value_NCAAMBTwoPointAttemptsPerGame:
                return "NCAAMBTwoPointAttemptsPerGame";
            case TypeValueKnownValues.Value_NCAAMBTwoPointPercentage:
                return "NCAAMBTwoPointPercentage";
            case TypeValueKnownValues.Value_NCAAMBTwoPointsMade:
                return "NCAAMBTwoPointsMade";
            case TypeValueKnownValues.Value_NCAAMBTwoPointsMadePerGame:
                return "NCAAMBTwoPointsMadePerGame";
            case TypeValueKnownValues.Value_SoccerBallPossessions:
                return "SoccerBallPossessions";
            case TypeValueKnownValues.Value_SoccerCardsGiven:
                return "SoccerCardsGiven";
            case TypeValueKnownValues.Value_SoccerCornerKicks:
                return "SoccerCornerKicks";
            case TypeValueKnownValues.Value_SoccerFreeKicks:
                return "SoccerFreeKicks";
            case TypeValueKnownValues.Value_SoccerGoalAttempts:
                return "SoccerGoalAttempts";
            case TypeValueKnownValues.Value_SoccerGoalsByFoot:
                return "SoccerGoalsByFoot";
            case TypeValueKnownValues.Value_SoccerGoalsByHeaders:
                return "SoccerGoalsByHeaders";
            case TypeValueKnownValues.Value_SoccerGoalsByTime00To15:
                return "SoccerGoalsByTime00To15";
            case TypeValueKnownValues.Value_SoccerGoalsByTime16To30:
                return "SoccerGoalsByTime16To30";
            case TypeValueKnownValues.Value_SoccerGoalsByTime31To45:
                return "SoccerGoalsByTime31To45";
            case TypeValueKnownValues.Value_SoccerGoalsByTime46To60:
                return "SoccerGoalsByTime46To60";
            case TypeValueKnownValues.Value_SoccerGoalsByTime61To75:
                return "SoccerGoalsByTime61To75";
            case TypeValueKnownValues.Value_SoccerGoalsByTime76To90:
                return "SoccerGoalsByTime76To90";
            case TypeValueKnownValues.Value_SoccerGoalsConceded:
                return "SoccerGoalsConceded";
            case TypeValueKnownValues.Value_SoccerGoalsConcededByTime00To15:
                return "SoccerGoalsConcededByTime00To15";
            case TypeValueKnownValues.Value_SoccerGoalsConcededByTime16To30:
                return "SoccerGoalsConcededByTime16To30";
            case TypeValueKnownValues.Value_SoccerGoalsConcededByTime31To45:
                return "SoccerGoalsConcededByTime31To45";
            case TypeValueKnownValues.Value_SoccerGoalsConcededByTime46To60:
                return "SoccerGoalsConcededByTime46To60";
            case TypeValueKnownValues.Value_SoccerGoalsConcededByTime61To75:
                return "SoccerGoalsConcededByTime61To75";
            case TypeValueKnownValues.Value_SoccerGoalsConcededByTime76To90:
                return "SoccerGoalsConcededByTime76To90";
            case TypeValueKnownValues.Value_SoccerGoalsScored:
                return "SoccerGoalsScored";
            case TypeValueKnownValues.Value_SoccerMatchesPlayed:
                return "SoccerMatchesPlayed";
            case TypeValueKnownValues.Value_SoccerOffsides:
                return "SoccerOffsides";
            case TypeValueKnownValues.Value_SoccerOwnGoals:
                return "SoccerOwnGoals";
            case TypeValueKnownValues.Value_SoccerShotsBlocked:
                return "SoccerShotsBlocked";
            case TypeValueKnownValues.Value_SoccerShotsOffGoal:
                return "SoccerShotsOffGoal";
            case TypeValueKnownValues.Value_SoccerShotsOnGoal:
                return "SoccerShotsOnGoal";
            case TypeValueKnownValues.Value_SoccerSubstitutedIn:
                return "SoccerSubstitutedIn";
            case TypeValueKnownValues.Value_SoccerSubstitutedOut:
                return "SoccerSubstitutedOut";
            default:
                Debug.Assert(false);
                return null;
          }
      }

    private bool flagHasValue;
    private TypeValue storeValue;


    private void  fromJSONValue(JSONValue json_value, bool ignore_extras)
      {
        Debug.Assert(json_value != null);
        JSONStringValue json_string = json_value.string_value();
        if (json_string == null)
            throw new Exception("The value for field Value of SportsStatsTypeJSON is not a string.");
        TypeValue the_open_enum = new TypeValue();
        switch (json_string.getData()[0])
          {
            case 'M':
                if (String.Compare(json_string.getData(), 1, "LB", 0, 2, false) == 0)
                  {
                    switch (json_string.getData()[3])
                      {
                        case 'B':
                            if (String.Compare(json_string.getData(), 4, "aserunning", 0, 10, false) == 0)
                              {
                                switch (json_string.getData()[14])
                                  {
                                    case 'C':
                                        if ((String.Compare(json_string.getData(), 15, "aughtStealing", 0, 13, false) == 0) && (json_string.getData().Length == 28))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBBaserunningCaughtStealing;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'P':
                                        if ((String.Compare(json_string.getData(), 15, "ickoffs", 0, 7, false) == 0) && (json_string.getData().Length == 22))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBBaserunningPickoffs;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'S':
                                        if (String.Compare(json_string.getData(), 15, "tolenBase", 0, 9, false) == 0)
                                          {
                                            switch (json_string.getData()[24])
                                              {
                                                case 'P':
                                                    if ((String.Compare(json_string.getData(), 25, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 28))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBBaserunningStolenBasePerc;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 's':
                                                    if (json_string.getData().Length == 25)
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBBaserunningStolenBases;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'F':
                            if (String.Compare(json_string.getData(), 4, "ielding", 0, 7, false) == 0)
                              {
                                switch (json_string.getData()[11])
                                  {
                                    case 'A':
                                        if ((String.Compare(json_string.getData(), 12, "ssists", 0, 6, false) == 0) && (json_string.getData().Length == 18))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBFieldingAssists;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'C':
                                        if ((String.Compare(json_string.getData(), 12, "ompleteGames", 0, 12, false) == 0) && (json_string.getData().Length == 24))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBFieldingCompleteGames;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'D':
                                        if ((String.Compare(json_string.getData(), 12, "oublePlays", 0, 10, false) == 0) && (json_string.getData().Length == 22))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBFieldingDoublePlays;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'E':
                                        if ((String.Compare(json_string.getData(), 12, "rrors", 0, 5, false) == 0) && (json_string.getData().Length == 17))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBFieldingErrors;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'F':
                                        if ((String.Compare(json_string.getData(), 12, "ieldingPercentage", 0, 17, false) == 0) && (json_string.getData().Length == 29))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBFieldingFieldingPercentage;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'G':
                                        if (String.Compare(json_string.getData(), 12, "ames", 0, 4, false) == 0)
                                          {
                                            switch (json_string.getData()[16])
                                              {
                                                case 'F':
                                                    if ((String.Compare(json_string.getData(), 17, "inished", 0, 7, false) == 0) && (json_string.getData().Length == 24))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBFieldingGamesFinished;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'P':
                                                    if ((String.Compare(json_string.getData(), 17, "layed", 0, 5, false) == 0) && (json_string.getData().Length == 22))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBFieldingGamesPlayed;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'S':
                                                    if ((String.Compare(json_string.getData(), 17, "tarted", 0, 6, false) == 0) && (json_string.getData().Length == 23))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBFieldingGamesStarted;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'P':
                                        switch (json_string.getData()[12])
                                          {
                                            case 'a':
                                                if ((String.Compare(json_string.getData(), 13, "ssedBalls", 0, 9, false) == 0) && (json_string.getData().Length == 22))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBFieldingPassedBalls;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'u':
                                                if ((String.Compare(json_string.getData(), 13, "touts", 0, 5, false) == 0) && (json_string.getData().Length == 18))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBFieldingPutouts;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'R':
                                        if ((String.Compare(json_string.getData(), 12, "angeFactor", 0, 10, false) == 0) && (json_string.getData().Length == 22))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBFieldingRangeFactor;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'T':
                                        switch (json_string.getData()[12])
                                          {
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 13, "talChances", 0, 10, false) == 0) && (json_string.getData().Length == 23))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBFieldingTotalChances;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'r':
                                                if ((String.Compare(json_string.getData(), 13, "iplePlays", 0, 9, false) == 0) && (json_string.getData().Length == 22))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBFieldingTriplePlays;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'H':
                            if (String.Compare(json_string.getData(), 4, "itting", 0, 6, false) == 0)
                              {
                                switch (json_string.getData()[10])
                                  {
                                    case 'A':
                                        if (String.Compare(json_string.getData(), 11, "tBats", 0, 5, false) == 0)
                                          {
                                            if (json_string.getData().Length == 16)
                                              {
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingAtBats;
                                                    goto open_enum_is_done;
                                                  }
                                              }
                                            switch (json_string.getData()[16])
                                              {
                                                case 'P':
                                                    if (String.Compare(json_string.getData(), 17, "er", 0, 2, false) == 0)
                                                      {
                                                        switch (json_string.getData()[19])
                                                          {
                                                            case 'H':
                                                                if ((String.Compare(json_string.getData(), 20, "omeRun", 0, 6, false) == 0) && (json_string.getData().Length == 26))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingAtBatsPerHomeRun;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'S':
                                                                if ((String.Compare(json_string.getData(), 20, "trikeout", 0, 8, false) == 0) && (json_string.getData().Length == 28))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingAtBatsPerStrikeout;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'W':
                                                    if ((String.Compare(json_string.getData(), 17, "ithRunnersInScoringPosition", 0, 27, false) == 0) && (json_string.getData().Length == 44))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingAtBatsWithRunnersInScoringPosition;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'B':
                                        if (String.Compare(json_string.getData(), 11, "a", 0, 1, false) == 0)
                                          {
                                            switch (json_string.getData()[12])
                                              {
                                                case 'l':
                                                    if (String.Compare(json_string.getData(), 13, "ls", 0, 2, false) == 0)
                                                      {
                                                        if (json_string.getData().Length == 15)
                                                          {
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingBalls;
                                                                goto open_enum_is_done;
                                                              }
                                                          }
                                                        switch (json_string.getData()[15])
                                                          {
                                                            case 'I':
                                                                if ((String.Compare(json_string.getData(), 16, "nPlay", 0, 5, false) == 0) && (json_string.getData().Length == 21))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingBallsInPlay;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if (String.Compare(json_string.getData(), 13, "tingAverage", 0, 11, false) == 0)
                                                      {
                                                        if (json_string.getData().Length == 24)
                                                          {
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingBattingAverage;
                                                                goto open_enum_is_done;
                                                              }
                                                          }
                                                        switch (json_string.getData()[24])
                                                          {
                                                            case 'O':
                                                                if ((String.Compare(json_string.getData(), 25, "nBallsInPlay", 0, 12, false) == 0) && (json_string.getData().Length == 37))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingBattingAverageOnBallsInPlay;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'C':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 12, "mpleteGames", 0, 11, false) == 0) && (json_string.getData().Length == 23))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingCompleteGames;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'y':
                                                if ((String.Compare(json_string.getData(), 12, "cles", 0, 4, false) == 0) && (json_string.getData().Length == 16))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingCycles;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'D':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'i':
                                                if ((String.Compare(json_string.getData(), 12, "rtBallsFaced", 0, 12, false) == 0) && (json_string.getData().Length == 24))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingDirtBallsFaced;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 12, "ubles", 0, 5, false) == 0) && (json_string.getData().Length == 17))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingDoubles;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'E':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'a':
                                                if ((String.Compare(json_string.getData(), 12, "rnedRunsScored", 0, 14, false) == 0) && (json_string.getData().Length == 26))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingEarnedRunsScored;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'x':
                                                if ((String.Compare(json_string.getData(), 12, "traBaseHits", 0, 11, false) == 0) && (json_string.getData().Length == 23))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingExtraBaseHits;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'F':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'i':
                                                if ((String.Compare(json_string.getData(), 12, "eldersChoice", 0, 12, false) == 0) && (json_string.getData().Length == 24))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingFieldersChoice;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'l':
                                                if (String.Compare(json_string.getData(), 12, "y", 0, 1, false) == 0)
                                                  {
                                                    switch (json_string.getData()[13])
                                                      {
                                                        case 'B':
                                                            if ((String.Compare(json_string.getData(), 14, "alls", 0, 4, false) == 0) && (json_string.getData().Length == 18))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingFlyBalls;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'O':
                                                            if (String.Compare(json_string.getData(), 14, "uts", 0, 3, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 17)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingFlyOuts;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[17])
                                                                  {
                                                                    case 'I':
                                                                        if ((String.Compare(json_string.getData(), 18, "ntoDoublePlays", 0, 14, false) == 0) && (json_string.getData().Length == 32))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingFlyOutsIntoDoublePlays;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 12, "ulBalls", 0, 7, false) == 0) && (json_string.getData().Length == 19))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingFoulBalls;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'G':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'a':
                                                if (String.Compare(json_string.getData(), 12, "mes", 0, 3, false) == 0)
                                                  {
                                                    switch (json_string.getData()[15])
                                                      {
                                                        case 'F':
                                                            if ((String.Compare(json_string.getData(), 16, "inished", 0, 7, false) == 0) && (json_string.getData().Length == 23))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingGamesFinished;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 16, "layed", 0, 5, false) == 0) && (json_string.getData().Length == 21))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingGamesPlayed;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'S':
                                                            if ((String.Compare(json_string.getData(), 16, "tarted", 0, 6, false) == 0) && (json_string.getData().Length == 22))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingGamesStarted;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'r':
                                                if (String.Compare(json_string.getData(), 12, "ound", 0, 4, false) == 0)
                                                  {
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'B':
                                                            if (String.Compare(json_string.getData(), 17, "all", 0, 3, false) == 0)
                                                              {
                                                                switch (json_string.getData()[20])
                                                                  {
                                                                    case 'T':
                                                                        if ((String.Compare(json_string.getData(), 21, "oFlyBallRatio", 0, 13, false) == 0) && (json_string.getData().Length == 34))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingGroundBallToFlyBallRatio;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 's':
                                                                        if (json_string.getData().Length == 21)
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingGroundBalls;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'O':
                                                            if ((String.Compare(json_string.getData(), 17, "uts", 0, 3, false) == 0) && (json_string.getData().Length == 20))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingGroundOuts;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'e':
                                                            if ((String.Compare(json_string.getData(), 17, "dIntoDoublePlay", 0, 15, false) == 0) && (json_string.getData().Length == 32))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingGroundedIntoDoublePlay;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'H':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'i':
                                                if (String.Compare(json_string.getData(), 12, "t", 0, 1, false) == 0)
                                                  {
                                                    switch (json_string.getData()[13])
                                                      {
                                                        case 'B':
                                                            if ((String.Compare(json_string.getData(), 14, "yPitch", 0, 6, false) == 0) && (json_string.getData().Length == 20))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingHitByPitch;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 's':
                                                            if (json_string.getData().Length == 14)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingHits;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[14])
                                                              {
                                                                case 'W':
                                                                    if ((String.Compare(json_string.getData(), 15, "ithRunnersInScoringPosition", 0, 27, false) == 0) && (json_string.getData().Length == 42))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingHitsWithRunnersInScoringPosition;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 12, "meRuns", 0, 6, false) == 0) && (json_string.getData().Length == 18))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingHomeRuns;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'I':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'n':
                                                if (String.Compare(json_string.getData(), 12, "tentional", 0, 9, false) == 0)
                                                  {
                                                    switch (json_string.getData()[21])
                                                      {
                                                        case 'B':
                                                            if ((String.Compare(json_string.getData(), 22, "alls", 0, 4, false) == 0) && (json_string.getData().Length == 26))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingIntentionalBalls;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'W':
                                                            if ((String.Compare(json_string.getData(), 22, "alks", 0, 4, false) == 0) && (json_string.getData().Length == 26))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingIntentionalWalks;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 's':
                                                if ((String.Compare(json_string.getData(), 12, "olatedPower", 0, 11, false) == 0) && (json_string.getData().Length == 23))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingIsolatedPower;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'L':
                                        if (String.Compare(json_string.getData(), 11, "ine", 0, 3, false) == 0)
                                          {
                                            switch (json_string.getData()[14])
                                              {
                                                case 'D':
                                                    if ((String.Compare(json_string.getData(), 15, "rives", 0, 5, false) == 0) && (json_string.getData().Length == 20))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingLineDrives;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'O':
                                                    if (String.Compare(json_string.getData(), 15, "uts", 0, 3, false) == 0)
                                                      {
                                                        if (json_string.getData().Length == 18)
                                                          {
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingLineOuts;
                                                                goto open_enum_is_done;
                                                              }
                                                          }
                                                        switch (json_string.getData()[18])
                                                          {
                                                            case 'I':
                                                                if ((String.Compare(json_string.getData(), 19, "ntoDoublePlay", 0, 13, false) == 0) && (json_string.getData().Length == 32))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingLineOutsIntoDoublePlay;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'O':
                                        if (String.Compare(json_string.getData(), 11, "nBaseP", 0, 6, false) == 0)
                                          {
                                            switch (json_string.getData()[17])
                                              {
                                                case 'e':
                                                    if ((String.Compare(json_string.getData(), 18, "rc", 0, 2, false) == 0) && (json_string.getData().Length == 20))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingOnBasePerc;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 'l':
                                                    if ((String.Compare(json_string.getData(), 18, "usSluggingPerc", 0, 14, false) == 0) && (json_string.getData().Length == 32))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingOnBasePlusSluggingPerc;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'P':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'i':
                                                if ((String.Compare(json_string.getData(), 12, "tchesFaced", 0, 10, false) == 0) && (json_string.getData().Length == 22))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingPitchesFaced;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'l':
                                                if ((String.Compare(json_string.getData(), 12, "ateAppearances", 0, 14, false) == 0) && (json_string.getData().Length == 26))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingPlateAppearances;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'o':
                                                if (String.Compare(json_string.getData(), 12, "p", 0, 1, false) == 0)
                                                  {
                                                    switch (json_string.getData()[13])
                                                      {
                                                        case 'O':
                                                            if ((String.Compare(json_string.getData(), 14, "uts", 0, 3, false) == 0) && (json_string.getData().Length == 17))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingPopOuts;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'U':
                                                            if ((String.Compare(json_string.getData(), 14, "ps", 0, 2, false) == 0) && (json_string.getData().Length == 16))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingPopUps;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'R':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 12, "achedOnError", 0, 12, false) == 0) && (json_string.getData().Length == 24))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingReachedOnError;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'u':
                                                if (String.Compare(json_string.getData(), 12, "n", 0, 1, false) == 0)
                                                  {
                                                    switch (json_string.getData()[13])
                                                      {
                                                        case 'n':
                                                            if (String.Compare(json_string.getData(), 14, "ersLeftOnBase", 0, 13, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 27)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingRunnersLeftOnBase;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[27])
                                                                  {
                                                                    case 'T':
                                                                        if ((String.Compare(json_string.getData(), 28, "woOutsRunnersInScoringPosition", 0, 30, false) == 0) && (json_string.getData().Length == 58))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 's':
                                                            if (String.Compare(json_string.getData(), 14, "BattedIn", 0, 8, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 22)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingRunsBattedIn;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[22])
                                                                  {
                                                                    case 'W':
                                                                        if ((String.Compare(json_string.getData(), 23, "ithTwoOuts", 0, 10, false) == 0) && (json_string.getData().Length == 33))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingRunsBattedInWithTwoOuts;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'S':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'a':
                                                if (String.Compare(json_string.getData(), 12, "crifice", 0, 7, false) == 0)
                                                  {
                                                    switch (json_string.getData()[19])
                                                      {
                                                        case 'F':
                                                            if ((String.Compare(json_string.getData(), 20, "lys", 0, 3, false) == 0) && (json_string.getData().Length == 23))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingSacrificeFlys;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'H':
                                                            if ((String.Compare(json_string.getData(), 20, "its", 0, 3, false) == 0) && (json_string.getData().Length == 23))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingSacrificeHits;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 12, "condaryAverage", 0, 14, false) == 0) && (json_string.getData().Length == 26))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingSecondaryAverage;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'i':
                                                if ((String.Compare(json_string.getData(), 12, "ngles", 0, 5, false) == 0) && (json_string.getData().Length == 17))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingSingles;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'l':
                                                if ((String.Compare(json_string.getData(), 12, "uggingPerc", 0, 10, false) == 0) && (json_string.getData().Length == 22))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingSluggingPerc;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 't':
                                                if (String.Compare(json_string.getData(), 12, "rike", 0, 4, false) == 0)
                                                  {
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'o':
                                                            if (String.Compare(json_string.getData(), 17, "uts", 0, 3, false) == 0)
                                                              {
                                                                switch (json_string.getData()[20])
                                                                  {
                                                                    case 'L':
                                                                        if ((String.Compare(json_string.getData(), 21, "ooking", 0, 6, false) == 0) && (json_string.getData().Length == 27))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingStrikeoutsLooking;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'S':
                                                                        if ((String.Compare(json_string.getData(), 21, "winging", 0, 7, false) == 0) && (json_string.getData().Length == 28))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingStrikeoutsSwinging;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 's':
                                                            switch (json_string.getData()[17])
                                                              {
                                                                case 'L':
                                                                    if ((String.Compare(json_string.getData(), 18, "ooking", 0, 6, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingStrikesLooking;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'S':
                                                                    if ((String.Compare(json_string.getData(), 18, "winging", 0, 7, false) == 0) && (json_string.getData().Length == 25))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingStrikesSwinging;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'T':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'o':
                                                if (String.Compare(json_string.getData(), 12, "tal", 0, 3, false) == 0)
                                                  {
                                                    switch (json_string.getData()[15])
                                                      {
                                                        case 'B':
                                                            if ((String.Compare(json_string.getData(), 16, "ases", 0, 4, false) == 0) && (json_string.getData().Length == 20))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingTotalBases;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'R':
                                                            if ((String.Compare(json_string.getData(), 16, "unsScored", 0, 9, false) == 0) && (json_string.getData().Length == 25))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingTotalRunsScored;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'S':
                                                            if (String.Compare(json_string.getData(), 16, "trike", 0, 5, false) == 0)
                                                              {
                                                                switch (json_string.getData()[21])
                                                                  {
                                                                    case 'o':
                                                                        if ((String.Compare(json_string.getData(), 22, "uts", 0, 3, false) == 0) && (json_string.getData().Length == 25))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingTotalStrikeouts;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 's':
                                                                        if (json_string.getData().Length == 22)
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingTotalStrikes;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'r':
                                                if ((String.Compare(json_string.getData(), 12, "iples", 0, 5, false) == 0) && (json_string.getData().Length == 17))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingTriples;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'U':
                                        if ((String.Compare(json_string.getData(), 11, "nearnedRunsScored", 0, 17, false) == 0) && (json_string.getData().Length == 28))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingUnearnedRunsScored;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'W':
                                        if (String.Compare(json_string.getData(), 11, "alks", 0, 4, false) == 0)
                                          {
                                            if (json_string.getData().Length == 15)
                                              {
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingWalks;
                                                    goto open_enum_is_done;
                                                  }
                                              }
                                            switch (json_string.getData()[15])
                                              {
                                                case 'P':
                                                    if (String.Compare(json_string.getData(), 16, "er", 0, 2, false) == 0)
                                                      {
                                                        switch (json_string.getData()[18])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(json_string.getData(), 19, "laceAppearance", 0, 14, false) == 0) && (json_string.getData().Length == 33))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingWalksPerPlaceAppearance;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'S':
                                                                if ((String.Compare(json_string.getData(), 19, "trikeout", 0, 8, false) == 0) && (json_string.getData().Length == 27))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBHittingWalksPerStrikeout;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'P':
                            if (String.Compare(json_string.getData(), 4, "itching", 0, 7, false) == 0)
                              {
                                switch (json_string.getData()[11])
                                  {
                                    case 'B':
                                        switch (json_string.getData()[12])
                                          {
                                            case 'a':
                                                switch (json_string.getData()[13])
                                                  {
                                                    case 'l':
                                                        switch (json_string.getData()[14])
                                                          {
                                                            case 'k':
                                                                if ((String.Compare(json_string.getData(), 15, "s", 0, 1, false) == 0) && (json_string.getData().Length == 16))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingBalks;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'l':
                                                                if ((String.Compare(json_string.getData(), 15, "s", 0, 1, false) == 0) && (json_string.getData().Length == 16))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingBalls;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 't':
                                                        if ((String.Compare(json_string.getData(), 14, "tersFaced", 0, 9, false) == 0) && (json_string.getData().Length == 23))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingBattersFaced;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'l':
                                                if ((String.Compare(json_string.getData(), 13, "ownSaves", 0, 8, false) == 0) && (json_string.getData().Length == 21))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingBlownSaves;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'C':
                                        if ((String.Compare(json_string.getData(), 12, "ompleteGames", 0, 12, false) == 0) && (json_string.getData().Length == 24))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingCompleteGames;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'D':
                                        switch (json_string.getData()[12])
                                          {
                                            case 'i':
                                                if ((String.Compare(json_string.getData(), 13, "rtBallsThrown", 0, 13, false) == 0) && (json_string.getData().Length == 26))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingDirtBallsThrown;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 13, "ublesAllowed", 0, 12, false) == 0) && (json_string.getData().Length == 25))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingDoublesAllowed;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'E':
                                        switch (json_string.getData()[12])
                                          {
                                            case 'a':
                                                if (String.Compare(json_string.getData(), 13, "rnedRun", 0, 7, false) == 0)
                                                  {
                                                    switch (json_string.getData()[20])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(json_string.getData(), 21, "verage", 0, 6, false) == 0) && (json_string.getData().Length == 27))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingEarnedRunAverage;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 's':
                                                            if ((String.Compare(json_string.getData(), 21, "Allowed", 0, 7, false) == 0) && (json_string.getData().Length == 28))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingEarnedRunsAllowed;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'r':
                                                if ((String.Compare(json_string.getData(), 13, "rors", 0, 4, false) == 0) && (json_string.getData().Length == 17))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingErrors;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'F':
                                        switch (json_string.getData()[12])
                                          {
                                            case 'i':
                                                if ((String.Compare(json_string.getData(), 13, "eldersChoice", 0, 12, false) == 0) && (json_string.getData().Length == 25))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingFieldersChoice;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'l':
                                                if (String.Compare(json_string.getData(), 13, "yOuts", 0, 5, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 18)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingFlyOuts;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[18])
                                                      {
                                                        case 'I':
                                                            if ((String.Compare(json_string.getData(), 19, "ntoDoublePlays", 0, 14, false) == 0) && (json_string.getData().Length == 33))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingFlyOutsIntoDoublePlays;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 13, "ulBalls", 0, 7, false) == 0) && (json_string.getData().Length == 20))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingFoulBalls;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'G':
                                        switch (json_string.getData()[12])
                                          {
                                            case 'a':
                                                if (String.Compare(json_string.getData(), 13, "mes", 0, 3, false) == 0)
                                                  {
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'F':
                                                            if ((String.Compare(json_string.getData(), 17, "inished", 0, 7, false) == 0) && (json_string.getData().Length == 24))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingGamesFinished;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 17, "layed", 0, 5, false) == 0) && (json_string.getData().Length == 22))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingGamesPlayed;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'S':
                                                            if ((String.Compare(json_string.getData(), 17, "tarted", 0, 6, false) == 0) && (json_string.getData().Length == 23))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingGamesStarted;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'r':
                                                if (String.Compare(json_string.getData(), 13, "ound", 0, 4, false) == 0)
                                                  {
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'B':
                                                            if ((String.Compare(json_string.getData(), 18, "allToFlyBallRatio", 0, 17, false) == 0) && (json_string.getData().Length == 35))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingGroundBallToFlyBallRatio;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'O':
                                                            if (String.Compare(json_string.getData(), 18, "uts", 0, 3, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 21)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingGroundOuts;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[21])
                                                                  {
                                                                    case 'I':
                                                                        if ((String.Compare(json_string.getData(), 22, "ntoDoublePlays", 0, 14, false) == 0) && (json_string.getData().Length == 36))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingGroundOutsIntoDoublePlays;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'H':
                                        switch (json_string.getData()[12])
                                          {
                                            case 'i':
                                                if (String.Compare(json_string.getData(), 13, "t", 0, 1, false) == 0)
                                                  {
                                                    switch (json_string.getData()[14])
                                                      {
                                                        case 'B':
                                                            if ((String.Compare(json_string.getData(), 15, "atters", 0, 6, false) == 0) && (json_string.getData().Length == 21))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingHitBatters;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 's':
                                                            if ((String.Compare(json_string.getData(), 15, "Allowed", 0, 7, false) == 0) && (json_string.getData().Length == 22))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingHitsAllowed;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'o':
                                                switch (json_string.getData()[13])
                                                  {
                                                    case 'l':
                                                        if ((String.Compare(json_string.getData(), 14, "ds", 0, 2, false) == 0) && (json_string.getData().Length == 16))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingHolds;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'm':
                                                        if ((String.Compare(json_string.getData(), 14, "eRunsAllowed", 0, 12, false) == 0) && (json_string.getData().Length == 26))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingHomeRunsAllowed;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'I':
                                        if (String.Compare(json_string.getData(), 12, "n", 0, 1, false) == 0)
                                          {
                                            switch (json_string.getData()[13])
                                              {
                                                case 'n':
                                                    if (String.Compare(json_string.getData(), 14, "ingsPitched", 0, 11, false) == 0)
                                                      {
                                                        switch (json_string.getData()[25])
                                                          {
                                                            case 'C':
                                                                if ((String.Compare(json_string.getData(), 26, "ompletePartial", 0, 14, false) == 0) && (json_string.getData().Length == 40))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingInningsPitchedCompletePartial;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'T':
                                                                if ((String.Compare(json_string.getData(), 26, "otalOuts", 0, 8, false) == 0) && (json_string.getData().Length == 34))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingInningsPitchedTotalOuts;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 't':
                                                    if (String.Compare(json_string.getData(), 14, "entional", 0, 8, false) == 0)
                                                      {
                                                        switch (json_string.getData()[22])
                                                          {
                                                            case 'B':
                                                                if ((String.Compare(json_string.getData(), 23, "alls", 0, 4, false) == 0) && (json_string.getData().Length == 27))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingIntentionalBalls;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'W':
                                                                if ((String.Compare(json_string.getData(), 23, "alks", 0, 4, false) == 0) && (json_string.getData().Length == 27))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingIntentionalWalks;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'L':
                                        switch (json_string.getData()[12])
                                          {
                                            case 'i':
                                                if (String.Compare(json_string.getData(), 13, "neOuts", 0, 6, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 19)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingLineOuts;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[19])
                                                      {
                                                        case 'I':
                                                            if ((String.Compare(json_string.getData(), 20, "ntoDoublePlays", 0, 14, false) == 0) && (json_string.getData().Length == 34))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingLineOutsIntoDoublePlays;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 13, "sses", 0, 4, false) == 0) && (json_string.getData().Length == 17))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingLosses;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'O':
                                        if (String.Compare(json_string.getData(), 12, "pponent", 0, 7, false) == 0)
                                          {
                                            switch (json_string.getData()[19])
                                              {
                                                case 'R':
                                                    if ((String.Compare(json_string.getData(), 20, "unnersLeftOnBase", 0, 16, false) == 0) && (json_string.getData().Length == 36))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingOpponentRunnersLeftOnBase;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                case 's':
                                                    if ((String.Compare(json_string.getData(), 20, "BattingAverage", 0, 14, false) == 0) && (json_string.getData().Length == 34))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingOpponentsBattingAverage;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                          }
                                        break;
                                    case 'P':
                                        switch (json_string.getData()[12])
                                          {
                                            case 'i':
                                                switch (json_string.getData()[13])
                                                  {
                                                    case 'c':
                                                        if ((String.Compare(json_string.getData(), 14, "koffs", 0, 5, false) == 0) && (json_string.getData().Length == 19))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingPickoffs;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 't':
                                                        if ((String.Compare(json_string.getData(), 14, "chCount", 0, 7, false) == 0) && (json_string.getData().Length == 21))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingPitchCount;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'o':
                                                if ((String.Compare(json_string.getData(), 13, "pOutsForced", 0, 11, false) == 0) && (json_string.getData().Length == 24))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingPopOutsForced;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'Q':
                                        if ((String.Compare(json_string.getData(), 12, "ualityStarts", 0, 12, false) == 0) && (json_string.getData().Length == 24))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingQualityStarts;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'R':
                                        switch (json_string.getData()[12])
                                          {
                                            case 'e':
                                                if ((String.Compare(json_string.getData(), 13, "achedOnError", 0, 12, false) == 0) && (json_string.getData().Length == 25))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingReachedOnError;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'u':
                                                if ((String.Compare(json_string.getData(), 13, "nnersCaughtStealing", 0, 19, false) == 0) && (json_string.getData().Length == 32))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingRunnersCaughtStealing;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'S':
                                        switch (json_string.getData()[12])
                                          {
                                            case 'a':
                                                switch (json_string.getData()[13])
                                                  {
                                                    case 'c':
                                                        if (String.Compare(json_string.getData(), 14, "rifice", 0, 6, false) == 0)
                                                          {
                                                            switch (json_string.getData()[20])
                                                              {
                                                                case 'F':
                                                                    if ((String.Compare(json_string.getData(), 21, "lys", 0, 3, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingSacrificeFlys;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'H':
                                                                    if ((String.Compare(json_string.getData(), 21, "its", 0, 3, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingSacrificeHits;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'v':
                                                        if (String.Compare(json_string.getData(), 14, "e", 0, 1, false) == 0)
                                                          {
                                                            switch (json_string.getData()[15])
                                                              {
                                                                case 'O':
                                                                    if ((String.Compare(json_string.getData(), 16, "pportunities", 0, 12, false) == 0) && (json_string.getData().Length == 28))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingSaveOpportunities;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 's':
                                                                    if (json_string.getData().Length == 16)
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingSaves;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'h':
                                                if ((String.Compare(json_string.getData(), 13, "utouts", 0, 6, false) == 0) && (json_string.getData().Length == 19))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingShutouts;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'i':
                                                if ((String.Compare(json_string.getData(), 13, "nglesAllowed", 0, 12, false) == 0) && (json_string.getData().Length == 25))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingSinglesAllowed;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 't':
                                                switch (json_string.getData()[13])
                                                  {
                                                    case 'o':
                                                        if ((String.Compare(json_string.getData(), 14, "lenBasesAllowed", 0, 15, false) == 0) && (json_string.getData().Length == 29))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingStolenBasesAllowed;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'r':
                                                        if (String.Compare(json_string.getData(), 14, "ike", 0, 3, false) == 0)
                                                          {
                                                            switch (json_string.getData()[17])
                                                              {
                                                                case 'o':
                                                                    if (String.Compare(json_string.getData(), 18, "uts", 0, 3, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[21])
                                                                          {
                                                                            case 'L':
                                                                                if ((String.Compare(json_string.getData(), 22, "ooking", 0, 6, false) == 0) && (json_string.getData().Length == 28))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingStrikeoutsLooking;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'P':
                                                                                if (String.Compare(json_string.getData(), 22, "er", 0, 2, false) == 0)
                                                                                  {
                                                                                    switch (json_string.getData()[24])
                                                                                      {
                                                                                        case '9':
                                                                                            if ((String.Compare(json_string.getData(), 25, "Innings", 0, 7, false) == 0) && (json_string.getData().Length == 32))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingStrikeoutsPer9Innings;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        case 'W':
                                                                                            if ((String.Compare(json_string.getData(), 25, "alk", 0, 3, false) == 0) && (json_string.getData().Length == 28))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingStrikeoutsPerWalk;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 'S':
                                                                                if ((String.Compare(json_string.getData(), 22, "winging", 0, 7, false) == 0) && (json_string.getData().Length == 29))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingStrikeoutsSwinging;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 's':
                                                                    switch (json_string.getData()[18])
                                                                      {
                                                                        case 'L':
                                                                            if ((String.Compare(json_string.getData(), 19, "ooking", 0, 6, false) == 0) && (json_string.getData().Length == 25))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingStrikesLooking;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'S':
                                                                            if ((String.Compare(json_string.getData(), 19, "winging", 0, 7, false) == 0) && (json_string.getData().Length == 26))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingStrikesSwinging;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'T':
                                        switch (json_string.getData()[12])
                                          {
                                            case 'o':
                                                if (String.Compare(json_string.getData(), 13, "tal", 0, 3, false) == 0)
                                                  {
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'B':
                                                            if ((String.Compare(json_string.getData(), 17, "asesAllowed", 0, 11, false) == 0) && (json_string.getData().Length == 28))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingTotalBasesAllowed;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'R':
                                                            if ((String.Compare(json_string.getData(), 17, "unsAllowed", 0, 10, false) == 0) && (json_string.getData().Length == 27))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingTotalRunsAllowed;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'S':
                                                            if (String.Compare(json_string.getData(), 17, "trike", 0, 5, false) == 0)
                                                              {
                                                                switch (json_string.getData()[22])
                                                                  {
                                                                    case 'o':
                                                                        if ((String.Compare(json_string.getData(), 23, "uts", 0, 3, false) == 0) && (json_string.getData().Length == 26))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingTotalStrikeouts;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 's':
                                                                        if (json_string.getData().Length == 23)
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingTotalStrikes;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'r':
                                                if ((String.Compare(json_string.getData(), 13, "iplesAllowed", 0, 12, false) == 0) && (json_string.getData().Length == 25))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingTriplesAllowed;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    case 'U':
                                        if ((String.Compare(json_string.getData(), 12, "nearnedRunsAllowed", 0, 18, false) == 0) && (json_string.getData().Length == 30))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingUnearnedRunsAllowed;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 'W':
                                        switch (json_string.getData()[12])
                                          {
                                            case 'a':
                                                if (String.Compare(json_string.getData(), 13, "lks", 0, 3, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 16)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingWalks;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[16])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 17, "lusHitsPerInningPitched", 0, 23, false) == 0) && (json_string.getData().Length == 40))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingWalksPlusHitsPerInningPitched;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'i':
                                                switch (json_string.getData()[13])
                                                  {
                                                    case 'l':
                                                        if ((String.Compare(json_string.getData(), 14, "dPitches", 0, 8, false) == 0) && (json_string.getData().Length == 22))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingWildPitches;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'n':
                                                        if ((String.Compare(json_string.getData(), 14, "s", 0, 1, false) == 0) && (json_string.getData().Length == 15))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_MLBPitchingWins;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            case 'N':
                switch (json_string.getData()[1])
                  {
                    case 'B':
                        if (String.Compare(json_string.getData(), 2, "A", 0, 1, false) == 0)
                          {
                            switch (json_string.getData()[3])
                              {
                                case 'A':
                                    if (String.Compare(json_string.getData(), 4, "ssists", 0, 6, false) == 0)
                                      {
                                        if (json_string.getData().Length == 10)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBAAssists;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[10])
                                          {
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 11, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 17))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NBAAssistsPerGame;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'T':
                                                if ((String.Compare(json_string.getData(), 11, "oTurnoverRatio", 0, 14, false) == 0) && (json_string.getData().Length == 25))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NBAAssistsToTurnoverRatio;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'B':
                                    if (String.Compare(json_string.getData(), 4, "locked", 0, 6, false) == 0)
                                      {
                                        switch (json_string.getData()[10])
                                          {
                                            case 'A':
                                                if (String.Compare(json_string.getData(), 11, "ttempts", 0, 7, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 18)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NBABlockedAttempts;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[18])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 19, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 25))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NBABlockedAttemptsPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'S':
                                                if (String.Compare(json_string.getData(), 11, "hots", 0, 4, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 15)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NBABlockedShots;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[15])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 16, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 22))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NBABlockedShotsPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'C':
                                    if ((String.Compare(json_string.getData(), 4, "oachTechnicalFouls", 0, 18, false) == 0) && (json_string.getData().Length == 22))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_NBACoachTechnicalFouls;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'D':
                                    if (String.Compare(json_string.getData(), 4, "efensiveRebounds", 0, 16, false) == 0)
                                      {
                                        if (json_string.getData().Length == 20)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBADefensiveRebounds;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[20])
                                          {
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 21, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 27))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NBADefensiveReboundsPerGame;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'E':
                                    if ((String.Compare(json_string.getData(), 4, "jections", 0, 8, false) == 0) && (json_string.getData().Length == 12))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_NBAEjections;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'F':
                                    switch (json_string.getData()[4])
                                      {
                                        case 'a':
                                            if (String.Compare(json_string.getData(), 5, "stBreakPoints", 0, 13, false) == 0)
                                              {
                                                if (json_string.getData().Length == 18)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NBAFastBreakPoints;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[18])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 19, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 25))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBAFastBreakPointsPerGame;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'i':
                                            if (String.Compare(json_string.getData(), 5, "eldGoal", 0, 7, false) == 0)
                                              {
                                                switch (json_string.getData()[12])
                                                  {
                                                    case 'A':
                                                        if (String.Compare(json_string.getData(), 13, "ttempts", 0, 7, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 20)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NBAFieldGoalAttempts;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[20])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 21, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 27))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NBAFieldGoalAttemptsPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 13, "ercentage", 0, 9, false) == 0) && (json_string.getData().Length == 22))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBAFieldGoalPercentage;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 's':
                                                        if (String.Compare(json_string.getData(), 13, "Made", 0, 4, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 17)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NBAFieldGoalsMade;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[17])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 18, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NBAFieldGoalsMadePerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'l':
                                            if (String.Compare(json_string.getData(), 5, "agrantFouls", 0, 11, false) == 0)
                                              {
                                                if (json_string.getData().Length == 16)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NBAFlagrantFouls;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[16])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 17, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 23))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBAFlagrantFoulsPerGame;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'r':
                                            if (String.Compare(json_string.getData(), 5, "eeThrow", 0, 7, false) == 0)
                                              {
                                                switch (json_string.getData()[12])
                                                  {
                                                    case 'A':
                                                        if (String.Compare(json_string.getData(), 13, "ttempts", 0, 7, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 20)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NBAFreeThrowAttempts;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[20])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 21, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 27))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NBAFreeThrowAttemptsPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 13, "ercentage", 0, 9, false) == 0) && (json_string.getData().Length == 22))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBAFreeThrowPercentage;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 's':
                                                        if (String.Compare(json_string.getData(), 13, "Made", 0, 4, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 17)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NBAFreeThrowsMade;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[17])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 18, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NBAFreeThrowsMadePerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'G':
                                    if (String.Compare(json_string.getData(), 4, "ames", 0, 4, false) == 0)
                                      {
                                        switch (json_string.getData()[8])
                                          {
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 9, "layed", 0, 5, false) == 0) && (json_string.getData().Length == 14))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NBAGamesPlayed;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'S':
                                                if ((String.Compare(json_string.getData(), 9, "tarted", 0, 6, false) == 0) && (json_string.getData().Length == 15))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NBAGamesStarted;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'M':
                                    if (String.Compare(json_string.getData(), 4, "inutesPlayed", 0, 12, false) == 0)
                                      {
                                        if (json_string.getData().Length == 16)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBAMinutesPlayed;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[16])
                                          {
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 17, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 23))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NBAMinutesPlayedPerGame;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'O':
                                    if (String.Compare(json_string.getData(), 4, "ffensiveRebounds", 0, 16, false) == 0)
                                      {
                                        if (json_string.getData().Length == 20)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBAOffensiveRebounds;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[20])
                                          {
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 21, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 27))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NBAOffensiveReboundsPerGame;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'P':
                                    switch (json_string.getData()[4])
                                      {
                                        case 'e':
                                            if (String.Compare(json_string.getData(), 5, "rsonalFouls", 0, 11, false) == 0)
                                              {
                                                if (json_string.getData().Length == 16)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NBAPersonalFouls;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[16])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 17, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 23))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBAPersonalFoulsPerGame;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'l':
                                            if ((String.Compare(json_string.getData(), 5, "ayerTechnicalFouls", 0, 18, false) == 0) && (json_string.getData().Length == 23))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NBAPlayerTechnicalFouls;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            if (String.Compare(json_string.getData(), 5, "ints", 0, 4, false) == 0)
                                              {
                                                if (json_string.getData().Length == 9)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NBAPoints;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[9])
                                                  {
                                                    case 'I':
                                                        if (String.Compare(json_string.getData(), 10, "nPaint", 0, 6, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 16)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NBAPointsInPaint;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[16])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 17, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 23))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NBAPointsInPaintPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'O':
                                                        if (String.Compare(json_string.getData(), 10, "ffTurnovers", 0, 11, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 21)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NBAPointsOffTurnovers;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[21])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 22, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 28))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NBAPointsOffTurnoversPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 10, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 16))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBAPointsPerGame;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'R':
                                    if (String.Compare(json_string.getData(), 4, "ebounds", 0, 7, false) == 0)
                                      {
                                        if (json_string.getData().Length == 11)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBARebounds;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[11])
                                          {
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 12, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 18))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NBAReboundsPerGame;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'S':
                                    switch (json_string.getData()[4])
                                      {
                                        case 'e':
                                            if (String.Compare(json_string.getData(), 5, "condChancePoints", 0, 16, false) == 0)
                                              {
                                                if (json_string.getData().Length == 21)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NBASecondChancePoints;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[21])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 22, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 28))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBASecondChancePointsPerGame;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 't':
                                            if (String.Compare(json_string.getData(), 5, "eals", 0, 4, false) == 0)
                                              {
                                                if (json_string.getData().Length == 9)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NBASteals;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[9])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 10, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 16))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBAStealsPerGame;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'T':
                                    switch (json_string.getData()[4])
                                      {
                                        case 'e':
                                            if ((String.Compare(json_string.getData(), 5, "amTechnicalFouls", 0, 16, false) == 0) && (json_string.getData().Length == 21))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NBATeamTechnicalFouls;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'h':
                                            if (String.Compare(json_string.getData(), 5, "reePoint", 0, 8, false) == 0)
                                              {
                                                switch (json_string.getData()[13])
                                                  {
                                                    case 'A':
                                                        if (String.Compare(json_string.getData(), 14, "ttempts", 0, 7, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 21)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NBAThreePointAttempts;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[21])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 22, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 28))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NBAThreePointAttemptsPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 14, "ercentage", 0, 9, false) == 0) && (json_string.getData().Length == 23))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBAThreePointPercentage;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 's':
                                                        if (String.Compare(json_string.getData(), 14, "Made", 0, 4, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 18)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NBAThreePointsMade;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[18])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 19, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 25))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NBAThreePointsMadePerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'u':
                                            if (String.Compare(json_string.getData(), 5, "rnovers", 0, 7, false) == 0)
                                              {
                                                if (json_string.getData().Length == 12)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NBATurnovers;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[12])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 13, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 19))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBATurnoversPerGame;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'w':
                                            if (String.Compare(json_string.getData(), 5, "oPoint", 0, 6, false) == 0)
                                              {
                                                switch (json_string.getData()[11])
                                                  {
                                                    case 'A':
                                                        if (String.Compare(json_string.getData(), 12, "ttempts", 0, 7, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 19)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NBATwoPointAttempts;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[19])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 20, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 26))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NBATwoPointAttemptsPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 12, "ercentage", 0, 9, false) == 0) && (json_string.getData().Length == 21))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NBATwoPointPercentage;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 's':
                                                        if (String.Compare(json_string.getData(), 12, "Made", 0, 4, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 16)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NBATwoPointsMade;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[16])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 17, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 23))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NBATwoPointsMadePerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'C':
                        if (String.Compare(json_string.getData(), 2, "AA", 0, 2, false) == 0)
                          {
                            switch (json_string.getData()[4])
                              {
                                case 'F':
                                    if (String.Compare(json_string.getData(), 5, "B", 0, 1, false) == 0)
                                      {
                                        switch (json_string.getData()[6])
                                          {
                                            case '1':
                                                if ((String.Compare(json_string.getData(), 7, "stDowns", 0, 7, false) == 0) && (json_string.getData().Length == 14))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB1stDowns;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case '2':
                                                if (String.Compare(json_string.getData(), 7, "PointConversions", 0, 16, false) == 0)
                                                  {
                                                    switch (json_string.getData()[23])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(json_string.getData(), 24, "ttempted", 0, 8, false) == 0) && (json_string.getData().Length == 32))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB2PointConversionsAttempted;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'F':
                                                            if ((String.Compare(json_string.getData(), 24, "ailed", 0, 5, false) == 0) && (json_string.getData().Length == 29))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB2PointConversionsFailed;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'M':
                                                            if ((String.Compare(json_string.getData(), 24, "ade", 0, 3, false) == 0) && (json_string.getData().Length == 27))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB2PointConversionsMade;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 24, "assing", 0, 6, false) == 0) && (json_string.getData().Length == 30))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB2PointConversionsPassing;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'R':
                                                            switch (json_string.getData()[24])
                                                              {
                                                                case 'e':
                                                                    if ((String.Compare(json_string.getData(), 25, "ceiving", 0, 7, false) == 0) && (json_string.getData().Length == 32))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB2PointConversionsReceiving;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'u':
                                                                    if ((String.Compare(json_string.getData(), 25, "shing", 0, 5, false) == 0) && (json_string.getData().Length == 30))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB2PointConversionsRushing;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case '3':
                                                if (String.Compare(json_string.getData(), 7, "rdDownConversion", 0, 16, false) == 0)
                                                  {
                                                    switch (json_string.getData()[23])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(json_string.getData(), 24, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 31))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB3rdDownConversionAttempts;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 24, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 27))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB3rdDownConversionPerc;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 's':
                                                            if (json_string.getData().Length == 24)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB3rdDownConversions;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[24])
                                                              {
                                                                case 'V':
                                                                    if (String.Compare(json_string.getData(), 25, "ia", 0, 2, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[27])
                                                                          {
                                                                            case 'P':
                                                                                switch (json_string.getData()[28])
                                                                                  {
                                                                                    case 'a':
                                                                                        if ((String.Compare(json_string.getData(), 29, "ss", 0, 2, false) == 0) && (json_string.getData().Length == 31))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB3rdDownConversionsViaPass;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'e':
                                                                                        if ((String.Compare(json_string.getData(), 29, "nalty", 0, 5, false) == 0) && (json_string.getData().Length == 34))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB3rdDownConversionsViaPenalty;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            case 'R':
                                                                                if ((String.Compare(json_string.getData(), 28, "ush", 0, 3, false) == 0) && (json_string.getData().Length == 31))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB3rdDownConversionsViaRush;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case '4':
                                                if (String.Compare(json_string.getData(), 7, "thDownConversion", 0, 16, false) == 0)
                                                  {
                                                    switch (json_string.getData()[23])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(json_string.getData(), 24, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 31))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB4thDownConversionAttempts;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 24, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 27))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB4thDownConversionPerc;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 's':
                                                            if (json_string.getData().Length == 24)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB4thDownConversions;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[24])
                                                              {
                                                                case 'V':
                                                                    if (String.Compare(json_string.getData(), 25, "ia", 0, 2, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[27])
                                                                          {
                                                                            case 'P':
                                                                                switch (json_string.getData()[28])
                                                                                  {
                                                                                    case 'a':
                                                                                        if ((String.Compare(json_string.getData(), 29, "ss", 0, 2, false) == 0) && (json_string.getData().Length == 31))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB4thDownConversionsViaPass;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'e':
                                                                                        if ((String.Compare(json_string.getData(), 29, "nalty", 0, 5, false) == 0) && (json_string.getData().Length == 34))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB4thDownConversionsViaPenalty;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            case 'R':
                                                                                if ((String.Compare(json_string.getData(), 28, "ush", 0, 3, false) == 0) && (json_string.getData().Length == 31))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFB4thDownConversionsViaRush;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'B':
                                                if (String.Compare(json_string.getData(), 7, "locked", 0, 6, false) == 0)
                                                  {
                                                    switch (json_string.getData()[13])
                                                      {
                                                        case 'F':
                                                            if (String.Compare(json_string.getData(), 14, "ieldGoalReturns", 0, 15, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 29)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[29])
                                                                  {
                                                                    case '1':
                                                                        if ((String.Compare(json_string.getData(), 30, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 40))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns10PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '2':
                                                                        if ((String.Compare(json_string.getData(), 30, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 40))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns20PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '3':
                                                                        if ((String.Compare(json_string.getData(), 30, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 40))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns30PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '4':
                                                                        if ((String.Compare(json_string.getData(), 30, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 40))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns40PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '5':
                                                                        if ((String.Compare(json_string.getData(), 30, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 40))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns50PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'A':
                                                                        if ((String.Compare(json_string.getData(), 30, "verageReturn", 0, 12, false) == 0) && (json_string.getData().Length == 42))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsAverageReturn;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'L':
                                                                        if ((String.Compare(json_string.getData(), 30, "ongestReturn", 0, 12, false) == 0) && (json_string.getData().Length == 42))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsLongestReturn;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'T':
                                                                        if (String.Compare(json_string.getData(), 30, "o", 0, 1, false) == 0)
                                                                          {
                                                                            switch (json_string.getData()[31])
                                                                              {
                                                                                case 't':
                                                                                    if ((String.Compare(json_string.getData(), 32, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 39))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsTotalYards;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                case 'u':
                                                                                    if ((String.Compare(json_string.getData(), 32, "chdowns", 0, 7, false) == 0) && (json_string.getData().Length == 39))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsTouchdowns;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'K':
                                                            if ((String.Compare(json_string.getData(), 14, "icks", 0, 4, false) == 0) && (json_string.getData().Length == 18))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedKicks;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'P':
                                                            if (String.Compare(json_string.getData(), 14, "untReturn", 0, 9, false) == 0)
                                                              {
                                                                switch (json_string.getData()[23])
                                                                  {
                                                                    case '1':
                                                                        if ((String.Compare(json_string.getData(), 24, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn10PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '2':
                                                                        if ((String.Compare(json_string.getData(), 24, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn20PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '3':
                                                                        if ((String.Compare(json_string.getData(), 24, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn30PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '4':
                                                                        if ((String.Compare(json_string.getData(), 24, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn40PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '5':
                                                                        if ((String.Compare(json_string.getData(), 24, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn50PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 's':
                                                                        if (json_string.getData().Length == 24)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedPuntReturns;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[24])
                                                                          {
                                                                            case 'A':
                                                                                if ((String.Compare(json_string.getData(), 25, "verageReturn", 0, 12, false) == 0) && (json_string.getData().Length == 37))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsAverageReturn;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'L':
                                                                                if ((String.Compare(json_string.getData(), 25, "ongestReturn", 0, 12, false) == 0) && (json_string.getData().Length == 37))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsLongestReturn;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'T':
                                                                                if (String.Compare(json_string.getData(), 25, "o", 0, 1, false) == 0)
                                                                                  {
                                                                                    switch (json_string.getData()[26])
                                                                                      {
                                                                                        case 't':
                                                                                            if ((String.Compare(json_string.getData(), 27, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 34))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsTotalYards;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        case 'u':
                                                                                            if ((String.Compare(json_string.getData(), 27, "chdowns", 0, 7, false) == 0) && (json_string.getData().Length == 34))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsTouchdowns;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'E':
                                                if (String.Compare(json_string.getData(), 7, "xtraPoints", 0, 10, false) == 0)
                                                  {
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case 'A':
                                                            if (String.Compare(json_string.getData(), 18, "ttempted", 0, 8, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 26)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBExtraPointsAttempted;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[26])
                                                                  {
                                                                    case '2':
                                                                        if ((String.Compare(json_string.getData(), 27, "PointConversion", 0, 15, false) == 0) && (json_string.getData().Length == 42))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBExtraPointsAttempted2PointConversion;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'K':
                                                                        if ((String.Compare(json_string.getData(), 27, "icking", 0, 6, false) == 0) && (json_string.getData().Length == 33))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBExtraPointsAttemptedKicking;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'B':
                                                            if ((String.Compare(json_string.getData(), 18, "locked", 0, 6, false) == 0) && (json_string.getData().Length == 24))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBExtraPointsBlocked;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'M':
                                                            if (String.Compare(json_string.getData(), 18, "ade", 0, 3, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 21)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBExtraPointsMade;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[21])
                                                                  {
                                                                    case '2':
                                                                        if ((String.Compare(json_string.getData(), 22, "PointConversion", 0, 15, false) == 0) && (json_string.getData().Length == 37))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBExtraPointsMade2PointConversion;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'K':
                                                                        if ((String.Compare(json_string.getData(), 22, "icking", 0, 6, false) == 0) && (json_string.getData().Length == 28))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBExtraPointsMadeKicking;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 18, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 21))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBExtraPointsPerc;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'F':
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'i':
                                                        if (String.Compare(json_string.getData(), 8, "eldGoal", 0, 7, false) == 0)
                                                          {
                                                            switch (json_string.getData()[15])
                                                              {
                                                                case 'R':
                                                                    if (String.Compare(json_string.getData(), 16, "eturns", 0, 6, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 22)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalReturns;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[22])
                                                                          {
                                                                            case '1':
                                                                                if ((String.Compare(json_string.getData(), 23, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 33))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalReturns10PlusYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case '2':
                                                                                if ((String.Compare(json_string.getData(), 23, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 33))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalReturns20PlusYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case '3':
                                                                                if ((String.Compare(json_string.getData(), 23, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 33))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalReturns30PlusYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case '4':
                                                                                if ((String.Compare(json_string.getData(), 23, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 33))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalReturns40PlusYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case '5':
                                                                                if ((String.Compare(json_string.getData(), 23, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 33))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalReturns50PlusYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'A':
                                                                                if ((String.Compare(json_string.getData(), 23, "verageReturn", 0, 12, false) == 0) && (json_string.getData().Length == 35))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsAverageReturn;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'L':
                                                                                if ((String.Compare(json_string.getData(), 23, "ongestReturn", 0, 12, false) == 0) && (json_string.getData().Length == 35))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsLongestReturn;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'T':
                                                                                if (String.Compare(json_string.getData(), 23, "o", 0, 1, false) == 0)
                                                                                  {
                                                                                    switch (json_string.getData()[24])
                                                                                      {
                                                                                        case 't':
                                                                                            if ((String.Compare(json_string.getData(), 25, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 32))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsTotalYards;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        case 'u':
                                                                                            if ((String.Compare(json_string.getData(), 25, "chdowns", 0, 7, false) == 0) && (json_string.getData().Length == 32))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsTouchdowns;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 's':
                                                                    switch (json_string.getData()[16])
                                                                      {
                                                                        case 'A':
                                                                            if (String.Compare(json_string.getData(), 17, "ttempted", 0, 8, false) == 0)
                                                                              {
                                                                                if (json_string.getData().Length == 25)
                                                                                  {
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                  }
                                                                                switch (json_string.getData()[25])
                                                                                  {
                                                                                    case '1':
                                                                                        if ((String.Compare(json_string.getData(), 26, "to19Yards", 0, 9, false) == 0) && (json_string.getData().Length == 35))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted1to19Yards;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case '2':
                                                                                        if ((String.Compare(json_string.getData(), 26, "0to29Yards", 0, 10, false) == 0) && (json_string.getData().Length == 36))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted20to29Yards;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case '3':
                                                                                        if ((String.Compare(json_string.getData(), 26, "0to39Yards", 0, 10, false) == 0) && (json_string.getData().Length == 36))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted30to39Yards;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case '4':
                                                                                        if ((String.Compare(json_string.getData(), 26, "0to49Yards", 0, 10, false) == 0) && (json_string.getData().Length == 36))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted40to49Yards;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case '5':
                                                                                        if ((String.Compare(json_string.getData(), 26, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 36))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted50PlusYards;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 'B':
                                                                            if ((String.Compare(json_string.getData(), 17, "locked", 0, 6, false) == 0) && (json_string.getData().Length == 23))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalsBlocked;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'L':
                                                                            if ((String.Compare(json_string.getData(), 17, "ongestMade", 0, 10, false) == 0) && (json_string.getData().Length == 27))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalsLongestMade;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'M':
                                                                            if (String.Compare(json_string.getData(), 17, "ade", 0, 3, false) == 0)
                                                                              {
                                                                                if (json_string.getData().Length == 20)
                                                                                  {
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalsMade;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                  }
                                                                                switch (json_string.getData()[20])
                                                                                  {
                                                                                    case '1':
                                                                                        if ((String.Compare(json_string.getData(), 21, "to19Yards", 0, 9, false) == 0) && (json_string.getData().Length == 30))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalsMade1to19Yards;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case '2':
                                                                                        if ((String.Compare(json_string.getData(), 21, "0to29Yards", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalsMade20to29Yards;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case '3':
                                                                                        if ((String.Compare(json_string.getData(), 21, "0to39Yards", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalsMade30to39Yards;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case '4':
                                                                                        if ((String.Compare(json_string.getData(), 21, "0to49Yards", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalsMade40to49Yards;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case '5':
                                                                                        if ((String.Compare(json_string.getData(), 21, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalsMade50PlusYards;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 'P':
                                                                            if ((String.Compare(json_string.getData(), 17, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 20))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFieldGoalsPerc;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'o':
                                                        if ((String.Compare(json_string.getData(), 8, "rcedFumbles", 0, 11, false) == 0) && (json_string.getData().Length == 19))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBForcedFumbles;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'u':
                                                        if (String.Compare(json_string.getData(), 8, "mbles", 0, 5, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 13)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFumbles;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[13])
                                                              {
                                                                case 'F':
                                                                    if ((String.Compare(json_string.getData(), 14, "orced", 0, 5, false) == 0) && (json_string.getData().Length == 19))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFumblesForced;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(json_string.getData(), 14, "ost", 0, 3, false) == 0) && (json_string.getData().Length == 17))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFumblesLost;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'O':
                                                                    switch (json_string.getData()[14])
                                                                      {
                                                                        case 'p':
                                                                            if (String.Compare(json_string.getData(), 15, "ponent", 0, 6, false) == 0)
                                                                              {
                                                                                switch (json_string.getData()[21])
                                                                                  {
                                                                                    case 'R':
                                                                                        if ((String.Compare(json_string.getData(), 22, "ecovery", 0, 7, false) == 0) && (json_string.getData().Length == 29))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFumblesOpponentRecovery;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'T':
                                                                                        if ((String.Compare(json_string.getData(), 22, "ouchdownsFromRecovery", 0, 21, false) == 0) && (json_string.getData().Length == 43))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFumblesOpponentTouchdownsFromRecovery;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 'u':
                                                                            if ((String.Compare(json_string.getData(), 15, "tOfBounds", 0, 9, false) == 0) && (json_string.getData().Length == 24))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFumblesOutOfBounds;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'w':
                                                                            if (String.Compare(json_string.getData(), 15, "n", 0, 1, false) == 0)
                                                                              {
                                                                                switch (json_string.getData()[16])
                                                                                  {
                                                                                    case 'R':
                                                                                        if ((String.Compare(json_string.getData(), 17, "ecovery", 0, 7, false) == 0) && (json_string.getData().Length == 24))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFumblesOwnRecovery;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'T':
                                                                                        if ((String.Compare(json_string.getData(), 17, "ouchdownsFromRecovery", 0, 21, false) == 0) && (json_string.getData().Length == 38))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFumblesOwnTouchdownsFromRecovery;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'R':
                                                                    if (String.Compare(json_string.getData(), 14, "ecovered", 0, 8, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 22)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFumblesRecovered;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[22])
                                                                          {
                                                                            case 'F':
                                                                                if ((String.Compare(json_string.getData(), 23, "orTouchdowns", 0, 12, false) == 0) && (json_string.getData().Length == 35))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFumblesRecoveredForTouchdowns;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'Y':
                                                                    if (String.Compare(json_string.getData(), 14, "ardsFromO", 0, 9, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[23])
                                                                          {
                                                                            case 'p':
                                                                                if ((String.Compare(json_string.getData(), 24, "ponentRecovery", 0, 14, false) == 0) && (json_string.getData().Length == 38))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFumblesYardsFromOpponentRecovery;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'w':
                                                                                if ((String.Compare(json_string.getData(), 24, "nRecovery", 0, 9, false) == 0) && (json_string.getData().Length == 33))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBFumblesYardsFromOwnRecovery;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'G':
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'a':
                                                        if (String.Compare(json_string.getData(), 8, "mes", 0, 3, false) == 0)
                                                          {
                                                            switch (json_string.getData()[11])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 12, "layed", 0, 5, false) == 0) && (json_string.getData().Length == 17))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBGamesPlayed;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'S':
                                                                    if ((String.Compare(json_string.getData(), 12, "tarted", 0, 6, false) == 0) && (json_string.getData().Length == 18))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBGamesStarted;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'o':
                                                        if (String.Compare(json_string.getData(), 8, "alEfficiency", 0, 12, false) == 0)
                                                          {
                                                            switch (json_string.getData()[20])
                                                              {
                                                                case 'A':
                                                                    if ((String.Compare(json_string.getData(), 21, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 28))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBGoalEfficiencyAttempts;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 21, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBGoalEfficiencyPerc;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'T':
                                                                    if ((String.Compare(json_string.getData(), 21, "ouchdowns", 0, 9, false) == 0) && (json_string.getData().Length == 30))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBGoalEfficiencyTouchdowns;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'I':
                                                if (String.Compare(json_string.getData(), 7, "nterceptions", 0, 12, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 19)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBInterceptions;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[19])
                                                      {
                                                        case 'L':
                                                            if ((String.Compare(json_string.getData(), 20, "ongestInterception", 0, 18, false) == 0) && (json_string.getData().Length == 38))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBInterceptionsLongestInterception;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'T':
                                                            if ((String.Compare(json_string.getData(), 20, "ouchdowns", 0, 9, false) == 0) && (json_string.getData().Length == 29))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBInterceptionsTouchdowns;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'Y':
                                                            if ((String.Compare(json_string.getData(), 20, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 24))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBInterceptionsYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'K':
                                                if (String.Compare(json_string.getData(), 7, "ickoff", 0, 6, false) == 0)
                                                  {
                                                    switch (json_string.getData()[13])
                                                      {
                                                        case 'R':
                                                            if (String.Compare(json_string.getData(), 14, "eturns", 0, 6, false) == 0)
                                                              {
                                                                switch (json_string.getData()[20])
                                                                  {
                                                                    case '1':
                                                                        if ((String.Compare(json_string.getData(), 21, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffReturns10PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '2':
                                                                        if ((String.Compare(json_string.getData(), 21, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffReturns20PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '3':
                                                                        if ((String.Compare(json_string.getData(), 21, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffReturns30PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '4':
                                                                        if ((String.Compare(json_string.getData(), 21, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffReturns40PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '5':
                                                                        if ((String.Compare(json_string.getData(), 21, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffReturns50PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'A':
                                                                        if ((String.Compare(json_string.getData(), 21, "verageRun", 0, 9, false) == 0) && (json_string.getData().Length == 30))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffReturnsAverageRun;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'F':
                                                                        if ((String.Compare(json_string.getData(), 21, "airCatches", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffReturnsFairCatches;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'L':
                                                                        if ((String.Compare(json_string.getData(), 21, "ongestKickReturn", 0, 16, false) == 0) && (json_string.getData().Length == 37))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffReturnsLongestKickReturn;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'R':
                                                                        if ((String.Compare(json_string.getData(), 21, "eturns", 0, 6, false) == 0) && (json_string.getData().Length == 27))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffReturnsReturns;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'T':
                                                                        if ((String.Compare(json_string.getData(), 21, "ouchdowns", 0, 9, false) == 0) && (json_string.getData().Length == 30))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffReturnsTouchdowns;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'Y':
                                                                        if ((String.Compare(json_string.getData(), 21, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 25))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffReturnsYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 's':
                                                            switch (json_string.getData()[14])
                                                              {
                                                                case 'A':
                                                                    if (String.Compare(json_string.getData(), 15, "verage", 0, 6, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[21])
                                                                          {
                                                                            case 'G':
                                                                                if ((String.Compare(json_string.getData(), 22, "rossYards", 0, 9, false) == 0) && (json_string.getData().Length == 31))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffsAverageGrossYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'N':
                                                                                if ((String.Compare(json_string.getData(), 22, "etYards", 0, 7, false) == 0) && (json_string.getData().Length == 29))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffsAverageNetYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'R':
                                                                                if ((String.Compare(json_string.getData(), 22, "eturnYards", 0, 10, false) == 0) && (json_string.getData().Length == 32))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffsAverageReturnYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'E':
                                                                    if ((String.Compare(json_string.getData(), 15, "ndZoneKicks", 0, 11, false) == 0) && (json_string.getData().Length == 26))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffsEndZoneKicks;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'G':
                                                                    if ((String.Compare(json_string.getData(), 15, "rossYards", 0, 9, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffsGrossYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'I':
                                                                    if (String.Compare(json_string.getData(), 15, "nsideOpponents20YardLine", 0, 24, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 39)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffsInsideOpponents20YardLine;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[39])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 40, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 43))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffsInsideOpponents20YardLinePerc;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'K':
                                                                    if ((String.Compare(json_string.getData(), 15, "icks", 0, 4, false) == 0) && (json_string.getData().Length == 19))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffsKicks;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(json_string.getData(), 15, "ongestKick", 0, 10, false) == 0) && (json_string.getData().Length == 25))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffsLongestKick;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'N':
                                                                    if ((String.Compare(json_string.getData(), 15, "etYards", 0, 7, false) == 0) && (json_string.getData().Length == 22))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffsNetYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'R':
                                                                    if ((String.Compare(json_string.getData(), 15, "eturned", 0, 7, false) == 0) && (json_string.getData().Length == 22))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffsReturned;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'T':
                                                                    if (String.Compare(json_string.getData(), 15, "o", 0, 1, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[16])
                                                                          {
                                                                            case 't':
                                                                                if ((String.Compare(json_string.getData(), 17, "alReturnYards", 0, 13, false) == 0) && (json_string.getData().Length == 30))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffsTotalReturnYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'u':
                                                                                if (String.Compare(json_string.getData(), 17, "chbacks", 0, 7, false) == 0)
                                                                                  {
                                                                                    if (json_string.getData().Length == 24)
                                                                                      {
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffsTouchbacks;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                      }
                                                                                    switch (json_string.getData()[24])
                                                                                      {
                                                                                        case 'P':
                                                                                            if ((String.Compare(json_string.getData(), 25, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 28))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBKickoffsTouchbacksPerc;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'M':
                                                if (String.Compare(json_string.getData(), 7, "isc", 0, 3, false) == 0)
                                                  {
                                                    switch (json_string.getData()[10])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(json_string.getData(), 11, "ssistedTackles", 0, 14, false) == 0) && (json_string.getData().Length == 25))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBMiscAssistedTackles;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'C':
                                                            if ((String.Compare(json_string.getData(), 11, "ombinedTackles", 0, 14, false) == 0) && (json_string.getData().Length == 25))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBMiscCombinedTackles;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'F':
                                                            switch (json_string.getData()[11])
                                                              {
                                                                case 'o':
                                                                    if ((String.Compare(json_string.getData(), 12, "rcedFumbles", 0, 11, false) == 0) && (json_string.getData().Length == 23))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBMiscForcedFumbles;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'u':
                                                                    if ((String.Compare(json_string.getData(), 12, "mblesRecovered", 0, 14, false) == 0) && (json_string.getData().Length == 26))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBMiscFumblesRecovered;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        case 'T':
                                                            if ((String.Compare(json_string.getData(), 11, "ackles", 0, 6, false) == 0) && (json_string.getData().Length == 17))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBMiscTackles;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'P':
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'a':
                                                        if (String.Compare(json_string.getData(), 8, "ss", 0, 2, false) == 0)
                                                          {
                                                            switch (json_string.getData()[10])
                                                              {
                                                                case 'e':
                                                                    if ((String.Compare(json_string.getData(), 11, "sDefended", 0, 9, false) == 0) && (json_string.getData().Length == 20))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassesDefended;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'i':
                                                                    if (String.Compare(json_string.getData(), 11, "ng", 0, 2, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[13])
                                                                          {
                                                                            case '1':
                                                                                switch (json_string.getData()[14])
                                                                                  {
                                                                                    case '0':
                                                                                        if ((String.Compare(json_string.getData(), 15, "PlusYards", 0, 9, false) == 0) && (json_string.getData().Length == 24))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassing10PlusYards;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 's':
                                                                                        if ((String.Compare(json_string.getData(), 15, "tDowns", 0, 6, false) == 0) && (json_string.getData().Length == 21))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassing1stDowns;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            case '2':
                                                                                if ((String.Compare(json_string.getData(), 14, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 24))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassing20PlusYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case '3':
                                                                                if ((String.Compare(json_string.getData(), 14, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 24))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassing30PlusYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case '4':
                                                                                if ((String.Compare(json_string.getData(), 14, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 24))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassing40PlusYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case '5':
                                                                                if ((String.Compare(json_string.getData(), 14, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 24))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassing50PlusYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'A':
                                                                                switch (json_string.getData()[14])
                                                                                  {
                                                                                    case 't':
                                                                                        if ((String.Compare(json_string.getData(), 15, "tempts", 0, 6, false) == 0) && (json_string.getData().Length == 21))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingAttempts;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'v':
                                                                                        if (String.Compare(json_string.getData(), 15, "erageYardsPer", 0, 13, false) == 0)
                                                                                          {
                                                                                            switch (json_string.getData()[28])
                                                                                              {
                                                                                                case 'A':
                                                                                                    if ((String.Compare(json_string.getData(), 29, "ttempt", 0, 6, false) == 0) && (json_string.getData().Length == 35))
                                                                                                          {
                                                                                                            the_open_enum.in_known_list = true;
                                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingAverageYardsPerAttempt;
                                                                                                            goto open_enum_is_done;
                                                                                                          }
                                                                                                    break;
                                                                                                case 'C':
                                                                                                    if ((String.Compare(json_string.getData(), 29, "ompletion", 0, 9, false) == 0) && (json_string.getData().Length == 38))
                                                                                                          {
                                                                                                            the_open_enum.in_known_list = true;
                                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingAverageYardsPerCompletion;
                                                                                                            goto open_enum_is_done;
                                                                                                          }
                                                                                                    break;
                                                                                                default:
                                                                                                    break;
                                                                                              }
                                                                                          }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            case 'C':
                                                                                if (String.Compare(json_string.getData(), 14, "ompletion", 0, 9, false) == 0)
                                                                                  {
                                                                                    switch (json_string.getData()[23])
                                                                                      {
                                                                                        case 'P':
                                                                                            if ((String.Compare(json_string.getData(), 24, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 27))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingCompletionPerc;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        case 's':
                                                                                            if (json_string.getData().Length == 24)
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingCompletions;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 'G':
                                                                                if ((String.Compare(json_string.getData(), 14, "rossYards", 0, 9, false) == 0) && (json_string.getData().Length == 23))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingGrossYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'I':
                                                                                if (String.Compare(json_string.getData(), 14, "nterception", 0, 11, false) == 0)
                                                                                  {
                                                                                    switch (json_string.getData()[25])
                                                                                      {
                                                                                        case 'P':
                                                                                            if ((String.Compare(json_string.getData(), 26, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 29))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingInterceptionPerc;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        case 's':
                                                                                            if (json_string.getData().Length == 26)
                                                                                              {
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingInterceptions;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                              }
                                                                                            switch (json_string.getData()[26])
                                                                                              {
                                                                                                case 'R':
                                                                                                    if ((String.Compare(json_string.getData(), 27, "eturnedForTouchdown", 0, 19, false) == 0) && (json_string.getData().Length == 46))
                                                                                                          {
                                                                                                            the_open_enum.in_known_list = true;
                                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingInterceptionsReturnedForTouchdown;
                                                                                                            goto open_enum_is_done;
                                                                                                          }
                                                                                                    break;
                                                                                                default:
                                                                                                    break;
                                                                                              }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 'L':
                                                                                if ((String.Compare(json_string.getData(), 14, "ongestPass", 0, 10, false) == 0) && (json_string.getData().Length == 24))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingLongestPass;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'N':
                                                                                if ((String.Compare(json_string.getData(), 14, "etYards", 0, 7, false) == 0) && (json_string.getData().Length == 21))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingNetYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'R':
                                                                                switch (json_string.getData()[14])
                                                                                  {
                                                                                    case 'a':
                                                                                        if ((String.Compare(json_string.getData(), 15, "ting", 0, 4, false) == 0) && (json_string.getData().Length == 19))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingRating;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'e':
                                                                                        if ((String.Compare(json_string.getData(), 15, "dZoneAttempts", 0, 13, false) == 0) && (json_string.getData().Length == 28))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingRedZoneAttempts;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            case 'S':
                                                                                if (String.Compare(json_string.getData(), 14, "acked", 0, 5, false) == 0)
                                                                                  {
                                                                                    if (json_string.getData().Length == 19)
                                                                                      {
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingSacked;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                      }
                                                                                    switch (json_string.getData()[19])
                                                                                      {
                                                                                        case 'Y':
                                                                                            if ((String.Compare(json_string.getData(), 20, "ardsLost", 0, 8, false) == 0) && (json_string.getData().Length == 28))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingSackedYardsLost;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 'T':
                                                                                switch (json_string.getData()[14])
                                                                                  {
                                                                                    case 'a':
                                                                                        if ((String.Compare(json_string.getData(), 15, "ckledForSafety", 0, 14, false) == 0) && (json_string.getData().Length == 29))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingTackledForSafety;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'o':
                                                                                        switch (json_string.getData()[15])
                                                                                          {
                                                                                            case 't':
                                                                                                if ((String.Compare(json_string.getData(), 16, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 23))
                                                                                                      {
                                                                                                        the_open_enum.in_known_list = true;
                                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingTotalYards;
                                                                                                        goto open_enum_is_done;
                                                                                                      }
                                                                                                break;
                                                                                            case 'u':
                                                                                                if (String.Compare(json_string.getData(), 16, "chdown", 0, 6, false) == 0)
                                                                                                  {
                                                                                                    switch (json_string.getData()[22])
                                                                                                      {
                                                                                                        case 'P':
                                                                                                            if ((String.Compare(json_string.getData(), 23, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 26))
                                                                                                                  {
                                                                                                                    the_open_enum.in_known_list = true;
                                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingTouchdownPerc;
                                                                                                                    goto open_enum_is_done;
                                                                                                                  }
                                                                                                            break;
                                                                                                        case 's':
                                                                                                            if (json_string.getData().Length == 23)
                                                                                                                  {
                                                                                                                    the_open_enum.in_known_list = true;
                                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPassingTouchdowns;
                                                                                                                    goto open_enum_is_done;
                                                                                                                  }
                                                                                                            break;
                                                                                                        default:
                                                                                                            break;
                                                                                                      }
                                                                                                  }
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'e':
                                                        if (String.Compare(json_string.getData(), 8, "nalties", 0, 7, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 15)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPenalties;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[15])
                                                              {
                                                                case '1':
                                                                    if ((String.Compare(json_string.getData(), 16, "stDowns", 0, 7, false) == 0) && (json_string.getData().Length == 23))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPenalties1stDowns;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'Y':
                                                                    if ((String.Compare(json_string.getData(), 16, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 20))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPenaltiesYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'u':
                                                        if (String.Compare(json_string.getData(), 8, "nt", 0, 2, false) == 0)
                                                          {
                                                            switch (json_string.getData()[10])
                                                              {
                                                                case 'R':
                                                                    if (String.Compare(json_string.getData(), 11, "eturns", 0, 6, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 17)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntReturns;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[17])
                                                                          {
                                                                            case '1':
                                                                                if ((String.Compare(json_string.getData(), 18, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntReturns10PlusYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case '2':
                                                                                if ((String.Compare(json_string.getData(), 18, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntReturns20PlusYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case '3':
                                                                                if ((String.Compare(json_string.getData(), 18, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntReturns30PlusYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case '4':
                                                                                if ((String.Compare(json_string.getData(), 18, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntReturns40PlusYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case '5':
                                                                                if ((String.Compare(json_string.getData(), 18, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntReturns50PlusYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'A':
                                                                                if ((String.Compare(json_string.getData(), 18, "verageRun", 0, 9, false) == 0) && (json_string.getData().Length == 27))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntReturnsAverageRun;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'F':
                                                                                if ((String.Compare(json_string.getData(), 18, "airCatches", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntReturnsFairCatches;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'L':
                                                                                if ((String.Compare(json_string.getData(), 18, "ongestKickReturn", 0, 16, false) == 0) && (json_string.getData().Length == 34))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntReturnsLongestKickReturn;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'T':
                                                                                if ((String.Compare(json_string.getData(), 18, "ouchdowns", 0, 9, false) == 0) && (json_string.getData().Length == 27))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntReturnsTouchdowns;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'Y':
                                                                                if ((String.Compare(json_string.getData(), 18, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 22))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntReturnsYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'i':
                                                                    if (String.Compare(json_string.getData(), 11, "ng", 0, 2, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[13])
                                                                          {
                                                                            case 'A':
                                                                                if (String.Compare(json_string.getData(), 14, "verage", 0, 6, false) == 0)
                                                                                  {
                                                                                    switch (json_string.getData()[20])
                                                                                      {
                                                                                        case 'G':
                                                                                            if ((String.Compare(json_string.getData(), 21, "rossYards", 0, 9, false) == 0) && (json_string.getData().Length == 30))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntingAverageGrossYards;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        case 'N':
                                                                                            if ((String.Compare(json_string.getData(), 21, "etYards", 0, 7, false) == 0) && (json_string.getData().Length == 28))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntingAverageNetYards;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        case 'R':
                                                                                            if ((String.Compare(json_string.getData(), 21, "eturnYards", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntingAverageReturnYards;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 'B':
                                                                                if ((String.Compare(json_string.getData(), 14, "locked", 0, 6, false) == 0) && (json_string.getData().Length == 20))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntingBlocked;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'G':
                                                                                if ((String.Compare(json_string.getData(), 14, "rossYards", 0, 9, false) == 0) && (json_string.getData().Length == 23))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntingGrossYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'I':
                                                                                if (String.Compare(json_string.getData(), 14, "nsideOpponents20YardLine", 0, 24, false) == 0)
                                                                                  {
                                                                                    if (json_string.getData().Length == 38)
                                                                                      {
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntingInsideOpponents20YardLine;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                      }
                                                                                    switch (json_string.getData()[38])
                                                                                      {
                                                                                        case 'P':
                                                                                            if ((String.Compare(json_string.getData(), 39, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 42))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntingInsideOpponents20YardLinePerc;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 'L':
                                                                                if ((String.Compare(json_string.getData(), 14, "ongestPunt", 0, 10, false) == 0) && (json_string.getData().Length == 24))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntingLongestPunt;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'N':
                                                                                if ((String.Compare(json_string.getData(), 14, "etYards", 0, 7, false) == 0) && (json_string.getData().Length == 21))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntingNetYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 14, "unts", 0, 4, false) == 0) && (json_string.getData().Length == 18))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntingPunts;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'R':
                                                                                if (String.Compare(json_string.getData(), 14, "eturn", 0, 5, false) == 0)
                                                                                  {
                                                                                    switch (json_string.getData()[19])
                                                                                      {
                                                                                        case 'Y':
                                                                                            if ((String.Compare(json_string.getData(), 20, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 24))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntingReturnYards;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        case 'e':
                                                                                            if ((String.Compare(json_string.getData(), 20, "d", 0, 1, false) == 0) && (json_string.getData().Length == 21))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntingReturned;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            case 'T':
                                                                                if (String.Compare(json_string.getData(), 14, "ouchbacks", 0, 9, false) == 0)
                                                                                  {
                                                                                    if (json_string.getData().Length == 23)
                                                                                      {
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntingTouchbacks;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                      }
                                                                                    switch (json_string.getData()[23])
                                                                                      {
                                                                                        case 'P':
                                                                                            if ((String.Compare(json_string.getData(), 24, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 27))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBPuntingTouchbacksPerc;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'Q':
                                                if ((String.Compare(json_string.getData(), 7, "uarterbackHits", 0, 14, false) == 0) && (json_string.getData().Length == 21))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBQuarterbackHits;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'R':
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'e':
                                                        switch (json_string.getData()[8])
                                                          {
                                                            case 'c':
                                                                if (String.Compare(json_string.getData(), 9, "eiving", 0, 6, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[15])
                                                                      {
                                                                        case '1':
                                                                            switch (json_string.getData()[16])
                                                                              {
                                                                                case '0':
                                                                                    if ((String.Compare(json_string.getData(), 17, "PlusYards", 0, 9, false) == 0) && (json_string.getData().Length == 26))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBReceiving10PlusYards;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                case 's':
                                                                                    if ((String.Compare(json_string.getData(), 17, "tDowns", 0, 6, false) == 0) && (json_string.getData().Length == 23))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBReceiving1stDowns;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        case '2':
                                                                            if ((String.Compare(json_string.getData(), 16, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 26))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBReceiving20PlusYards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case '3':
                                                                            if ((String.Compare(json_string.getData(), 16, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 26))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBReceiving30PlusYards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case '4':
                                                                            if ((String.Compare(json_string.getData(), 16, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 26))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBReceiving40PlusYards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case '5':
                                                                            if ((String.Compare(json_string.getData(), 16, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 26))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBReceiving50PlusYards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'A':
                                                                            if ((String.Compare(json_string.getData(), 16, "verageReception", 0, 15, false) == 0) && (json_string.getData().Length == 31))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBReceivingAverageReception;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'F':
                                                                            if ((String.Compare(json_string.getData(), 16, "umbledOnReception", 0, 17, false) == 0) && (json_string.getData().Length == 33))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBReceivingFumbledOnReception;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'L':
                                                                            if ((String.Compare(json_string.getData(), 16, "ongestReception", 0, 15, false) == 0) && (json_string.getData().Length == 31))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBReceivingLongestReception;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'R':
                                                                            if (String.Compare(json_string.getData(), 16, "e", 0, 1, false) == 0)
                                                                              {
                                                                                switch (json_string.getData()[17])
                                                                                  {
                                                                                    case 'c':
                                                                                        if ((String.Compare(json_string.getData(), 18, "eptions", 0, 7, false) == 0) && (json_string.getData().Length == 25))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBReceivingReceptions;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'd':
                                                                                        if ((String.Compare(json_string.getData(), 18, "ZoneTargets", 0, 11, false) == 0) && (json_string.getData().Length == 29))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBReceivingRedZoneTargets;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 'T':
                                                                            switch (json_string.getData()[16])
                                                                              {
                                                                                case 'a':
                                                                                    if ((String.Compare(json_string.getData(), 17, "rgets", 0, 5, false) == 0) && (json_string.getData().Length == 22))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBReceivingTargets;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                case 'o':
                                                                                    switch (json_string.getData()[17])
                                                                                      {
                                                                                        case 't':
                                                                                            if ((String.Compare(json_string.getData(), 18, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 25))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBReceivingTotalYards;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        case 'u':
                                                                                            if ((String.Compare(json_string.getData(), 18, "chdowns", 0, 7, false) == 0) && (json_string.getData().Length == 25))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBReceivingTouchdowns;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        case 'Y':
                                                                            if ((String.Compare(json_string.getData(), 16, "ardsAfterCompletion", 0, 19, false) == 0) && (json_string.getData().Length == 35))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBReceivingYardsAfterCompletion;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'd':
                                                                if (String.Compare(json_string.getData(), 9, "ZoneEfficiency", 0, 14, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[23])
                                                                      {
                                                                        case 'A':
                                                                            if ((String.Compare(json_string.getData(), 24, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 31))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRedZoneEfficiencyAttempts;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'C':
                                                                            if ((String.Compare(json_string.getData(), 24, "onversions", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRedZoneEfficiencyConversions;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'P':
                                                                            if ((String.Compare(json_string.getData(), 24, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 27))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRedZoneEfficiencyPerc;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'u':
                                                        if (String.Compare(json_string.getData(), 8, "shing", 0, 5, false) == 0)
                                                          {
                                                            switch (json_string.getData()[13])
                                                              {
                                                                case '1':
                                                                    switch (json_string.getData()[14])
                                                                      {
                                                                        case '0':
                                                                            if ((String.Compare(json_string.getData(), 15, "PlusYards", 0, 9, false) == 0) && (json_string.getData().Length == 24))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRushing10PlusYards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 's':
                                                                            if (String.Compare(json_string.getData(), 15, "tDown", 0, 5, false) == 0)
                                                                              {
                                                                                switch (json_string.getData()[20])
                                                                                  {
                                                                                    case 'P':
                                                                                        if ((String.Compare(json_string.getData(), 21, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 24))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRushing1stDownPerc;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 's':
                                                                                        if (json_string.getData().Length == 21)
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRushing1stDowns;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case '2':
                                                                    if ((String.Compare(json_string.getData(), 14, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRushing20PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '3':
                                                                    if ((String.Compare(json_string.getData(), 14, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRushing30PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '4':
                                                                    if ((String.Compare(json_string.getData(), 14, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRushing40PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '5':
                                                                    if ((String.Compare(json_string.getData(), 14, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRushing50PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'A':
                                                                    switch (json_string.getData()[14])
                                                                      {
                                                                        case 't':
                                                                            if ((String.Compare(json_string.getData(), 15, "tempts", 0, 6, false) == 0) && (json_string.getData().Length == 21))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRushingAttempts;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'v':
                                                                            if ((String.Compare(json_string.getData(), 15, "erageRush", 0, 9, false) == 0) && (json_string.getData().Length == 24))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRushingAverageRush;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'F':
                                                                    if ((String.Compare(json_string.getData(), 14, "umbledOnRush", 0, 12, false) == 0) && (json_string.getData().Length == 26))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRushingFumbledOnRush;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(json_string.getData(), 14, "ongestRush", 0, 10, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRushingLongestRush;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'R':
                                                                    if ((String.Compare(json_string.getData(), 14, "edZoneAttempts", 0, 14, false) == 0) && (json_string.getData().Length == 28))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRushingRedZoneAttempts;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'T':
                                                                    switch (json_string.getData()[14])
                                                                      {
                                                                        case 'a':
                                                                            if ((String.Compare(json_string.getData(), 15, "ckledForSafety", 0, 14, false) == 0) && (json_string.getData().Length == 29))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRushingTackledForSafety;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'o':
                                                                            switch (json_string.getData()[15])
                                                                              {
                                                                                case 't':
                                                                                    if ((String.Compare(json_string.getData(), 16, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 23))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRushingTotalYards;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                case 'u':
                                                                                    if ((String.Compare(json_string.getData(), 16, "chdowns", 0, 7, false) == 0) && (json_string.getData().Length == 23))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBRushingTouchdowns;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'S':
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'a':
                                                        switch (json_string.getData()[8])
                                                          {
                                                            case 'c':
                                                                if (String.Compare(json_string.getData(), 9, "k", 0, 1, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[10])
                                                                      {
                                                                        case 'Y':
                                                                            if ((String.Compare(json_string.getData(), 11, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 15))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBSackYards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 's':
                                                                            if (json_string.getData().Length == 11)
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBSacks;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'f':
                                                                if ((String.Compare(json_string.getData(), 9, "eties", 0, 5, false) == 0) && (json_string.getData().Length == 14))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBSafeties;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'p':
                                                        if (String.Compare(json_string.getData(), 8, "ecialTeams", 0, 10, false) == 0)
                                                          {
                                                            switch (json_string.getData()[18])
                                                              {
                                                                case 'A':
                                                                    if ((String.Compare(json_string.getData(), 19, "ssistedTackles", 0, 14, false) == 0) && (json_string.getData().Length == 33))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBSpecialTeamsAssistedTackles;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'C':
                                                                    if ((String.Compare(json_string.getData(), 19, "ombinedTackles", 0, 14, false) == 0) && (json_string.getData().Length == 33))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBSpecialTeamsCombinedTackles;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'F':
                                                                    switch (json_string.getData()[19])
                                                                      {
                                                                        case 'o':
                                                                            if ((String.Compare(json_string.getData(), 20, "rcedFumbles", 0, 11, false) == 0) && (json_string.getData().Length == 31))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBSpecialTeamsForcedFumbles;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'u':
                                                                            if ((String.Compare(json_string.getData(), 20, "mblesRecovered", 0, 14, false) == 0) && (json_string.getData().Length == 34))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBSpecialTeamsFumblesRecovered;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'T':
                                                                    if ((String.Compare(json_string.getData(), 19, "otalTackles", 0, 11, false) == 0) && (json_string.getData().Length == 30))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBSpecialTeamsTotalTackles;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'T':
                                                if (String.Compare(json_string.getData(), 7, "ackles", 0, 6, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 13)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBTackles;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[13])
                                                      {
                                                        case 'A':
                                                            if ((String.Compare(json_string.getData(), 14, "ssisted", 0, 7, false) == 0) && (json_string.getData().Length == 21))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBTacklesAssisted;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'C':
                                                            if ((String.Compare(json_string.getData(), 14, "ombined", 0, 7, false) == 0) && (json_string.getData().Length == 21))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBTacklesCombined;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'F':
                                                            if ((String.Compare(json_string.getData(), 14, "orLoss", 0, 6, false) == 0) && (json_string.getData().Length == 20))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAFBTacklesForLoss;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'M':
                                    if (String.Compare(json_string.getData(), 5, "B", 0, 1, false) == 0)
                                      {
                                        switch (json_string.getData()[6])
                                          {
                                            case 'A':
                                                if (String.Compare(json_string.getData(), 7, "ssists", 0, 6, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 13)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBAssists;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[13])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 14, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 20))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBAssistsPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'T':
                                                            if ((String.Compare(json_string.getData(), 14, "oTurnoverRatio", 0, 14, false) == 0) && (json_string.getData().Length == 28))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBAssistsToTurnoverRatio;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'B':
                                                if (String.Compare(json_string.getData(), 7, "locked", 0, 6, false) == 0)
                                                  {
                                                    switch (json_string.getData()[13])
                                                      {
                                                        case 'A':
                                                            if (String.Compare(json_string.getData(), 14, "ttempts", 0, 7, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 21)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBBlockedAttempts;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[21])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 22, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 28))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBBlockedAttemptsPerGame;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'S':
                                                            if (String.Compare(json_string.getData(), 14, "hots", 0, 4, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 18)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBBlockedShots;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[18])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 19, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 25))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBBlockedShotsPerGame;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'C':
                                                if ((String.Compare(json_string.getData(), 7, "oachTechnicalFouls", 0, 18, false) == 0) && (json_string.getData().Length == 25))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBCoachTechnicalFouls;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'D':
                                                if (String.Compare(json_string.getData(), 7, "efensiveRebounds", 0, 16, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 23)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBDefensiveRebounds;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[23])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 24, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 30))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBDefensiveReboundsPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'E':
                                                if ((String.Compare(json_string.getData(), 7, "jections", 0, 8, false) == 0) && (json_string.getData().Length == 15))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBEjections;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'F':
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'a':
                                                        if (String.Compare(json_string.getData(), 8, "stBreakPoints", 0, 13, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 21)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBFastBreakPoints;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[21])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 22, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 28))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBFastBreakPointsPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'i':
                                                        if (String.Compare(json_string.getData(), 8, "eldGoal", 0, 7, false) == 0)
                                                          {
                                                            switch (json_string.getData()[15])
                                                              {
                                                                case 'A':
                                                                    if (String.Compare(json_string.getData(), 16, "ttempts", 0, 7, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 23)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBFieldGoalAttempts;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[23])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 24, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 30))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBFieldGoalAttemptsPerGame;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 16, "ercentage", 0, 9, false) == 0) && (json_string.getData().Length == 25))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBFieldGoalPercentage;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 's':
                                                                    if (String.Compare(json_string.getData(), 16, "Made", 0, 4, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 20)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBFieldGoalsMade;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[20])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 21, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 27))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBFieldGoalsMadePerGame;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'l':
                                                        if (String.Compare(json_string.getData(), 8, "agrantFouls", 0, 11, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 19)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBFlagrantFouls;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[19])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 20, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 26))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBFlagrantFoulsPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'r':
                                                        if (String.Compare(json_string.getData(), 8, "eeThrow", 0, 7, false) == 0)
                                                          {
                                                            switch (json_string.getData()[15])
                                                              {
                                                                case 'A':
                                                                    if (String.Compare(json_string.getData(), 16, "ttempts", 0, 7, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 23)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBFreeThrowAttempts;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[23])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 24, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 30))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBFreeThrowAttemptsPerGame;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 16, "ercentage", 0, 9, false) == 0) && (json_string.getData().Length == 25))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBFreeThrowPercentage;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 's':
                                                                    if (String.Compare(json_string.getData(), 16, "Made", 0, 4, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 20)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBFreeThrowsMade;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[20])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 21, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 27))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBFreeThrowsMadePerGame;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'G':
                                                if (String.Compare(json_string.getData(), 7, "ames", 0, 4, false) == 0)
                                                  {
                                                    switch (json_string.getData()[11])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 12, "layed", 0, 5, false) == 0) && (json_string.getData().Length == 17))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBGamesPlayed;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'S':
                                                            if ((String.Compare(json_string.getData(), 12, "tarted", 0, 6, false) == 0) && (json_string.getData().Length == 18))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBGamesStarted;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'M':
                                                if (String.Compare(json_string.getData(), 7, "inutesPlayed", 0, 12, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 19)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBMinutesPlayed;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[19])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 20, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 26))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBMinutesPlayedPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'O':
                                                if (String.Compare(json_string.getData(), 7, "ffensiveRebounds", 0, 16, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 23)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBOffensiveRebounds;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[23])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 24, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 30))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBOffensiveReboundsPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'P':
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'e':
                                                        if (String.Compare(json_string.getData(), 8, "rsonalFouls", 0, 11, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 19)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBPersonalFouls;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[19])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 20, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 26))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBPersonalFoulsPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'l':
                                                        if ((String.Compare(json_string.getData(), 8, "ayerTechnicalFouls", 0, 18, false) == 0) && (json_string.getData().Length == 26))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBPlayerTechnicalFouls;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'o':
                                                        if (String.Compare(json_string.getData(), 8, "ints", 0, 4, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 12)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBPoints;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[12])
                                                              {
                                                                case 'I':
                                                                    if (String.Compare(json_string.getData(), 13, "nPaint", 0, 6, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 19)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBPointsInPaint;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[19])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 20, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 26))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBPointsInPaintPerGame;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'O':
                                                                    if (String.Compare(json_string.getData(), 13, "ffTurnovers", 0, 11, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 24)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBPointsOffTurnovers;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[24])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 25, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 31))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBPointsOffTurnoversPerGame;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 13, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 19))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBPointsPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'R':
                                                if (String.Compare(json_string.getData(), 7, "ebounds", 0, 7, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 14)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBRebounds;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[14])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 15, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 21))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBReboundsPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'S':
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'e':
                                                        if (String.Compare(json_string.getData(), 8, "condChancePoints", 0, 16, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 24)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBSecondChancePoints;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[24])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 25, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 31))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBSecondChancePointsPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 't':
                                                        if (String.Compare(json_string.getData(), 8, "eals", 0, 4, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 12)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBSteals;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[12])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 13, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 19))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBStealsPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'T':
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(json_string.getData(), 8, "amTechnicalFouls", 0, 16, false) == 0) && (json_string.getData().Length == 24))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBTeamTechnicalFouls;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'h':
                                                        if (String.Compare(json_string.getData(), 8, "reePoint", 0, 8, false) == 0)
                                                          {
                                                            switch (json_string.getData()[16])
                                                              {
                                                                case 'A':
                                                                    if (String.Compare(json_string.getData(), 17, "ttempts", 0, 7, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 24)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBThreePointAttempts;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[24])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 25, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 31))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBThreePointAttemptsPerGame;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 17, "ercentage", 0, 9, false) == 0) && (json_string.getData().Length == 26))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBThreePointPercentage;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 's':
                                                                    if (String.Compare(json_string.getData(), 17, "Made", 0, 4, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 21)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBThreePointsMade;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[21])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 22, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 28))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBThreePointsMadePerGame;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'u':
                                                        if (String.Compare(json_string.getData(), 8, "rnovers", 0, 7, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 15)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBTurnovers;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[15])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 16, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 22))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBTurnoversPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'w':
                                                        if (String.Compare(json_string.getData(), 8, "oPoint", 0, 6, false) == 0)
                                                          {
                                                            switch (json_string.getData()[14])
                                                              {
                                                                case 'A':
                                                                    if (String.Compare(json_string.getData(), 15, "ttempts", 0, 7, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 22)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBTwoPointAttempts;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[22])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 23, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 29))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBTwoPointAttemptsPerGame;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 15, "ercentage", 0, 9, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBTwoPointPercentage;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 's':
                                                                    if (String.Compare(json_string.getData(), 15, "Made", 0, 4, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 19)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBTwoPointsMade;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[19])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 20, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 26))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NCAAMBTwoPointsMadePerGame;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'F':
                        if (String.Compare(json_string.getData(), 2, "L", 0, 1, false) == 0)
                          {
                            switch (json_string.getData()[3])
                              {
                                case '1':
                                    switch (json_string.getData()[4])
                                      {
                                        case 'P':
                                            if ((String.Compare(json_string.getData(), 5, "ointSafety", 0, 10, false) == 0) && (json_string.getData().Length == 15))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFL1PointSafety;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 's':
                                            if ((String.Compare(json_string.getData(), 5, "tDowns", 0, 6, false) == 0) && (json_string.getData().Length == 11))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFL1stDowns;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case '2':
                                    if (String.Compare(json_string.getData(), 4, "PointConversions", 0, 16, false) == 0)
                                      {
                                        switch (json_string.getData()[20])
                                          {
                                            case 'A':
                                                if ((String.Compare(json_string.getData(), 21, "ttempted", 0, 8, false) == 0) && (json_string.getData().Length == 29))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFL2PointConversionsAttempted;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'F':
                                                if ((String.Compare(json_string.getData(), 21, "ailed", 0, 5, false) == 0) && (json_string.getData().Length == 26))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFL2PointConversionsFailed;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'M':
                                                if ((String.Compare(json_string.getData(), 21, "ade", 0, 3, false) == 0) && (json_string.getData().Length == 24))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFL2PointConversionsMade;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 21, "assing", 0, 6, false) == 0) && (json_string.getData().Length == 27))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFL2PointConversionsPassing;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'R':
                                                switch (json_string.getData()[21])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(json_string.getData(), 22, "ceiving", 0, 7, false) == 0) && (json_string.getData().Length == 29))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFL2PointConversionsReceiving;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'u':
                                                        if ((String.Compare(json_string.getData(), 22, "shing", 0, 5, false) == 0) && (json_string.getData().Length == 27))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFL2PointConversionsRushing;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case '3':
                                    if (String.Compare(json_string.getData(), 4, "rdDownConversion", 0, 16, false) == 0)
                                      {
                                        switch (json_string.getData()[20])
                                          {
                                            case 'A':
                                                if ((String.Compare(json_string.getData(), 21, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 28))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFL3rdDownConversionAttempts;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 21, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 24))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFL3rdDownConversionPerc;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 's':
                                                if (json_string.getData().Length == 21)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFL3rdDownConversions;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[21])
                                                  {
                                                    case 'V':
                                                        if (String.Compare(json_string.getData(), 22, "ia", 0, 2, false) == 0)
                                                          {
                                                            switch (json_string.getData()[24])
                                                              {
                                                                case 'P':
                                                                    switch (json_string.getData()[25])
                                                                      {
                                                                        case 'a':
                                                                            if ((String.Compare(json_string.getData(), 26, "ss", 0, 2, false) == 0) && (json_string.getData().Length == 28))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFL3rdDownConversionsViaPass;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'e':
                                                                            if ((String.Compare(json_string.getData(), 26, "nalty", 0, 5, false) == 0) && (json_string.getData().Length == 31))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFL3rdDownConversionsViaPenalty;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'R':
                                                                    if ((String.Compare(json_string.getData(), 25, "ush", 0, 3, false) == 0) && (json_string.getData().Length == 28))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFL3rdDownConversionsViaRush;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case '4':
                                    if (String.Compare(json_string.getData(), 4, "thDownConversion", 0, 16, false) == 0)
                                      {
                                        switch (json_string.getData()[20])
                                          {
                                            case 'A':
                                                if ((String.Compare(json_string.getData(), 21, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 28))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFL4thDownConversionAttempts;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 21, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 24))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFL4thDownConversionPerc;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 's':
                                                if (json_string.getData().Length == 21)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFL4thDownConversions;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[21])
                                                  {
                                                    case 'V':
                                                        if (String.Compare(json_string.getData(), 22, "ia", 0, 2, false) == 0)
                                                          {
                                                            switch (json_string.getData()[24])
                                                              {
                                                                case 'P':
                                                                    switch (json_string.getData()[25])
                                                                      {
                                                                        case 'a':
                                                                            if ((String.Compare(json_string.getData(), 26, "ss", 0, 2, false) == 0) && (json_string.getData().Length == 28))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFL4thDownConversionsViaPass;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'e':
                                                                            if ((String.Compare(json_string.getData(), 26, "nalty", 0, 5, false) == 0) && (json_string.getData().Length == 31))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFL4thDownConversionsViaPenalty;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'R':
                                                                    if ((String.Compare(json_string.getData(), 25, "ush", 0, 3, false) == 0) && (json_string.getData().Length == 28))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFL4thDownConversionsViaRush;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'B':
                                    if (String.Compare(json_string.getData(), 4, "locked", 0, 6, false) == 0)
                                      {
                                        switch (json_string.getData()[10])
                                          {
                                            case 'F':
                                                if (String.Compare(json_string.getData(), 11, "ieldGoalReturns", 0, 15, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 26)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[26])
                                                      {
                                                        case '1':
                                                            if ((String.Compare(json_string.getData(), 27, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 37))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns10PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '2':
                                                            if ((String.Compare(json_string.getData(), 27, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 37))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns20PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '3':
                                                            if ((String.Compare(json_string.getData(), 27, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 37))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns30PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '4':
                                                            if ((String.Compare(json_string.getData(), 27, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 37))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns40PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '5':
                                                            if ((String.Compare(json_string.getData(), 27, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 37))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns50PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'A':
                                                            if ((String.Compare(json_string.getData(), 27, "verageReturn", 0, 12, false) == 0) && (json_string.getData().Length == 39))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsAverageReturn;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(json_string.getData(), 27, "ongestReturn", 0, 12, false) == 0) && (json_string.getData().Length == 39))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsLongestReturn;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'T':
                                                            if (String.Compare(json_string.getData(), 27, "o", 0, 1, false) == 0)
                                                              {
                                                                switch (json_string.getData()[28])
                                                                  {
                                                                    case 't':
                                                                        if ((String.Compare(json_string.getData(), 29, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 36))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsTotalYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'u':
                                                                        if ((String.Compare(json_string.getData(), 29, "chdowns", 0, 7, false) == 0) && (json_string.getData().Length == 36))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsTouchdowns;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'K':
                                                if ((String.Compare(json_string.getData(), 11, "icks", 0, 4, false) == 0) && (json_string.getData().Length == 15))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedKicks;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'P':
                                                if (String.Compare(json_string.getData(), 11, "untReturn", 0, 9, false) == 0)
                                                  {
                                                    switch (json_string.getData()[20])
                                                      {
                                                        case '1':
                                                            if ((String.Compare(json_string.getData(), 21, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedPuntReturn10PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '2':
                                                            if ((String.Compare(json_string.getData(), 21, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedPuntReturn20PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '3':
                                                            if ((String.Compare(json_string.getData(), 21, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedPuntReturn30PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '4':
                                                            if ((String.Compare(json_string.getData(), 21, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedPuntReturn40PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '5':
                                                            if ((String.Compare(json_string.getData(), 21, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedPuntReturn50PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 's':
                                                            if (json_string.getData().Length == 21)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedPuntReturns;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[21])
                                                              {
                                                                case 'A':
                                                                    if ((String.Compare(json_string.getData(), 22, "verageReturn", 0, 12, false) == 0) && (json_string.getData().Length == 34))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedPuntReturnsAverageReturn;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(json_string.getData(), 22, "ongestReturn", 0, 12, false) == 0) && (json_string.getData().Length == 34))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedPuntReturnsLongestReturn;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'T':
                                                                    if (String.Compare(json_string.getData(), 22, "o", 0, 1, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[23])
                                                                          {
                                                                            case 't':
                                                                                if ((String.Compare(json_string.getData(), 24, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 31))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedPuntReturnsTotalYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'u':
                                                                                if ((String.Compare(json_string.getData(), 24, "chdowns", 0, 7, false) == 0) && (json_string.getData().Length == 31))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLBlockedPuntReturnsTouchdowns;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'C':
                                    if (String.Compare(json_string.getData(), 4, "onversion", 0, 9, false) == 0)
                                      {
                                        switch (json_string.getData()[13])
                                          {
                                            case 'A':
                                                if ((String.Compare(json_string.getData(), 14, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 21))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLConversionAttempts;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 's':
                                                switch (json_string.getData()[14])
                                                  {
                                                    case 'C':
                                                        if ((String.Compare(json_string.getData(), 15, "ompleted", 0, 8, false) == 0) && (json_string.getData().Length == 23))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLConversionsCompleted;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'F':
                                                        if ((String.Compare(json_string.getData(), 15, "ailed", 0, 5, false) == 0) && (json_string.getData().Length == 20))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLConversionsFailed;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'E':
                                    if (String.Compare(json_string.getData(), 4, "xtraPoints", 0, 10, false) == 0)
                                      {
                                        switch (json_string.getData()[14])
                                          {
                                            case 'A':
                                                if (String.Compare(json_string.getData(), 15, "ttempted", 0, 8, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 23)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLExtraPointsAttempted;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[23])
                                                      {
                                                        case '2':
                                                            if ((String.Compare(json_string.getData(), 24, "PointConversion", 0, 15, false) == 0) && (json_string.getData().Length == 39))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLExtraPointsAttempted2PointConversion;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'K':
                                                            if ((String.Compare(json_string.getData(), 24, "icking", 0, 6, false) == 0) && (json_string.getData().Length == 30))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLExtraPointsAttemptedKicking;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'B':
                                                if ((String.Compare(json_string.getData(), 15, "locked", 0, 6, false) == 0) && (json_string.getData().Length == 21))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLExtraPointsBlocked;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'M':
                                                if (String.Compare(json_string.getData(), 15, "ade", 0, 3, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 18)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLExtraPointsMade;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[18])
                                                      {
                                                        case '2':
                                                            if ((String.Compare(json_string.getData(), 19, "PointConversion", 0, 15, false) == 0) && (json_string.getData().Length == 34))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLExtraPointsMade2PointConversion;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'K':
                                                            if ((String.Compare(json_string.getData(), 19, "icking", 0, 6, false) == 0) && (json_string.getData().Length == 25))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLExtraPointsMadeKicking;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 15, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 18))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLExtraPointsPerc;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'F':
                                    switch (json_string.getData()[4])
                                      {
                                        case 'i':
                                            if (String.Compare(json_string.getData(), 5, "eldGoal", 0, 7, false) == 0)
                                              {
                                                switch (json_string.getData()[12])
                                                  {
                                                    case 'R':
                                                        if (String.Compare(json_string.getData(), 13, "eturns", 0, 6, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 19)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalReturns;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[19])
                                                              {
                                                                case '1':
                                                                    if ((String.Compare(json_string.getData(), 20, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 30))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalReturns10PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '2':
                                                                    if ((String.Compare(json_string.getData(), 20, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 30))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalReturns20PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '3':
                                                                    if ((String.Compare(json_string.getData(), 20, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 30))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalReturns30PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '4':
                                                                    if ((String.Compare(json_string.getData(), 20, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 30))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalReturns40PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '5':
                                                                    if ((String.Compare(json_string.getData(), 20, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 30))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalReturns50PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'A':
                                                                    if ((String.Compare(json_string.getData(), 20, "verageReturn", 0, 12, false) == 0) && (json_string.getData().Length == 32))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalReturnsAverageReturn;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(json_string.getData(), 20, "ongestReturn", 0, 12, false) == 0) && (json_string.getData().Length == 32))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalReturnsLongestReturn;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'T':
                                                                    if (String.Compare(json_string.getData(), 20, "o", 0, 1, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[21])
                                                                          {
                                                                            case 't':
                                                                                if ((String.Compare(json_string.getData(), 22, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 29))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalReturnsTotalYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'u':
                                                                                if ((String.Compare(json_string.getData(), 22, "chdowns", 0, 7, false) == 0) && (json_string.getData().Length == 29))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalReturnsTouchdowns;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 's':
                                                        switch (json_string.getData()[13])
                                                          {
                                                            case 'A':
                                                                if (String.Compare(json_string.getData(), 14, "ttempted", 0, 8, false) == 0)
                                                                  {
                                                                    if (json_string.getData().Length == 22)
                                                                      {
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalsAttempted;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                      }
                                                                    switch (json_string.getData()[22])
                                                                      {
                                                                        case '1':
                                                                            if ((String.Compare(json_string.getData(), 23, "to19Yards", 0, 9, false) == 0) && (json_string.getData().Length == 32))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalsAttempted1to19Yards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case '2':
                                                                            if ((String.Compare(json_string.getData(), 23, "0to29Yards", 0, 10, false) == 0) && (json_string.getData().Length == 33))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalsAttempted20to29Yards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case '3':
                                                                            if ((String.Compare(json_string.getData(), 23, "0to39Yards", 0, 10, false) == 0) && (json_string.getData().Length == 33))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalsAttempted30to39Yards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case '4':
                                                                            if ((String.Compare(json_string.getData(), 23, "0to49Yards", 0, 10, false) == 0) && (json_string.getData().Length == 33))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalsAttempted40to49Yards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case '5':
                                                                            if ((String.Compare(json_string.getData(), 23, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 33))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalsAttempted50PlusYards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'B':
                                                                if ((String.Compare(json_string.getData(), 14, "locked", 0, 6, false) == 0) && (json_string.getData().Length == 20))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalsBlocked;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'L':
                                                                if ((String.Compare(json_string.getData(), 14, "ongestMade", 0, 10, false) == 0) && (json_string.getData().Length == 24))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalsLongestMade;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'M':
                                                                if (String.Compare(json_string.getData(), 14, "ade", 0, 3, false) == 0)
                                                                  {
                                                                    if (json_string.getData().Length == 17)
                                                                      {
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalsMade;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                      }
                                                                    switch (json_string.getData()[17])
                                                                      {
                                                                        case '1':
                                                                            if ((String.Compare(json_string.getData(), 18, "to19Yards", 0, 9, false) == 0) && (json_string.getData().Length == 27))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalsMade1to19Yards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case '2':
                                                                            if ((String.Compare(json_string.getData(), 18, "0to29Yards", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalsMade20to29Yards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case '3':
                                                                            if ((String.Compare(json_string.getData(), 18, "0to39Yards", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalsMade30to39Yards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case '4':
                                                                            if ((String.Compare(json_string.getData(), 18, "0to49Yards", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalsMade40to49Yards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case '5':
                                                                            if ((String.Compare(json_string.getData(), 18, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalsMade50PlusYards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'P':
                                                                if ((String.Compare(json_string.getData(), 14, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 17))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLFieldGoalsPerc;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'o':
                                            if ((String.Compare(json_string.getData(), 5, "rcedFumbles", 0, 11, false) == 0) && (json_string.getData().Length == 16))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLForcedFumbles;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'u':
                                            if (String.Compare(json_string.getData(), 5, "mbles", 0, 5, false) == 0)
                                              {
                                                if (json_string.getData().Length == 10)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLFumbles;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[10])
                                                  {
                                                    case 'F':
                                                        if ((String.Compare(json_string.getData(), 11, "orced", 0, 5, false) == 0) && (json_string.getData().Length == 16))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLFumblesForced;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'L':
                                                        if ((String.Compare(json_string.getData(), 11, "ost", 0, 3, false) == 0) && (json_string.getData().Length == 14))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLFumblesLost;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'O':
                                                        switch (json_string.getData()[11])
                                                          {
                                                            case 'p':
                                                                if (String.Compare(json_string.getData(), 12, "ponent", 0, 6, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[18])
                                                                      {
                                                                        case 'R':
                                                                            if ((String.Compare(json_string.getData(), 19, "ecovery", 0, 7, false) == 0) && (json_string.getData().Length == 26))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFumblesOpponentRecovery;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'T':
                                                                            if ((String.Compare(json_string.getData(), 19, "ouchdownsFromRecovery", 0, 21, false) == 0) && (json_string.getData().Length == 40))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFumblesOpponentTouchdownsFromRecovery;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'u':
                                                                if ((String.Compare(json_string.getData(), 12, "tOfBounds", 0, 9, false) == 0) && (json_string.getData().Length == 21))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLFumblesOutOfBounds;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'w':
                                                                if (String.Compare(json_string.getData(), 12, "n", 0, 1, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[13])
                                                                      {
                                                                        case 'R':
                                                                            if ((String.Compare(json_string.getData(), 14, "ecovery", 0, 7, false) == 0) && (json_string.getData().Length == 21))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFumblesOwnRecovery;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'T':
                                                                            if ((String.Compare(json_string.getData(), 14, "ouchdownsFromRecovery", 0, 21, false) == 0) && (json_string.getData().Length == 35))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFumblesOwnTouchdownsFromRecovery;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'R':
                                                        if (String.Compare(json_string.getData(), 11, "ecovered", 0, 8, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 19)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLFumblesRecovered;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[19])
                                                              {
                                                                case 'F':
                                                                    if ((String.Compare(json_string.getData(), 20, "orTouchdowns", 0, 12, false) == 0) && (json_string.getData().Length == 32))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLFumblesRecoveredForTouchdowns;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'Y':
                                                        if (String.Compare(json_string.getData(), 11, "ardsFromO", 0, 9, false) == 0)
                                                          {
                                                            switch (json_string.getData()[20])
                                                              {
                                                                case 'p':
                                                                    if ((String.Compare(json_string.getData(), 21, "ponentRecovery", 0, 14, false) == 0) && (json_string.getData().Length == 35))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLFumblesYardsFromOpponentRecovery;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'w':
                                                                    if ((String.Compare(json_string.getData(), 21, "nRecovery", 0, 9, false) == 0) && (json_string.getData().Length == 30))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLFumblesYardsFromOwnRecovery;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'G':
                                    switch (json_string.getData()[4])
                                      {
                                        case 'a':
                                            if (String.Compare(json_string.getData(), 5, "mes", 0, 3, false) == 0)
                                              {
                                                switch (json_string.getData()[8])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 9, "layed", 0, 5, false) == 0) && (json_string.getData().Length == 14))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLGamesPlayed;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'S':
                                                        if ((String.Compare(json_string.getData(), 9, "tarted", 0, 6, false) == 0) && (json_string.getData().Length == 15))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLGamesStarted;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'o':
                                            if (String.Compare(json_string.getData(), 5, "alEfficiency", 0, 12, false) == 0)
                                              {
                                                switch (json_string.getData()[17])
                                                  {
                                                    case 'A':
                                                        if ((String.Compare(json_string.getData(), 18, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 25))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLGoalEfficiencyAttempts;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 18, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 21))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLGoalEfficiencyPerc;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'T':
                                                        if ((String.Compare(json_string.getData(), 18, "ouchdowns", 0, 9, false) == 0) && (json_string.getData().Length == 27))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLGoalEfficiencyTouchdowns;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'I':
                                    if (String.Compare(json_string.getData(), 4, "nterceptions", 0, 12, false) == 0)
                                      {
                                        if (json_string.getData().Length == 16)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLInterceptions;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[16])
                                          {
                                            case 'L':
                                                if ((String.Compare(json_string.getData(), 17, "ongestInterception", 0, 18, false) == 0) && (json_string.getData().Length == 35))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLInterceptionsLongestInterception;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'T':
                                                if ((String.Compare(json_string.getData(), 17, "ouchdowns", 0, 9, false) == 0) && (json_string.getData().Length == 26))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLInterceptionsTouchdowns;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'Y':
                                                if ((String.Compare(json_string.getData(), 17, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 21))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLInterceptionsYards;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'K':
                                    if (String.Compare(json_string.getData(), 4, "ickoff", 0, 6, false) == 0)
                                      {
                                        switch (json_string.getData()[10])
                                          {
                                            case 'R':
                                                if (String.Compare(json_string.getData(), 11, "eturns", 0, 6, false) == 0)
                                                  {
                                                    switch (json_string.getData()[17])
                                                      {
                                                        case '1':
                                                            if ((String.Compare(json_string.getData(), 18, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffReturns10PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '2':
                                                            if ((String.Compare(json_string.getData(), 18, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffReturns20PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '3':
                                                            if ((String.Compare(json_string.getData(), 18, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffReturns30PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '4':
                                                            if ((String.Compare(json_string.getData(), 18, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffReturns40PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case '5':
                                                            if ((String.Compare(json_string.getData(), 18, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffReturns50PlusYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'A':
                                                            if ((String.Compare(json_string.getData(), 18, "verageRun", 0, 9, false) == 0) && (json_string.getData().Length == 27))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffReturnsAverageRun;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'F':
                                                            if ((String.Compare(json_string.getData(), 18, "airCatches", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffReturnsFairCatches;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'L':
                                                            if ((String.Compare(json_string.getData(), 18, "ongestKickReturn", 0, 16, false) == 0) && (json_string.getData().Length == 34))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffReturnsLongestKickReturn;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'R':
                                                            if ((String.Compare(json_string.getData(), 18, "eturns", 0, 6, false) == 0) && (json_string.getData().Length == 24))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffReturnsReturns;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'T':
                                                            if ((String.Compare(json_string.getData(), 18, "ouchdowns", 0, 9, false) == 0) && (json_string.getData().Length == 27))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffReturnsTouchdowns;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'Y':
                                                            if ((String.Compare(json_string.getData(), 18, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 22))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffReturnsYards;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 's':
                                                switch (json_string.getData()[11])
                                                  {
                                                    case 'A':
                                                        if (String.Compare(json_string.getData(), 12, "verage", 0, 6, false) == 0)
                                                          {
                                                            switch (json_string.getData()[18])
                                                              {
                                                                case 'G':
                                                                    if ((String.Compare(json_string.getData(), 19, "rossYards", 0, 9, false) == 0) && (json_string.getData().Length == 28))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffsAverageGrossYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'N':
                                                                    if ((String.Compare(json_string.getData(), 19, "etYards", 0, 7, false) == 0) && (json_string.getData().Length == 26))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffsAverageNetYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'R':
                                                                    if ((String.Compare(json_string.getData(), 19, "eturnYards", 0, 10, false) == 0) && (json_string.getData().Length == 29))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffsAverageReturnYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'E':
                                                        if ((String.Compare(json_string.getData(), 12, "ndZoneKicks", 0, 11, false) == 0) && (json_string.getData().Length == 23))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffsEndZoneKicks;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'G':
                                                        if ((String.Compare(json_string.getData(), 12, "rossYards", 0, 9, false) == 0) && (json_string.getData().Length == 21))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffsGrossYards;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'I':
                                                        if (String.Compare(json_string.getData(), 12, "nsideOpponents20YardLine", 0, 24, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 36)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffsInsideOpponents20YardLine;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[36])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 37, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 40))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffsInsideOpponents20YardLinePerc;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'K':
                                                        if ((String.Compare(json_string.getData(), 12, "icks", 0, 4, false) == 0) && (json_string.getData().Length == 16))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffsKicks;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'L':
                                                        if ((String.Compare(json_string.getData(), 12, "ongestKick", 0, 10, false) == 0) && (json_string.getData().Length == 22))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffsLongestKick;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'N':
                                                        if ((String.Compare(json_string.getData(), 12, "etYards", 0, 7, false) == 0) && (json_string.getData().Length == 19))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffsNetYards;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'R':
                                                        if ((String.Compare(json_string.getData(), 12, "eturned", 0, 7, false) == 0) && (json_string.getData().Length == 19))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffsReturned;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'T':
                                                        if (String.Compare(json_string.getData(), 12, "o", 0, 1, false) == 0)
                                                          {
                                                            switch (json_string.getData()[13])
                                                              {
                                                                case 't':
                                                                    if ((String.Compare(json_string.getData(), 14, "alReturnYards", 0, 13, false) == 0) && (json_string.getData().Length == 27))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffsTotalReturnYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'u':
                                                                    if (String.Compare(json_string.getData(), 14, "chbacks", 0, 7, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 21)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffsTouchbacks;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[21])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 22, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 25))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLKickoffsTouchbacksPerc;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'M':
                                    if (String.Compare(json_string.getData(), 4, "isc", 0, 3, false) == 0)
                                      {
                                        switch (json_string.getData()[7])
                                          {
                                            case 'A':
                                                if ((String.Compare(json_string.getData(), 8, "ssistedTackles", 0, 14, false) == 0) && (json_string.getData().Length == 22))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLMiscAssistedTackles;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'C':
                                                if ((String.Compare(json_string.getData(), 8, "ombinedTackles", 0, 14, false) == 0) && (json_string.getData().Length == 22))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLMiscCombinedTackles;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'F':
                                                switch (json_string.getData()[8])
                                                  {
                                                    case 'o':
                                                        if ((String.Compare(json_string.getData(), 9, "rcedFumbles", 0, 11, false) == 0) && (json_string.getData().Length == 20))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLMiscForcedFumbles;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'u':
                                                        if ((String.Compare(json_string.getData(), 9, "mblesRecovered", 0, 14, false) == 0) && (json_string.getData().Length == 23))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLMiscFumblesRecovered;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            case 'T':
                                                if ((String.Compare(json_string.getData(), 8, "ackles", 0, 6, false) == 0) && (json_string.getData().Length == 14))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLMiscTackles;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'P':
                                    switch (json_string.getData()[4])
                                      {
                                        case 'a':
                                            if (String.Compare(json_string.getData(), 5, "ss", 0, 2, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'e':
                                                        if ((String.Compare(json_string.getData(), 8, "sDefended", 0, 9, false) == 0) && (json_string.getData().Length == 17))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassesDefended;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'i':
                                                        if (String.Compare(json_string.getData(), 8, "ng", 0, 2, false) == 0)
                                                          {
                                                            switch (json_string.getData()[10])
                                                              {
                                                                case '1':
                                                                    switch (json_string.getData()[11])
                                                                      {
                                                                        case '0':
                                                                            if ((String.Compare(json_string.getData(), 12, "PlusYards", 0, 9, false) == 0) && (json_string.getData().Length == 21))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassing10PlusYards;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 's':
                                                                            if ((String.Compare(json_string.getData(), 12, "tDowns", 0, 6, false) == 0) && (json_string.getData().Length == 18))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassing1stDowns;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case '2':
                                                                    if ((String.Compare(json_string.getData(), 11, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 21))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassing20PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '3':
                                                                    if ((String.Compare(json_string.getData(), 11, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 21))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassing30PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '4':
                                                                    if ((String.Compare(json_string.getData(), 11, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 21))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassing40PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '5':
                                                                    if ((String.Compare(json_string.getData(), 11, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 21))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassing50PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'A':
                                                                    switch (json_string.getData()[11])
                                                                      {
                                                                        case 't':
                                                                            if ((String.Compare(json_string.getData(), 12, "tempts", 0, 6, false) == 0) && (json_string.getData().Length == 18))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingAttempts;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'v':
                                                                            if (String.Compare(json_string.getData(), 12, "erageYardsPer", 0, 13, false) == 0)
                                                                              {
                                                                                switch (json_string.getData()[25])
                                                                                  {
                                                                                    case 'A':
                                                                                        if ((String.Compare(json_string.getData(), 26, "ttempt", 0, 6, false) == 0) && (json_string.getData().Length == 32))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingAverageYardsPerAttempt;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'C':
                                                                                        if ((String.Compare(json_string.getData(), 26, "ompletion", 0, 9, false) == 0) && (json_string.getData().Length == 35))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingAverageYardsPerCompletion;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'C':
                                                                    if (String.Compare(json_string.getData(), 11, "ompletion", 0, 9, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[20])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 21, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 24))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingCompletionPerc;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 's':
                                                                                if (json_string.getData().Length == 21)
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingCompletions;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'G':
                                                                    if ((String.Compare(json_string.getData(), 11, "rossYards", 0, 9, false) == 0) && (json_string.getData().Length == 20))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingGrossYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'I':
                                                                    if (String.Compare(json_string.getData(), 11, "nterception", 0, 11, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[22])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 23, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 26))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingInterceptionPerc;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 's':
                                                                                if (json_string.getData().Length == 23)
                                                                                  {
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingInterceptions;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                  }
                                                                                switch (json_string.getData()[23])
                                                                                  {
                                                                                    case 'R':
                                                                                        if ((String.Compare(json_string.getData(), 24, "eturnedForTouchdown", 0, 19, false) == 0) && (json_string.getData().Length == 43))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingInterceptionsReturnedForTouchdown;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(json_string.getData(), 11, "ongestPass", 0, 10, false) == 0) && (json_string.getData().Length == 21))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingLongestPass;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'N':
                                                                    if ((String.Compare(json_string.getData(), 11, "etYards", 0, 7, false) == 0) && (json_string.getData().Length == 18))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingNetYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'R':
                                                                    switch (json_string.getData()[11])
                                                                      {
                                                                        case 'a':
                                                                            if ((String.Compare(json_string.getData(), 12, "ting", 0, 4, false) == 0) && (json_string.getData().Length == 16))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingRating;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'e':
                                                                            if ((String.Compare(json_string.getData(), 12, "dZoneAttempts", 0, 13, false) == 0) && (json_string.getData().Length == 25))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingRedZoneAttempts;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'S':
                                                                    if (String.Compare(json_string.getData(), 11, "acked", 0, 5, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 16)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingSacked;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[16])
                                                                          {
                                                                            case 'Y':
                                                                                if ((String.Compare(json_string.getData(), 17, "ardsLost", 0, 8, false) == 0) && (json_string.getData().Length == 25))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingSackedYardsLost;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'T':
                                                                    switch (json_string.getData()[11])
                                                                      {
                                                                        case 'a':
                                                                            if ((String.Compare(json_string.getData(), 12, "ckledForSafety", 0, 14, false) == 0) && (json_string.getData().Length == 26))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingTackledForSafety;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'o':
                                                                            switch (json_string.getData()[12])
                                                                              {
                                                                                case 't':
                                                                                    if ((String.Compare(json_string.getData(), 13, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 20))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingTotalYards;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                case 'u':
                                                                                    if (String.Compare(json_string.getData(), 13, "chdown", 0, 6, false) == 0)
                                                                                      {
                                                                                        switch (json_string.getData()[19])
                                                                                          {
                                                                                            case 'P':
                                                                                                if ((String.Compare(json_string.getData(), 20, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 23))
                                                                                                      {
                                                                                                        the_open_enum.in_known_list = true;
                                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingTouchdownPerc;
                                                                                                        goto open_enum_is_done;
                                                                                                      }
                                                                                                break;
                                                                                            case 's':
                                                                                                if (json_string.getData().Length == 20)
                                                                                                      {
                                                                                                        the_open_enum.in_known_list = true;
                                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLPassingTouchdowns;
                                                                                                        goto open_enum_is_done;
                                                                                                      }
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                      }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'e':
                                            if (String.Compare(json_string.getData(), 5, "nalties", 0, 7, false) == 0)
                                              {
                                                if (json_string.getData().Length == 12)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLPenalties;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[12])
                                                  {
                                                    case '1':
                                                        if ((String.Compare(json_string.getData(), 13, "stDowns", 0, 7, false) == 0) && (json_string.getData().Length == 20))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLPenalties1stDowns;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'Y':
                                                        if ((String.Compare(json_string.getData(), 13, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 17))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLPenaltiesYards;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'u':
                                            if (String.Compare(json_string.getData(), 5, "nt", 0, 2, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'R':
                                                        if (String.Compare(json_string.getData(), 8, "eturns", 0, 6, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 14)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntReturns;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[14])
                                                              {
                                                                case '1':
                                                                    if ((String.Compare(json_string.getData(), 15, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 25))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntReturns10PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '2':
                                                                    if ((String.Compare(json_string.getData(), 15, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 25))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntReturns20PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '3':
                                                                    if ((String.Compare(json_string.getData(), 15, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 25))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntReturns30PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '4':
                                                                    if ((String.Compare(json_string.getData(), 15, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 25))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntReturns40PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case '5':
                                                                    if ((String.Compare(json_string.getData(), 15, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 25))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntReturns50PlusYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'A':
                                                                    if ((String.Compare(json_string.getData(), 15, "verageRun", 0, 9, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntReturnsAverageRun;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'F':
                                                                    if ((String.Compare(json_string.getData(), 15, "airCatches", 0, 10, false) == 0) && (json_string.getData().Length == 25))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntReturnsFairCatches;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(json_string.getData(), 15, "ongestKickReturn", 0, 16, false) == 0) && (json_string.getData().Length == 31))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntReturnsLongestKickReturn;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'T':
                                                                    if ((String.Compare(json_string.getData(), 15, "ouchdowns", 0, 9, false) == 0) && (json_string.getData().Length == 24))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntReturnsTouchdowns;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'Y':
                                                                    if ((String.Compare(json_string.getData(), 15, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 19))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntReturnsYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'i':
                                                        if (String.Compare(json_string.getData(), 8, "ng", 0, 2, false) == 0)
                                                          {
                                                            switch (json_string.getData()[10])
                                                              {
                                                                case 'A':
                                                                    if (String.Compare(json_string.getData(), 11, "verage", 0, 6, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[17])
                                                                          {
                                                                            case 'G':
                                                                                if ((String.Compare(json_string.getData(), 18, "rossYards", 0, 9, false) == 0) && (json_string.getData().Length == 27))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntingAverageGrossYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'N':
                                                                                if ((String.Compare(json_string.getData(), 18, "etYards", 0, 7, false) == 0) && (json_string.getData().Length == 25))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntingAverageNetYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'R':
                                                                                if ((String.Compare(json_string.getData(), 18, "eturnYards", 0, 10, false) == 0) && (json_string.getData().Length == 28))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntingAverageReturnYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'B':
                                                                    if ((String.Compare(json_string.getData(), 11, "locked", 0, 6, false) == 0) && (json_string.getData().Length == 17))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntingBlocked;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'G':
                                                                    if ((String.Compare(json_string.getData(), 11, "rossYards", 0, 9, false) == 0) && (json_string.getData().Length == 20))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntingGrossYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'I':
                                                                    if (String.Compare(json_string.getData(), 11, "nsideOpponents20YardLine", 0, 24, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 35)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntingInsideOpponents20YardLine;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[35])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 36, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 39))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntingInsideOpponents20YardLinePerc;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(json_string.getData(), 11, "ongestPunt", 0, 10, false) == 0) && (json_string.getData().Length == 21))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntingLongestPunt;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'N':
                                                                    if ((String.Compare(json_string.getData(), 11, "etYards", 0, 7, false) == 0) && (json_string.getData().Length == 18))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntingNetYards;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 11, "unts", 0, 4, false) == 0) && (json_string.getData().Length == 15))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntingPunts;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'R':
                                                                    if (String.Compare(json_string.getData(), 11, "eturn", 0, 5, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[16])
                                                                          {
                                                                            case 'Y':
                                                                                if ((String.Compare(json_string.getData(), 17, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 21))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntingReturnYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'e':
                                                                                if ((String.Compare(json_string.getData(), 17, "d", 0, 1, false) == 0) && (json_string.getData().Length == 18))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntingReturned;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'T':
                                                                    if (String.Compare(json_string.getData(), 11, "ouchbacks", 0, 9, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 20)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntingTouchbacks;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[20])
                                                                          {
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 21, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 24))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLPuntingTouchbacksPerc;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'Q':
                                    if ((String.Compare(json_string.getData(), 4, "uarterbackHits", 0, 14, false) == 0) && (json_string.getData().Length == 18))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLQuarterbackHits;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'R':
                                    switch (json_string.getData()[4])
                                      {
                                        case 'e':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'c':
                                                    if (String.Compare(json_string.getData(), 6, "eiving", 0, 6, false) == 0)
                                                      {
                                                        switch (json_string.getData()[12])
                                                          {
                                                            case '1':
                                                                switch (json_string.getData()[13])
                                                                  {
                                                                    case '0':
                                                                        if ((String.Compare(json_string.getData(), 14, "PlusYards", 0, 9, false) == 0) && (json_string.getData().Length == 23))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLReceiving10PlusYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 's':
                                                                        if ((String.Compare(json_string.getData(), 14, "tDowns", 0, 6, false) == 0) && (json_string.getData().Length == 20))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLReceiving1stDowns;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                                break;
                                                            case '2':
                                                                if ((String.Compare(json_string.getData(), 13, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 23))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLReceiving20PlusYards;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case '3':
                                                                if ((String.Compare(json_string.getData(), 13, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 23))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLReceiving30PlusYards;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case '4':
                                                                if ((String.Compare(json_string.getData(), 13, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 23))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLReceiving40PlusYards;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case '5':
                                                                if ((String.Compare(json_string.getData(), 13, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 23))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLReceiving50PlusYards;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'A':
                                                                if ((String.Compare(json_string.getData(), 13, "verageReception", 0, 15, false) == 0) && (json_string.getData().Length == 28))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLReceivingAverageReception;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'F':
                                                                if ((String.Compare(json_string.getData(), 13, "umbledOnReception", 0, 17, false) == 0) && (json_string.getData().Length == 30))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLReceivingFumbledOnReception;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'L':
                                                                if ((String.Compare(json_string.getData(), 13, "ongestReception", 0, 15, false) == 0) && (json_string.getData().Length == 28))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLReceivingLongestReception;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'R':
                                                                if (String.Compare(json_string.getData(), 13, "e", 0, 1, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[14])
                                                                      {
                                                                        case 'c':
                                                                            if ((String.Compare(json_string.getData(), 15, "eptions", 0, 7, false) == 0) && (json_string.getData().Length == 22))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLReceivingReceptions;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'd':
                                                                            if ((String.Compare(json_string.getData(), 15, "ZoneTargets", 0, 11, false) == 0) && (json_string.getData().Length == 26))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLReceivingRedZoneTargets;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'T':
                                                                switch (json_string.getData()[13])
                                                                  {
                                                                    case 'a':
                                                                        if ((String.Compare(json_string.getData(), 14, "rgets", 0, 5, false) == 0) && (json_string.getData().Length == 19))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLReceivingTargets;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'o':
                                                                        switch (json_string.getData()[14])
                                                                          {
                                                                            case 't':
                                                                                if ((String.Compare(json_string.getData(), 15, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 22))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLReceivingTotalYards;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'u':
                                                                                if ((String.Compare(json_string.getData(), 15, "chdowns", 0, 7, false) == 0) && (json_string.getData().Length == 22))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLReceivingTouchdowns;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                                break;
                                                            case 'Y':
                                                                if ((String.Compare(json_string.getData(), 13, "ardsAfterCompletion", 0, 19, false) == 0) && (json_string.getData().Length == 32))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLReceivingYardsAfterCompletion;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'd':
                                                    if (String.Compare(json_string.getData(), 6, "ZoneEfficiency", 0, 14, false) == 0)
                                                      {
                                                        switch (json_string.getData()[20])
                                                          {
                                                            case 'A':
                                                                if ((String.Compare(json_string.getData(), 21, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 28))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLRedZoneEfficiencyAttempts;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'C':
                                                                if ((String.Compare(json_string.getData(), 21, "onversions", 0, 10, false) == 0) && (json_string.getData().Length == 31))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLRedZoneEfficiencyConversions;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'P':
                                                                if ((String.Compare(json_string.getData(), 21, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 24))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLRedZoneEfficiencyPerc;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'u':
                                            if (String.Compare(json_string.getData(), 5, "shing", 0, 5, false) == 0)
                                              {
                                                switch (json_string.getData()[10])
                                                  {
                                                    case '1':
                                                        switch (json_string.getData()[11])
                                                          {
                                                            case '0':
                                                                if ((String.Compare(json_string.getData(), 12, "PlusYards", 0, 9, false) == 0) && (json_string.getData().Length == 21))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLRushing10PlusYards;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 's':
                                                                if (String.Compare(json_string.getData(), 12, "tDown", 0, 5, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[17])
                                                                      {
                                                                        case 'P':
                                                                            if ((String.Compare(json_string.getData(), 18, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 21))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLRushing1stDownPerc;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 's':
                                                                            if (json_string.getData().Length == 18)
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NFLRushing1stDowns;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case '2':
                                                        if ((String.Compare(json_string.getData(), 11, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 21))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLRushing20PlusYards;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case '3':
                                                        if ((String.Compare(json_string.getData(), 11, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 21))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLRushing30PlusYards;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case '4':
                                                        if ((String.Compare(json_string.getData(), 11, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 21))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLRushing40PlusYards;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case '5':
                                                        if ((String.Compare(json_string.getData(), 11, "0PlusYards", 0, 10, false) == 0) && (json_string.getData().Length == 21))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLRushing50PlusYards;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'A':
                                                        switch (json_string.getData()[11])
                                                          {
                                                            case 't':
                                                                if ((String.Compare(json_string.getData(), 12, "tempts", 0, 6, false) == 0) && (json_string.getData().Length == 18))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLRushingAttempts;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'v':
                                                                if ((String.Compare(json_string.getData(), 12, "erageRush", 0, 9, false) == 0) && (json_string.getData().Length == 21))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLRushingAverageRush;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'F':
                                                        if ((String.Compare(json_string.getData(), 11, "umbledOnRush", 0, 12, false) == 0) && (json_string.getData().Length == 23))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLRushingFumbledOnRush;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'L':
                                                        if ((String.Compare(json_string.getData(), 11, "ongestRush", 0, 10, false) == 0) && (json_string.getData().Length == 21))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLRushingLongestRush;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'R':
                                                        if ((String.Compare(json_string.getData(), 11, "edZoneAttempts", 0, 14, false) == 0) && (json_string.getData().Length == 25))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLRushingRedZoneAttempts;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'T':
                                                        switch (json_string.getData()[11])
                                                          {
                                                            case 'a':
                                                                if ((String.Compare(json_string.getData(), 12, "ckledForSafety", 0, 14, false) == 0) && (json_string.getData().Length == 26))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLRushingTackledForSafety;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'o':
                                                                switch (json_string.getData()[12])
                                                                  {
                                                                    case 't':
                                                                        if ((String.Compare(json_string.getData(), 13, "alYards", 0, 7, false) == 0) && (json_string.getData().Length == 20))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLRushingTotalYards;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'u':
                                                                        if ((String.Compare(json_string.getData(), 13, "chdowns", 0, 7, false) == 0) && (json_string.getData().Length == 20))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLRushingTouchdowns;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'S':
                                    switch (json_string.getData()[4])
                                      {
                                        case 'a':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'c':
                                                    if (String.Compare(json_string.getData(), 6, "k", 0, 1, false) == 0)
                                                      {
                                                        switch (json_string.getData()[7])
                                                          {
                                                            case 'Y':
                                                                if ((String.Compare(json_string.getData(), 8, "ards", 0, 4, false) == 0) && (json_string.getData().Length == 12))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLSackYards;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 's':
                                                                if (json_string.getData().Length == 8)
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLSacks;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'f':
                                                    if ((String.Compare(json_string.getData(), 6, "eties", 0, 5, false) == 0) && (json_string.getData().Length == 11))
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NFLSafeties;
                                                            goto open_enum_is_done;
                                                          }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        case 'p':
                                            if (String.Compare(json_string.getData(), 5, "ecialTeams", 0, 10, false) == 0)
                                              {
                                                switch (json_string.getData()[15])
                                                  {
                                                    case 'A':
                                                        if ((String.Compare(json_string.getData(), 16, "ssistedTackles", 0, 14, false) == 0) && (json_string.getData().Length == 30))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLSpecialTeamsAssistedTackles;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'C':
                                                        if ((String.Compare(json_string.getData(), 16, "ombinedTackles", 0, 14, false) == 0) && (json_string.getData().Length == 30))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLSpecialTeamsCombinedTackles;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'F':
                                                        switch (json_string.getData()[16])
                                                          {
                                                            case 'o':
                                                                if ((String.Compare(json_string.getData(), 17, "rcedFumbles", 0, 11, false) == 0) && (json_string.getData().Length == 28))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLSpecialTeamsForcedFumbles;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'u':
                                                                if ((String.Compare(json_string.getData(), 17, "mblesRecovered", 0, 14, false) == 0) && (json_string.getData().Length == 31))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLSpecialTeamsFumblesRecovered;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 'T':
                                                        if ((String.Compare(json_string.getData(), 16, "otalTackles", 0, 11, false) == 0) && (json_string.getData().Length == 27))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLSpecialTeamsTotalTackles;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'T':
                                    if (String.Compare(json_string.getData(), 4, "ackles", 0, 6, false) == 0)
                                      {
                                        if (json_string.getData().Length == 10)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_NFLTackles;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[10])
                                          {
                                            case 'A':
                                                if ((String.Compare(json_string.getData(), 11, "ssisted", 0, 7, false) == 0) && (json_string.getData().Length == 18))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLTacklesAssisted;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'C':
                                                if ((String.Compare(json_string.getData(), 11, "ombined", 0, 7, false) == 0) && (json_string.getData().Length == 18))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLTacklesCombined;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'F':
                                                if ((String.Compare(json_string.getData(), 11, "orLoss", 0, 6, false) == 0) && (json_string.getData().Length == 17))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NFLTacklesForLoss;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    case 'H':
                        if (String.Compare(json_string.getData(), 2, "L", 0, 1, false) == 0)
                          {
                            switch (json_string.getData()[3])
                              {
                                case 'A':
                                    switch (json_string.getData()[4])
                                      {
                                        case 's':
                                            if (String.Compare(json_string.getData(), 5, "sists", 0, 5, false) == 0)
                                              {
                                                if (json_string.getData().Length == 10)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLAssists;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[10])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 11, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 17))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLAssistsPerGame;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'v':
                                            if ((String.Compare(json_string.getData(), 5, "erageTimeOnIce", 0, 14, false) == 0) && (json_string.getData().Length == 19))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLAverageTimeOnIce;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'B':
                                    if (String.Compare(json_string.getData(), 4, "locked", 0, 6, false) == 0)
                                      {
                                        switch (json_string.getData()[10])
                                          {
                                            case 'A':
                                                if (String.Compare(json_string.getData(), 11, "ttempts", 0, 7, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 18)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLBlockedAttempts;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[18])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 19, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 25))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLBlockedAttemptsPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'S':
                                                if (String.Compare(json_string.getData(), 11, "hots", 0, 4, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 15)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLBlockedShots;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[15])
                                                      {
                                                        case 'P':
                                                            if ((String.Compare(json_string.getData(), 16, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 22))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLBlockedShotsPerGame;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'E':
                                    if (String.Compare(json_string.getData(), 4, "venStrength", 0, 11, false) == 0)
                                      {
                                        switch (json_string.getData()[15])
                                          {
                                            case 'A':
                                                if ((String.Compare(json_string.getData(), 16, "ssists", 0, 6, false) == 0) && (json_string.getData().Length == 22))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLEvenStrengthAssists;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'F':
                                                if (String.Compare(json_string.getData(), 16, "aceoff", 0, 6, false) == 0)
                                                  {
                                                    switch (json_string.getData()[22])
                                                      {
                                                        case 'W':
                                                            if ((String.Compare(json_string.getData(), 23, "inPerc", 0, 6, false) == 0) && (json_string.getData().Length == 29))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLEvenStrengthFaceoffWinPerc;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 's':
                                                            if (json_string.getData().Length == 23)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLEvenStrengthFaceoffs;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[23])
                                                              {
                                                                case 'L':
                                                                    if ((String.Compare(json_string.getData(), 24, "ost", 0, 3, false) == 0) && (json_string.getData().Length == 27))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLEvenStrengthFaceoffsLost;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'W':
                                                                    if ((String.Compare(json_string.getData(), 24, "on", 0, 2, false) == 0) && (json_string.getData().Length == 26))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLEvenStrengthFaceoffsWon;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'G':
                                                if ((String.Compare(json_string.getData(), 16, "oals", 0, 4, false) == 0) && (json_string.getData().Length == 20))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLEvenStrengthGoals;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'M':
                                                if ((String.Compare(json_string.getData(), 16, "issedShots", 0, 10, false) == 0) && (json_string.getData().Length == 26))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLEvenStrengthMissedShots;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'S':
                                                if ((String.Compare(json_string.getData(), 16, "hotsOnGoal", 0, 10, false) == 0) && (json_string.getData().Length == 26))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLEvenStrengthShotsOnGoal;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'T':
                                                if ((String.Compare(json_string.getData(), 16, "imeOnIce", 0, 8, false) == 0) && (json_string.getData().Length == 24))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLEvenStrengthTimeOnIce;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'F':
                                    if (String.Compare(json_string.getData(), 4, "aceoff", 0, 6, false) == 0)
                                      {
                                        switch (json_string.getData()[10])
                                          {
                                            case 'W':
                                                if ((String.Compare(json_string.getData(), 11, "inPerc", 0, 6, false) == 0) && (json_string.getData().Length == 17))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLFaceoffWinPerc;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 's':
                                                if (json_string.getData().Length == 11)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLFaceoffs;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[11])
                                                  {
                                                    case 'L':
                                                        if ((String.Compare(json_string.getData(), 12, "ost", 0, 3, false) == 0) && (json_string.getData().Length == 15))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLFaceoffsLost;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'W':
                                                        if ((String.Compare(json_string.getData(), 12, "on", 0, 2, false) == 0) && (json_string.getData().Length == 14))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLFaceoffsWon;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'G':
                                    switch (json_string.getData()[4])
                                      {
                                        case 'a':
                                            if (String.Compare(json_string.getData(), 5, "me", 0, 2, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 'W':
                                                        if (String.Compare(json_string.getData(), 8, "inningGoal", 0, 10, false) == 0)
                                                          {
                                                            switch (json_string.getData()[18])
                                                              {
                                                                case 'F':
                                                                    if ((String.Compare(json_string.getData(), 19, "lag", 0, 3, false) == 0) && (json_string.getData().Length == 22))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLGameWinningGoalFlag;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 's':
                                                                    if (json_string.getData().Length == 19)
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLGameWinningGoals;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 's':
                                                        if ((String.Compare(json_string.getData(), 8, "Played", 0, 6, false) == 0) && (json_string.getData().Length == 14))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLGamesPlayed;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'i':
                                            if (String.Compare(json_string.getData(), 5, "veaways", 0, 7, false) == 0)
                                              {
                                                if (json_string.getData().Length == 12)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLGiveaways;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[12])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 13, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 19))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLGiveawaysPerGame;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'o':
                                            if (String.Compare(json_string.getData(), 5, "al", 0, 2, false) == 0)
                                              {
                                                switch (json_string.getData()[7])
                                                  {
                                                    case 's':
                                                        if (json_string.getData().Length == 8)
                                                          {
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoals;
                                                                goto open_enum_is_done;
                                                              }
                                                          }
                                                        switch (json_string.getData()[8])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(json_string.getData(), 9, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 15))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoalsPerGame;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    case 't':
                                                        if (String.Compare(json_string.getData(), 8, "ending", 0, 6, false) == 0)
                                                          {
                                                            switch (json_string.getData()[14])
                                                              {
                                                                case 'E':
                                                                    switch (json_string.getData()[15])
                                                                      {
                                                                        case 'm':
                                                                            if (String.Compare(json_string.getData(), 16, "ptyNet", 0, 6, false) == 0)
                                                                              {
                                                                                switch (json_string.getData()[22])
                                                                                  {
                                                                                    case 'E':
                                                                                        if ((String.Compare(json_string.getData(), 23, "venStrengthGoalsAgainst", 0, 23, false) == 0) && (json_string.getData().Length == 46))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingEmptyNetEvenStrengthGoalsAgainst;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'G':
                                                                                        if ((String.Compare(json_string.getData(), 23, "oalsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 34))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingEmptyNetGoalsAgainst;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'P':
                                                                                        if ((String.Compare(json_string.getData(), 23, "owerPlayGoalsAgainst", 0, 20, false) == 0) && (json_string.getData().Length == 43))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingEmptyNetPowerPlayGoalsAgainst;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'S':
                                                                                        if (String.Compare(json_string.getData(), 23, "ho", 0, 2, false) == 0)
                                                                                          {
                                                                                            switch (json_string.getData()[25])
                                                                                              {
                                                                                                case 'r':
                                                                                                    if ((String.Compare(json_string.getData(), 26, "tHandedGoalsAgainst", 0, 19, false) == 0) && (json_string.getData().Length == 45))
                                                                                                          {
                                                                                                            the_open_enum.in_known_list = true;
                                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingEmptyNetShortHandedGoalsAgainst;
                                                                                                            goto open_enum_is_done;
                                                                                                          }
                                                                                                    break;
                                                                                                case 't':
                                                                                                    if ((String.Compare(json_string.getData(), 26, "sAgainst", 0, 8, false) == 0) && (json_string.getData().Length == 34))
                                                                                                          {
                                                                                                            the_open_enum.in_known_list = true;
                                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingEmptyNetShotsAgainst;
                                                                                                            goto open_enum_is_done;
                                                                                                          }
                                                                                                    break;
                                                                                                default:
                                                                                                    break;
                                                                                              }
                                                                                          }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 'v':
                                                                            if (String.Compare(json_string.getData(), 16, "enStrength", 0, 10, false) == 0)
                                                                              {
                                                                                switch (json_string.getData()[26])
                                                                                  {
                                                                                    case 'G':
                                                                                        if ((String.Compare(json_string.getData(), 27, "oalsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 38))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthGoalsAgainst;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'S':
                                                                                        switch (json_string.getData()[27])
                                                                                          {
                                                                                            case 'a':
                                                                                                if (String.Compare(json_string.getData(), 28, "ve", 0, 2, false) == 0)
                                                                                                  {
                                                                                                    switch (json_string.getData()[30])
                                                                                                      {
                                                                                                        case 'P':
                                                                                                            if ((String.Compare(json_string.getData(), 31, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 34))
                                                                                                                  {
                                                                                                                    the_open_enum.in_known_list = true;
                                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthSavePerc;
                                                                                                                    goto open_enum_is_done;
                                                                                                                  }
                                                                                                            break;
                                                                                                        case 's':
                                                                                                            if (json_string.getData().Length == 31)
                                                                                                                  {
                                                                                                                    the_open_enum.in_known_list = true;
                                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthSaves;
                                                                                                                    goto open_enum_is_done;
                                                                                                                  }
                                                                                                            break;
                                                                                                        default:
                                                                                                            break;
                                                                                                      }
                                                                                                  }
                                                                                                break;
                                                                                            case 'h':
                                                                                                if ((String.Compare(json_string.getData(), 28, "otsAgainst", 0, 10, false) == 0) && (json_string.getData().Length == 38))
                                                                                                      {
                                                                                                        the_open_enum.in_known_list = true;
                                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthShotsAgainst;
                                                                                                        goto open_enum_is_done;
                                                                                                      }
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'G':
                                                                    if (String.Compare(json_string.getData(), 15, "oalsAgainst", 0, 11, false) == 0)
                                                                      {
                                                                        if (json_string.getData().Length == 26)
                                                                          {
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingGoalsAgainst;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                          }
                                                                        switch (json_string.getData()[26])
                                                                          {
                                                                            case 'A':
                                                                                if ((String.Compare(json_string.getData(), 27, "verage", 0, 6, false) == 0) && (json_string.getData().Length == 33))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingGoalsAgainstAverage;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'P':
                                                                                if ((String.Compare(json_string.getData(), 27, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 33))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingGoalsAgainstPerGame;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'L':
                                                                    if ((String.Compare(json_string.getData(), 15, "osses", 0, 5, false) == 0) && (json_string.getData().Length == 20))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingLosses;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                case 'O':
                                                                    switch (json_string.getData()[15])
                                                                      {
                                                                        case 'u':
                                                                            if ((String.Compare(json_string.getData(), 16, "tcome", 0, 5, false) == 0) && (json_string.getData().Length == 21))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingOutcome;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 'v':
                                                                            if ((String.Compare(json_string.getData(), 16, "ertimeLosses", 0, 12, false) == 0) && (json_string.getData().Length == 28))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingOvertimeLosses;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'P':
                                                                    switch (json_string.getData()[15])
                                                                      {
                                                                        case 'e':
                                                                            if (String.Compare(json_string.getData(), 16, "nalty", 0, 5, false) == 0)
                                                                              {
                                                                                switch (json_string.getData()[21])
                                                                                  {
                                                                                    case 'G':
                                                                                        if ((String.Compare(json_string.getData(), 22, "oalsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 33))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingPenaltyGoalsAgainst;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'S':
                                                                                        switch (json_string.getData()[22])
                                                                                          {
                                                                                            case 'a':
                                                                                                if (String.Compare(json_string.getData(), 23, "ve", 0, 2, false) == 0)
                                                                                                  {
                                                                                                    switch (json_string.getData()[25])
                                                                                                      {
                                                                                                        case 'P':
                                                                                                            if ((String.Compare(json_string.getData(), 26, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 29))
                                                                                                                  {
                                                                                                                    the_open_enum.in_known_list = true;
                                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingPenaltySavePerc;
                                                                                                                    goto open_enum_is_done;
                                                                                                                  }
                                                                                                            break;
                                                                                                        case 's':
                                                                                                            if (json_string.getData().Length == 26)
                                                                                                                  {
                                                                                                                    the_open_enum.in_known_list = true;
                                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingPenaltySaves;
                                                                                                                    goto open_enum_is_done;
                                                                                                                  }
                                                                                                            break;
                                                                                                        default:
                                                                                                            break;
                                                                                                      }
                                                                                                  }
                                                                                                break;
                                                                                            case 'h':
                                                                                                if ((String.Compare(json_string.getData(), 23, "otsAgainst", 0, 10, false) == 0) && (json_string.getData().Length == 33))
                                                                                                      {
                                                                                                        the_open_enum.in_known_list = true;
                                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingPenaltyShotsAgainst;
                                                                                                        goto open_enum_is_done;
                                                                                                      }
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 'o':
                                                                            if (String.Compare(json_string.getData(), 16, "werPlay", 0, 7, false) == 0)
                                                                              {
                                                                                switch (json_string.getData()[23])
                                                                                  {
                                                                                    case 'G':
                                                                                        if ((String.Compare(json_string.getData(), 24, "oalsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 35))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingPowerPlayGoalsAgainst;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 'S':
                                                                                        switch (json_string.getData()[24])
                                                                                          {
                                                                                            case 'a':
                                                                                                if (String.Compare(json_string.getData(), 25, "ve", 0, 2, false) == 0)
                                                                                                  {
                                                                                                    switch (json_string.getData()[27])
                                                                                                      {
                                                                                                        case 'P':
                                                                                                            if ((String.Compare(json_string.getData(), 28, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 31))
                                                                                                                  {
                                                                                                                    the_open_enum.in_known_list = true;
                                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingPowerPlaySavePerc;
                                                                                                                    goto open_enum_is_done;
                                                                                                                  }
                                                                                                            break;
                                                                                                        case 's':
                                                                                                            if (json_string.getData().Length == 28)
                                                                                                                  {
                                                                                                                    the_open_enum.in_known_list = true;
                                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingPowerPlaySaves;
                                                                                                                    goto open_enum_is_done;
                                                                                                                  }
                                                                                                            break;
                                                                                                        default:
                                                                                                            break;
                                                                                                      }
                                                                                                  }
                                                                                                break;
                                                                                            case 'h':
                                                                                                if ((String.Compare(json_string.getData(), 25, "otsAgainst", 0, 10, false) == 0) && (json_string.getData().Length == 35))
                                                                                                      {
                                                                                                        the_open_enum.in_known_list = true;
                                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingPowerPlayShotsAgainst;
                                                                                                        goto open_enum_is_done;
                                                                                                      }
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'S':
                                                                    switch (json_string.getData()[15])
                                                                      {
                                                                        case 'a':
                                                                            if (String.Compare(json_string.getData(), 16, "ve", 0, 2, false) == 0)
                                                                              {
                                                                                switch (json_string.getData()[18])
                                                                                  {
                                                                                    case 'P':
                                                                                        if ((String.Compare(json_string.getData(), 19, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 22))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingSavePerc;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    case 's':
                                                                                        if (json_string.getData().Length == 19)
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingSaves;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 'h':
                                                                            switch (json_string.getData()[16])
                                                                              {
                                                                                case 'o':
                                                                                    switch (json_string.getData()[17])
                                                                                      {
                                                                                        case 'o':
                                                                                            if (String.Compare(json_string.getData(), 18, "tout", 0, 4, false) == 0)
                                                                                              {
                                                                                                switch (json_string.getData()[22])
                                                                                                  {
                                                                                                    case 'G':
                                                                                                        if ((String.Compare(json_string.getData(), 23, "oalsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 34))
                                                                                                              {
                                                                                                                the_open_enum.in_known_list = true;
                                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingShootoutGoalsAgainst;
                                                                                                                goto open_enum_is_done;
                                                                                                              }
                                                                                                        break;
                                                                                                    case 'S':
                                                                                                        switch (json_string.getData()[23])
                                                                                                          {
                                                                                                            case 'a':
                                                                                                                if (String.Compare(json_string.getData(), 24, "ve", 0, 2, false) == 0)
                                                                                                                  {
                                                                                                                    switch (json_string.getData()[26])
                                                                                                                      {
                                                                                                                        case 'P':
                                                                                                                            if ((String.Compare(json_string.getData(), 27, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 30))
                                                                                                                                  {
                                                                                                                                    the_open_enum.in_known_list = true;
                                                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingShootoutSavePerc;
                                                                                                                                    goto open_enum_is_done;
                                                                                                                                  }
                                                                                                                            break;
                                                                                                                        case 's':
                                                                                                                            if (json_string.getData().Length == 27)
                                                                                                                                  {
                                                                                                                                    the_open_enum.in_known_list = true;
                                                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingShootoutSaves;
                                                                                                                                    goto open_enum_is_done;
                                                                                                                                  }
                                                                                                                            break;
                                                                                                                        default:
                                                                                                                            break;
                                                                                                                      }
                                                                                                                  }
                                                                                                                break;
                                                                                                            case 'h':
                                                                                                                if ((String.Compare(json_string.getData(), 24, "otsAgainst", 0, 10, false) == 0) && (json_string.getData().Length == 34))
                                                                                                                      {
                                                                                                                        the_open_enum.in_known_list = true;
                                                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingShootoutShotsAgainst;
                                                                                                                        goto open_enum_is_done;
                                                                                                                      }
                                                                                                                break;
                                                                                                            default:
                                                                                                                break;
                                                                                                          }
                                                                                                        break;
                                                                                                    default:
                                                                                                        break;
                                                                                                  }
                                                                                              }
                                                                                            break;
                                                                                        case 'r':
                                                                                            if (String.Compare(json_string.getData(), 18, "tHanded", 0, 7, false) == 0)
                                                                                              {
                                                                                                switch (json_string.getData()[25])
                                                                                                  {
                                                                                                    case 'G':
                                                                                                        if ((String.Compare(json_string.getData(), 26, "oalsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 37))
                                                                                                              {
                                                                                                                the_open_enum.in_known_list = true;
                                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingShortHandedGoalsAgainst;
                                                                                                                goto open_enum_is_done;
                                                                                                              }
                                                                                                        break;
                                                                                                    case 'S':
                                                                                                        switch (json_string.getData()[26])
                                                                                                          {
                                                                                                            case 'a':
                                                                                                                if (String.Compare(json_string.getData(), 27, "ve", 0, 2, false) == 0)
                                                                                                                  {
                                                                                                                    switch (json_string.getData()[29])
                                                                                                                      {
                                                                                                                        case 'P':
                                                                                                                            if ((String.Compare(json_string.getData(), 30, "erc", 0, 3, false) == 0) && (json_string.getData().Length == 33))
                                                                                                                                  {
                                                                                                                                    the_open_enum.in_known_list = true;
                                                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingShortHandedSavePerc;
                                                                                                                                    goto open_enum_is_done;
                                                                                                                                  }
                                                                                                                            break;
                                                                                                                        case 's':
                                                                                                                            if (json_string.getData().Length == 30)
                                                                                                                                  {
                                                                                                                                    the_open_enum.in_known_list = true;
                                                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingShortHandedSaves;
                                                                                                                                    goto open_enum_is_done;
                                                                                                                                  }
                                                                                                                            break;
                                                                                                                        default:
                                                                                                                            break;
                                                                                                                      }
                                                                                                                  }
                                                                                                                break;
                                                                                                            case 'h':
                                                                                                                if ((String.Compare(json_string.getData(), 27, "otsAgainst", 0, 10, false) == 0) && (json_string.getData().Length == 37))
                                                                                                                      {
                                                                                                                        the_open_enum.in_known_list = true;
                                                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingShortHandedShotsAgainst;
                                                                                                                        goto open_enum_is_done;
                                                                                                                      }
                                                                                                                break;
                                                                                                            default:
                                                                                                                break;
                                                                                                          }
                                                                                                        break;
                                                                                                    default:
                                                                                                        break;
                                                                                                  }
                                                                                              }
                                                                                            break;
                                                                                        case 't':
                                                                                            if (String.Compare(json_string.getData(), 18, "sAgainst", 0, 8, false) == 0)
                                                                                              {
                                                                                                if (json_string.getData().Length == 26)
                                                                                                  {
                                                                                                      {
                                                                                                        the_open_enum.in_known_list = true;
                                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingShotsAgainst;
                                                                                                        goto open_enum_is_done;
                                                                                                      }
                                                                                                  }
                                                                                                switch (json_string.getData()[26])
                                                                                                  {
                                                                                                    case 'P':
                                                                                                        if ((String.Compare(json_string.getData(), 27, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 33))
                                                                                                              {
                                                                                                                the_open_enum.in_known_list = true;
                                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingShotsAgainstPerGame;
                                                                                                                goto open_enum_is_done;
                                                                                                              }
                                                                                                        break;
                                                                                                    default:
                                                                                                        break;
                                                                                                  }
                                                                                              }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                    break;
                                                                                case 'u':
                                                                                    if (String.Compare(json_string.getData(), 17, "tout", 0, 4, false) == 0)
                                                                                      {
                                                                                        switch (json_string.getData()[21])
                                                                                          {
                                                                                            case 'F':
                                                                                                if ((String.Compare(json_string.getData(), 22, "lag", 0, 3, false) == 0) && (json_string.getData().Length == 25))
                                                                                                      {
                                                                                                        the_open_enum.in_known_list = true;
                                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingShutoutFlag;
                                                                                                        goto open_enum_is_done;
                                                                                                      }
                                                                                                break;
                                                                                            case 's':
                                                                                                if (json_string.getData().Length == 22)
                                                                                                      {
                                                                                                        the_open_enum.in_known_list = true;
                                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingShutouts;
                                                                                                        goto open_enum_is_done;
                                                                                                      }
                                                                                                break;
                                                                                            default:
                                                                                                break;
                                                                                          }
                                                                                      }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                    break;
                                                                case 'T':
                                                                    if (String.Compare(json_string.getData(), 15, "otal", 0, 4, false) == 0)
                                                                      {
                                                                        switch (json_string.getData()[19])
                                                                          {
                                                                            case 'G':
                                                                                if ((String.Compare(json_string.getData(), 20, "oalsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 31))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingTotalGoalsAgainst;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            case 'S':
                                                                                if ((String.Compare(json_string.getData(), 20, "hotsAgainst", 0, 11, false) == 0) && (json_string.getData().Length == 31))
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingTotalShotsAgainst;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                break;
                                                                            default:
                                                                                break;
                                                                          }
                                                                      }
                                                                    break;
                                                                case 'W':
                                                                    if ((String.Compare(json_string.getData(), 15, "ins", 0, 3, false) == 0) && (json_string.getData().Length == 18))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLGoaltendingWins;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'H':
                                    if (String.Compare(json_string.getData(), 4, "its", 0, 3, false) == 0)
                                      {
                                        if (json_string.getData().Length == 7)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLHits;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[7])
                                          {
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 8, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 14))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLHitsPerGame;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'M':
                                    if (String.Compare(json_string.getData(), 4, "issedShots", 0, 10, false) == 0)
                                      {
                                        if (json_string.getData().Length == 14)
                                          {
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLMissedShots;
                                                goto open_enum_is_done;
                                              }
                                          }
                                        switch (json_string.getData()[14])
                                          {
                                            case 'P':
                                                if ((String.Compare(json_string.getData(), 15, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 21))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLMissedShotsPerGame;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'P':
                                    switch (json_string.getData()[4])
                                      {
                                        case 'e':
                                            if (String.Compare(json_string.getData(), 5, "nalt", 0, 4, false) == 0)
                                              {
                                                switch (json_string.getData()[9])
                                                  {
                                                    case 'i':
                                                        if (String.Compare(json_string.getData(), 10, "es", 0, 2, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 12)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLPenalties;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[12])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 13, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 19))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLPenaltiesPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'y':
                                                        switch (json_string.getData()[10])
                                                          {
                                                            case 'G':
                                                                if ((String.Compare(json_string.getData(), 11, "oals", 0, 4, false) == 0) && (json_string.getData().Length == 15))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLPenaltyGoals;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'M':
                                                                if (String.Compare(json_string.getData(), 11, "i", 0, 1, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[12])
                                                                      {
                                                                        case 'n':
                                                                            if (String.Compare(json_string.getData(), 13, "utes", 0, 4, false) == 0)
                                                                              {
                                                                                if (json_string.getData().Length == 17)
                                                                                  {
                                                                                      {
                                                                                        the_open_enum.in_known_list = true;
                                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLPenaltyMinutes;
                                                                                        goto open_enum_is_done;
                                                                                      }
                                                                                  }
                                                                                switch (json_string.getData()[17])
                                                                                  {
                                                                                    case 'P':
                                                                                        if ((String.Compare(json_string.getData(), 18, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 24))
                                                                                              {
                                                                                                the_open_enum.in_known_list = true;
                                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLPenaltyMinutesPerGame;
                                                                                                goto open_enum_is_done;
                                                                                              }
                                                                                        break;
                                                                                    default:
                                                                                        break;
                                                                                  }
                                                                              }
                                                                            break;
                                                                        case 's':
                                                                            if ((String.Compare(json_string.getData(), 13, "sedShots", 0, 8, false) == 0) && (json_string.getData().Length == 21))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLPenaltyMissedShots;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'S':
                                                                if ((String.Compare(json_string.getData(), 11, "hotsOnGoal", 0, 10, false) == 0) && (json_string.getData().Length == 21))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLPenaltyShotsOnGoal;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'l':
                                            if ((String.Compare(json_string.getData(), 5, "usMinus", 0, 7, false) == 0) && (json_string.getData().Length == 12))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLPlusMinus;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'o':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'i':
                                                    if (String.Compare(json_string.getData(), 6, "nts", 0, 3, false) == 0)
                                                      {
                                                        if (json_string.getData().Length == 9)
                                                          {
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLPoints;
                                                                goto open_enum_is_done;
                                                              }
                                                          }
                                                        switch (json_string.getData()[9])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(json_string.getData(), 10, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 16))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLPointsPerGame;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'w':
                                                    if (String.Compare(json_string.getData(), 6, "erPlay", 0, 6, false) == 0)
                                                      {
                                                        switch (json_string.getData()[12])
                                                          {
                                                            case 'A':
                                                                if ((String.Compare(json_string.getData(), 13, "ssists", 0, 6, false) == 0) && (json_string.getData().Length == 19))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLPowerPlayAssists;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'F':
                                                                if (String.Compare(json_string.getData(), 13, "aceoff", 0, 6, false) == 0)
                                                                  {
                                                                    switch (json_string.getData()[19])
                                                                      {
                                                                        case 'W':
                                                                            if ((String.Compare(json_string.getData(), 20, "inPerc", 0, 6, false) == 0) && (json_string.getData().Length == 26))
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLPowerPlayFaceoffWinPerc;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                            break;
                                                                        case 's':
                                                                            if (json_string.getData().Length == 20)
                                                                              {
                                                                                  {
                                                                                    the_open_enum.in_known_list = true;
                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLPowerPlayFaceoffs;
                                                                                    goto open_enum_is_done;
                                                                                  }
                                                                              }
                                                                            switch (json_string.getData()[20])
                                                                              {
                                                                                case 'L':
                                                                                    if ((String.Compare(json_string.getData(), 21, "ost", 0, 3, false) == 0) && (json_string.getData().Length == 24))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLPowerPlayFaceoffsLost;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                case 'W':
                                                                                    if ((String.Compare(json_string.getData(), 21, "on", 0, 2, false) == 0) && (json_string.getData().Length == 23))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLPowerPlayFaceoffsWon;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                            break;
                                                                        default:
                                                                            break;
                                                                      }
                                                                  }
                                                                break;
                                                            case 'G':
                                                                if ((String.Compare(json_string.getData(), 13, "oals", 0, 4, false) == 0) && (json_string.getData().Length == 17))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLPowerPlayGoals;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'M':
                                                                if ((String.Compare(json_string.getData(), 13, "issedShots", 0, 10, false) == 0) && (json_string.getData().Length == 23))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLPowerPlayMissedShots;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'O':
                                                                if ((String.Compare(json_string.getData(), 13, "pportunities", 0, 12, false) == 0) && (json_string.getData().Length == 25))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLPowerPlayOpportunities;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'P':
                                                                if ((String.Compare(json_string.getData(), 13, "oints", 0, 5, false) == 0) && (json_string.getData().Length == 18))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLPowerPlayPoints;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'S':
                                                                if ((String.Compare(json_string.getData(), 13, "hotsOnGoal", 0, 10, false) == 0) && (json_string.getData().Length == 23))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLPowerPlayShotsOnGoal;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            case 'T':
                                                                if ((String.Compare(json_string.getData(), 13, "imeOnIce", 0, 8, false) == 0) && (json_string.getData().Length == 21))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLPowerPlayTimeOnIce;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'S':
                                    switch (json_string.getData()[4])
                                      {
                                        case 'c':
                                            if ((String.Compare(json_string.getData(), 5, "ratches", 0, 7, false) == 0) && (json_string.getData().Length == 12))
                                                  {
                                                    the_open_enum.in_known_list = true;
                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLScratches;
                                                    goto open_enum_is_done;
                                                  }
                                            break;
                                        case 'h':
                                            switch (json_string.getData()[5])
                                              {
                                                case 'i':
                                                    if (String.Compare(json_string.getData(), 6, "fts", 0, 3, false) == 0)
                                                      {
                                                        if (json_string.getData().Length == 9)
                                                          {
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLShifts;
                                                                goto open_enum_is_done;
                                                              }
                                                          }
                                                        switch (json_string.getData()[9])
                                                          {
                                                            case 'P':
                                                                if ((String.Compare(json_string.getData(), 10, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 16))
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLShiftsPerGame;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                break;
                                                            default:
                                                                break;
                                                          }
                                                      }
                                                    break;
                                                case 'o':
                                                    switch (json_string.getData()[6])
                                                      {
                                                        case 'o':
                                                            if (String.Compare(json_string.getData(), 7, "t", 0, 1, false) == 0)
                                                              {
                                                                switch (json_string.getData()[8])
                                                                  {
                                                                    case 'i':
                                                                        if ((String.Compare(json_string.getData(), 9, "ngPerc", 0, 6, false) == 0) && (json_string.getData().Length == 15))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLShootingPerc;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'o':
                                                                        if (String.Compare(json_string.getData(), 9, "ut", 0, 2, false) == 0)
                                                                          {
                                                                            switch (json_string.getData()[11])
                                                                              {
                                                                                case 'G':
                                                                                    if ((String.Compare(json_string.getData(), 12, "oals", 0, 4, false) == 0) && (json_string.getData().Length == 16))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLShootoutGoals;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                case 'M':
                                                                                    if ((String.Compare(json_string.getData(), 12, "issedShots", 0, 10, false) == 0) && (json_string.getData().Length == 22))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLShootoutMissedShots;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                case 'S':
                                                                                    if ((String.Compare(json_string.getData(), 12, "hotsOnGoal", 0, 10, false) == 0) && (json_string.getData().Length == 22))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLShootoutShotsOnGoal;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 'r':
                                                            if (String.Compare(json_string.getData(), 7, "tHanded", 0, 7, false) == 0)
                                                              {
                                                                switch (json_string.getData()[14])
                                                                  {
                                                                    case 'A':
                                                                        if ((String.Compare(json_string.getData(), 15, "ssists", 0, 6, false) == 0) && (json_string.getData().Length == 21))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLShortHandedAssists;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'F':
                                                                        if (String.Compare(json_string.getData(), 15, "aceoff", 0, 6, false) == 0)
                                                                          {
                                                                            switch (json_string.getData()[21])
                                                                              {
                                                                                case 'W':
                                                                                    if ((String.Compare(json_string.getData(), 22, "inPerc", 0, 6, false) == 0) && (json_string.getData().Length == 28))
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLShortHandedFaceoffWinPerc;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                    break;
                                                                                case 's':
                                                                                    if (json_string.getData().Length == 22)
                                                                                      {
                                                                                          {
                                                                                            the_open_enum.in_known_list = true;
                                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLShortHandedFaceoffs;
                                                                                            goto open_enum_is_done;
                                                                                          }
                                                                                      }
                                                                                    switch (json_string.getData()[22])
                                                                                      {
                                                                                        case 'L':
                                                                                            if ((String.Compare(json_string.getData(), 23, "ost", 0, 3, false) == 0) && (json_string.getData().Length == 26))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLShortHandedFaceoffsLost;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        case 'W':
                                                                                            if ((String.Compare(json_string.getData(), 23, "on", 0, 2, false) == 0) && (json_string.getData().Length == 25))
                                                                                                  {
                                                                                                    the_open_enum.in_known_list = true;
                                                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLShortHandedFaceoffsWon;
                                                                                                    goto open_enum_is_done;
                                                                                                  }
                                                                                            break;
                                                                                        default:
                                                                                            break;
                                                                                      }
                                                                                    break;
                                                                                default:
                                                                                    break;
                                                                              }
                                                                          }
                                                                        break;
                                                                    case 'G':
                                                                        if ((String.Compare(json_string.getData(), 15, "oals", 0, 4, false) == 0) && (json_string.getData().Length == 19))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLShortHandedGoals;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'M':
                                                                        if ((String.Compare(json_string.getData(), 15, "issedShots", 0, 10, false) == 0) && (json_string.getData().Length == 25))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLShortHandedMissedShots;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 15, "oints", 0, 5, false) == 0) && (json_string.getData().Length == 20))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLShortHandedPoints;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'S':
                                                                        if ((String.Compare(json_string.getData(), 15, "hotsOnGoal", 0, 10, false) == 0) && (json_string.getData().Length == 25))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLShortHandedShotsOnGoal;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case 'T':
                                                                        if ((String.Compare(json_string.getData(), 15, "imeOnIce", 0, 8, false) == 0) && (json_string.getData().Length == 23))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLShortHandedTimeOnIce;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        case 't':
                                                            if (String.Compare(json_string.getData(), 7, "sOnGoal", 0, 7, false) == 0)
                                                              {
                                                                if (json_string.getData().Length == 14)
                                                                  {
                                                                      {
                                                                        the_open_enum.in_known_list = true;
                                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLShotsOnGoal;
                                                                        goto open_enum_is_done;
                                                                      }
                                                                  }
                                                                switch (json_string.getData()[14])
                                                                  {
                                                                    case 'P':
                                                                        if ((String.Compare(json_string.getData(), 15, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 21))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLShotsOnGoalPerGame;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                    break;
                                                default:
                                                    break;
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                case 'T':
                                    switch (json_string.getData()[4])
                                      {
                                        case 'a':
                                            if (String.Compare(json_string.getData(), 5, "keaways", 0, 7, false) == 0)
                                              {
                                                if (json_string.getData().Length == 12)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLTakeaways;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[12])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 13, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 19))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLTakeawaysPerGame;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'e':
                                            if (String.Compare(json_string.getData(), 5, "amPenalt", 0, 8, false) == 0)
                                              {
                                                switch (json_string.getData()[13])
                                                  {
                                                    case 'i':
                                                        if (String.Compare(json_string.getData(), 14, "es", 0, 2, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 16)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLTeamPenalties;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[16])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 17, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 23))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLTeamPenaltiesPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    case 'y':
                                                        if (String.Compare(json_string.getData(), 14, "Minutes", 0, 7, false) == 0)
                                                          {
                                                            if (json_string.getData().Length == 21)
                                                              {
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_NHLTeamPenaltyMinutes;
                                                                    goto open_enum_is_done;
                                                                  }
                                                              }
                                                            switch (json_string.getData()[21])
                                                              {
                                                                case 'P':
                                                                    if ((String.Compare(json_string.getData(), 22, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 28))
                                                                          {
                                                                            the_open_enum.in_known_list = true;
                                                                            the_open_enum.list_value = TypeValueKnownValues.Value_NHLTeamPenaltyMinutesPerGame;
                                                                            goto open_enum_is_done;
                                                                          }
                                                                    break;
                                                                default:
                                                                    break;
                                                              }
                                                          }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        case 'o':
                                            if (String.Compare(json_string.getData(), 5, "talTimeOnIce", 0, 12, false) == 0)
                                              {
                                                if (json_string.getData().Length == 17)
                                                  {
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_NHLTotalTimeOnIce;
                                                        goto open_enum_is_done;
                                                      }
                                                  }
                                                switch (json_string.getData()[17])
                                                  {
                                                    case 'P':
                                                        if ((String.Compare(json_string.getData(), 18, "erGame", 0, 6, false) == 0) && (json_string.getData().Length == 24))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_NHLTotalTimeOnIcePerGame;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                              }
                                            break;
                                        default:
                                            break;
                                      }
                                    break;
                                default:
                                    break;
                              }
                          }
                        break;
                    default:
                        break;
                  }
                break;
            case 'S':
                if (String.Compare(json_string.getData(), 1, "occer", 0, 5, false) == 0)
                  {
                    switch (json_string.getData()[6])
                      {
                        case 'B':
                            if ((String.Compare(json_string.getData(), 7, "allPossessions", 0, 14, false) == 0) && (json_string.getData().Length == 21))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeValueKnownValues.Value_SoccerBallPossessions;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'C':
                            switch (json_string.getData()[7])
                              {
                                case 'a':
                                    if ((String.Compare(json_string.getData(), 8, "rdsGiven", 0, 8, false) == 0) && (json_string.getData().Length == 16))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_SoccerCardsGiven;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'o':
                                    if ((String.Compare(json_string.getData(), 8, "rnerKicks", 0, 9, false) == 0) && (json_string.getData().Length == 17))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_SoccerCornerKicks;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'F':
                            if ((String.Compare(json_string.getData(), 7, "reeKicks", 0, 8, false) == 0) && (json_string.getData().Length == 15))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeValueKnownValues.Value_SoccerFreeKicks;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'G':
                            if (String.Compare(json_string.getData(), 7, "oal", 0, 3, false) == 0)
                              {
                                switch (json_string.getData()[10])
                                  {
                                    case 'A':
                                        if ((String.Compare(json_string.getData(), 11, "ttempts", 0, 7, false) == 0) && (json_string.getData().Length == 18))
                                              {
                                                the_open_enum.in_known_list = true;
                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalAttempts;
                                                goto open_enum_is_done;
                                              }
                                        break;
                                    case 's':
                                        switch (json_string.getData()[11])
                                          {
                                            case 'B':
                                                if (String.Compare(json_string.getData(), 12, "y", 0, 1, false) == 0)
                                                  {
                                                    switch (json_string.getData()[13])
                                                      {
                                                        case 'F':
                                                            if ((String.Compare(json_string.getData(), 14, "oot", 0, 3, false) == 0) && (json_string.getData().Length == 17))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByFoot;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'H':
                                                            if ((String.Compare(json_string.getData(), 14, "eaders", 0, 6, false) == 0) && (json_string.getData().Length == 20))
                                                                  {
                                                                    the_open_enum.in_known_list = true;
                                                                    the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByHeaders;
                                                                    goto open_enum_is_done;
                                                                  }
                                                            break;
                                                        case 'T':
                                                            if (String.Compare(json_string.getData(), 14, "ime", 0, 3, false) == 0)
                                                              {
                                                                switch (json_string.getData()[17])
                                                                  {
                                                                    case '0':
                                                                        if ((String.Compare(json_string.getData(), 18, "0To15", 0, 5, false) == 0) && (json_string.getData().Length == 23))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByTime00To15;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '1':
                                                                        if ((String.Compare(json_string.getData(), 18, "6To30", 0, 5, false) == 0) && (json_string.getData().Length == 23))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByTime16To30;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '3':
                                                                        if ((String.Compare(json_string.getData(), 18, "1To45", 0, 5, false) == 0) && (json_string.getData().Length == 23))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByTime31To45;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '4':
                                                                        if ((String.Compare(json_string.getData(), 18, "6To60", 0, 5, false) == 0) && (json_string.getData().Length == 23))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByTime46To60;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '6':
                                                                        if ((String.Compare(json_string.getData(), 18, "1To75", 0, 5, false) == 0) && (json_string.getData().Length == 23))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByTime61To75;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '7':
                                                                        if ((String.Compare(json_string.getData(), 18, "6To90", 0, 5, false) == 0) && (json_string.getData().Length == 23))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsByTime76To90;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'C':
                                                if (String.Compare(json_string.getData(), 12, "onceded", 0, 7, false) == 0)
                                                  {
                                                    if (json_string.getData().Length == 19)
                                                      {
                                                          {
                                                            the_open_enum.in_known_list = true;
                                                            the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsConceded;
                                                            goto open_enum_is_done;
                                                          }
                                                      }
                                                    switch (json_string.getData()[19])
                                                      {
                                                        case 'B':
                                                            if (String.Compare(json_string.getData(), 20, "yTime", 0, 5, false) == 0)
                                                              {
                                                                switch (json_string.getData()[25])
                                                                  {
                                                                    case '0':
                                                                        if ((String.Compare(json_string.getData(), 26, "0To15", 0, 5, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsConcededByTime00To15;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '1':
                                                                        if ((String.Compare(json_string.getData(), 26, "6To30", 0, 5, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsConcededByTime16To30;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '3':
                                                                        if ((String.Compare(json_string.getData(), 26, "1To45", 0, 5, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsConcededByTime31To45;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '4':
                                                                        if ((String.Compare(json_string.getData(), 26, "6To60", 0, 5, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsConcededByTime46To60;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '6':
                                                                        if ((String.Compare(json_string.getData(), 26, "1To75", 0, 5, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsConcededByTime61To75;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    case '7':
                                                                        if ((String.Compare(json_string.getData(), 26, "6To90", 0, 5, false) == 0) && (json_string.getData().Length == 31))
                                                                              {
                                                                                the_open_enum.in_known_list = true;
                                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsConcededByTime76To90;
                                                                                goto open_enum_is_done;
                                                                              }
                                                                        break;
                                                                    default:
                                                                        break;
                                                                  }
                                                              }
                                                            break;
                                                        default:
                                                            break;
                                                      }
                                                  }
                                                break;
                                            case 'S':
                                                if ((String.Compare(json_string.getData(), 12, "cored", 0, 5, false) == 0) && (json_string.getData().Length == 17))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_SoccerGoalsScored;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                        break;
                                    default:
                                        break;
                                  }
                              }
                            break;
                        case 'M':
                            if ((String.Compare(json_string.getData(), 7, "atchesPlayed", 0, 12, false) == 0) && (json_string.getData().Length == 19))
                                  {
                                    the_open_enum.in_known_list = true;
                                    the_open_enum.list_value = TypeValueKnownValues.Value_SoccerMatchesPlayed;
                                    goto open_enum_is_done;
                                  }
                            break;
                        case 'O':
                            switch (json_string.getData()[7])
                              {
                                case 'f':
                                    if ((String.Compare(json_string.getData(), 8, "fsides", 0, 6, false) == 0) && (json_string.getData().Length == 14))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_SoccerOffsides;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                case 'w':
                                    if ((String.Compare(json_string.getData(), 8, "nGoals", 0, 6, false) == 0) && (json_string.getData().Length == 14))
                                          {
                                            the_open_enum.in_known_list = true;
                                            the_open_enum.list_value = TypeValueKnownValues.Value_SoccerOwnGoals;
                                            goto open_enum_is_done;
                                          }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        case 'S':
                            switch (json_string.getData()[7])
                              {
                                case 'h':
                                    if (String.Compare(json_string.getData(), 8, "ots", 0, 3, false) == 0)
                                      {
                                        switch (json_string.getData()[11])
                                          {
                                            case 'B':
                                                if ((String.Compare(json_string.getData(), 12, "locked", 0, 6, false) == 0) && (json_string.getData().Length == 18))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_SoccerShotsBlocked;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'O':
                                                switch (json_string.getData()[12])
                                                  {
                                                    case 'f':
                                                        if ((String.Compare(json_string.getData(), 13, "fGoal", 0, 5, false) == 0) && (json_string.getData().Length == 18))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerShotsOffGoal;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    case 'n':
                                                        if ((String.Compare(json_string.getData(), 13, "Goal", 0, 4, false) == 0) && (json_string.getData().Length == 17))
                                                              {
                                                                the_open_enum.in_known_list = true;
                                                                the_open_enum.list_value = TypeValueKnownValues.Value_SoccerShotsOnGoal;
                                                                goto open_enum_is_done;
                                                              }
                                                        break;
                                                    default:
                                                        break;
                                                  }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                case 'u':
                                    if (String.Compare(json_string.getData(), 8, "bstituted", 0, 9, false) == 0)
                                      {
                                        switch (json_string.getData()[17])
                                          {
                                            case 'I':
                                                if ((String.Compare(json_string.getData(), 18, "n", 0, 1, false) == 0) && (json_string.getData().Length == 19))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_SoccerSubstitutedIn;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            case 'O':
                                                if ((String.Compare(json_string.getData(), 18, "ut", 0, 2, false) == 0) && (json_string.getData().Length == 20))
                                                      {
                                                        the_open_enum.in_known_list = true;
                                                        the_open_enum.list_value = TypeValueKnownValues.Value_SoccerSubstitutedOut;
                                                        goto open_enum_is_done;
                                                      }
                                                break;
                                            default:
                                                break;
                                          }
                                      }
                                    break;
                                default:
                                    break;
                              }
                            break;
                        default:
                            break;
                      }
                  }
                break;
            default:
                break;
          }
        the_open_enum.in_known_list = false;
        the_open_enum.string_value = json_string.getData();
      open_enum_is_done:;
        setValue(the_open_enum);
      }


    public SportsStatsTypeJSON()
      {
        flagHasValue = false;
      }

    public SportsStatsTypeJSON(TypeValue init_value)
      {
        flagHasValue = true;
        storeValue = init_value;
      }

    public SportsStatsTypeJSON(string init_value)
      {
        flagHasValue = true;
        TypeValueKnownValues known = stringToValue(init_value);
        if (known == TypeValueKnownValues.Value__none)
          {
            storeValue.in_known_list = false;
            storeValue.string_value = init_value;
          }
        else
          {
            storeValue.in_known_list = true;
            storeValue.list_value = known;
          }
      }

    public SportsStatsTypeJSON(TypeValueKnownValues init_value)
      {
        flagHasValue = true;
        Debug.Assert(init_value != TypeValueKnownValues.Value__none);
        storeValue.in_known_list = true;
        storeValue.list_value = init_value;
      }

    public bool  hasValue()
      {
        return flagHasValue;
      }

    public TypeValue  getValue()
      {
        Debug.Assert(flagHasValue);
        return storeValue;
      }

    public string  getValueAsString()
      {
        TypeValue result = getValue();
        if (result.in_known_list)
            return stringFromValue(result.list_value);
        else
            return result.string_value;
      }



    public void setValue(TypeValue new_value)
      {
        flagHasValue = true;
        storeValue = new_value;
      }
    public void setValue(string chars)
      {
        TypeValueKnownValues known = stringToValue(chars);
        TypeValue new_value = new TypeValue();
        if (known == TypeValueKnownValues.Value__none)
          {
            new_value.in_known_list = false;
            new_value.string_value = chars;
          }
        else
          {
            new_value.in_known_list = true;
            new_value.list_value = known;
          }
        setValue(new_value);
      }
    public void setValue(TypeValueKnownValues new_value)
      {
        TypeValue new_full_value = new TypeValue();
        Debug.Assert(new_value != TypeValueKnownValues.Value__none);
        new_full_value.in_known_list = true;
        new_full_value.list_value = new_value;
        setValue(new_full_value);
      }
    public void unsetValue()
      {
        flagHasValue = false;
      }


    public override void write_as_json(JSONHandler handler)
      {
        if (storeValue.in_known_list)
          {
            switch (storeValue.list_value)
              {
                case TypeValueKnownValues.Value_MLBBaserunningCaughtStealing:
                    handler.string_value("MLBBaserunningCaughtStealing");
                    break;
                case TypeValueKnownValues.Value_MLBBaserunningPickoffs:
                    handler.string_value("MLBBaserunningPickoffs");
                    break;
                case TypeValueKnownValues.Value_MLBBaserunningStolenBasePerc:
                    handler.string_value("MLBBaserunningStolenBasePerc");
                    break;
                case TypeValueKnownValues.Value_MLBBaserunningStolenBases:
                    handler.string_value("MLBBaserunningStolenBases");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingAssists:
                    handler.string_value("MLBFieldingAssists");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingCompleteGames:
                    handler.string_value("MLBFieldingCompleteGames");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingDoublePlays:
                    handler.string_value("MLBFieldingDoublePlays");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingErrors:
                    handler.string_value("MLBFieldingErrors");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingFieldingPercentage:
                    handler.string_value("MLBFieldingFieldingPercentage");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingGamesFinished:
                    handler.string_value("MLBFieldingGamesFinished");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingGamesPlayed:
                    handler.string_value("MLBFieldingGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingGamesStarted:
                    handler.string_value("MLBFieldingGamesStarted");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingPassedBalls:
                    handler.string_value("MLBFieldingPassedBalls");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingPutouts:
                    handler.string_value("MLBFieldingPutouts");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingRangeFactor:
                    handler.string_value("MLBFieldingRangeFactor");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingTotalChances:
                    handler.string_value("MLBFieldingTotalChances");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingTriplePlays:
                    handler.string_value("MLBFieldingTriplePlays");
                    break;
                case TypeValueKnownValues.Value_MLBHittingAtBats:
                    handler.string_value("MLBHittingAtBats");
                    break;
                case TypeValueKnownValues.Value_MLBHittingAtBatsPerHomeRun:
                    handler.string_value("MLBHittingAtBatsPerHomeRun");
                    break;
                case TypeValueKnownValues.Value_MLBHittingAtBatsPerStrikeout:
                    handler.string_value("MLBHittingAtBatsPerStrikeout");
                    break;
                case TypeValueKnownValues.Value_MLBHittingAtBatsWithRunnersInScoringPosition:
                    handler.string_value("MLBHittingAtBatsWithRunnersInScoringPosition");
                    break;
                case TypeValueKnownValues.Value_MLBHittingBalls:
                    handler.string_value("MLBHittingBalls");
                    break;
                case TypeValueKnownValues.Value_MLBHittingBallsInPlay:
                    handler.string_value("MLBHittingBallsInPlay");
                    break;
                case TypeValueKnownValues.Value_MLBHittingBattingAverage:
                    handler.string_value("MLBHittingBattingAverage");
                    break;
                case TypeValueKnownValues.Value_MLBHittingBattingAverageOnBallsInPlay:
                    handler.string_value("MLBHittingBattingAverageOnBallsInPlay");
                    break;
                case TypeValueKnownValues.Value_MLBHittingCompleteGames:
                    handler.string_value("MLBHittingCompleteGames");
                    break;
                case TypeValueKnownValues.Value_MLBHittingCycles:
                    handler.string_value("MLBHittingCycles");
                    break;
                case TypeValueKnownValues.Value_MLBHittingDirtBallsFaced:
                    handler.string_value("MLBHittingDirtBallsFaced");
                    break;
                case TypeValueKnownValues.Value_MLBHittingDoubles:
                    handler.string_value("MLBHittingDoubles");
                    break;
                case TypeValueKnownValues.Value_MLBHittingEarnedRunsScored:
                    handler.string_value("MLBHittingEarnedRunsScored");
                    break;
                case TypeValueKnownValues.Value_MLBHittingExtraBaseHits:
                    handler.string_value("MLBHittingExtraBaseHits");
                    break;
                case TypeValueKnownValues.Value_MLBHittingFieldersChoice:
                    handler.string_value("MLBHittingFieldersChoice");
                    break;
                case TypeValueKnownValues.Value_MLBHittingFlyBalls:
                    handler.string_value("MLBHittingFlyBalls");
                    break;
                case TypeValueKnownValues.Value_MLBHittingFlyOuts:
                    handler.string_value("MLBHittingFlyOuts");
                    break;
                case TypeValueKnownValues.Value_MLBHittingFlyOutsIntoDoublePlays:
                    handler.string_value("MLBHittingFlyOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_MLBHittingFoulBalls:
                    handler.string_value("MLBHittingFoulBalls");
                    break;
                case TypeValueKnownValues.Value_MLBHittingGamesFinished:
                    handler.string_value("MLBHittingGamesFinished");
                    break;
                case TypeValueKnownValues.Value_MLBHittingGamesPlayed:
                    handler.string_value("MLBHittingGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_MLBHittingGamesStarted:
                    handler.string_value("MLBHittingGamesStarted");
                    break;
                case TypeValueKnownValues.Value_MLBHittingGroundBallToFlyBallRatio:
                    handler.string_value("MLBHittingGroundBallToFlyBallRatio");
                    break;
                case TypeValueKnownValues.Value_MLBHittingGroundBalls:
                    handler.string_value("MLBHittingGroundBalls");
                    break;
                case TypeValueKnownValues.Value_MLBHittingGroundOuts:
                    handler.string_value("MLBHittingGroundOuts");
                    break;
                case TypeValueKnownValues.Value_MLBHittingGroundedIntoDoublePlay:
                    handler.string_value("MLBHittingGroundedIntoDoublePlay");
                    break;
                case TypeValueKnownValues.Value_MLBHittingHitByPitch:
                    handler.string_value("MLBHittingHitByPitch");
                    break;
                case TypeValueKnownValues.Value_MLBHittingHits:
                    handler.string_value("MLBHittingHits");
                    break;
                case TypeValueKnownValues.Value_MLBHittingHitsWithRunnersInScoringPosition:
                    handler.string_value("MLBHittingHitsWithRunnersInScoringPosition");
                    break;
                case TypeValueKnownValues.Value_MLBHittingHomeRuns:
                    handler.string_value("MLBHittingHomeRuns");
                    break;
                case TypeValueKnownValues.Value_MLBHittingIntentionalBalls:
                    handler.string_value("MLBHittingIntentionalBalls");
                    break;
                case TypeValueKnownValues.Value_MLBHittingIntentionalWalks:
                    handler.string_value("MLBHittingIntentionalWalks");
                    break;
                case TypeValueKnownValues.Value_MLBHittingIsolatedPower:
                    handler.string_value("MLBHittingIsolatedPower");
                    break;
                case TypeValueKnownValues.Value_MLBHittingLineDrives:
                    handler.string_value("MLBHittingLineDrives");
                    break;
                case TypeValueKnownValues.Value_MLBHittingLineOuts:
                    handler.string_value("MLBHittingLineOuts");
                    break;
                case TypeValueKnownValues.Value_MLBHittingLineOutsIntoDoublePlay:
                    handler.string_value("MLBHittingLineOutsIntoDoublePlay");
                    break;
                case TypeValueKnownValues.Value_MLBHittingOnBasePlusSluggingPerc:
                    handler.string_value("MLBHittingOnBasePlusSluggingPerc");
                    break;
                case TypeValueKnownValues.Value_MLBHittingOnBasePerc:
                    handler.string_value("MLBHittingOnBasePerc");
                    break;
                case TypeValueKnownValues.Value_MLBHittingPitchesFaced:
                    handler.string_value("MLBHittingPitchesFaced");
                    break;
                case TypeValueKnownValues.Value_MLBHittingPlateAppearances:
                    handler.string_value("MLBHittingPlateAppearances");
                    break;
                case TypeValueKnownValues.Value_MLBHittingPopOuts:
                    handler.string_value("MLBHittingPopOuts");
                    break;
                case TypeValueKnownValues.Value_MLBHittingPopUps:
                    handler.string_value("MLBHittingPopUps");
                    break;
                case TypeValueKnownValues.Value_MLBHittingReachedOnError:
                    handler.string_value("MLBHittingReachedOnError");
                    break;
                case TypeValueKnownValues.Value_MLBHittingRunnersLeftOnBase:
                    handler.string_value("MLBHittingRunnersLeftOnBase");
                    break;
                case TypeValueKnownValues.Value_MLBHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition:
                    handler.string_value("MLBHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition");
                    break;
                case TypeValueKnownValues.Value_MLBHittingRunsBattedIn:
                    handler.string_value("MLBHittingRunsBattedIn");
                    break;
                case TypeValueKnownValues.Value_MLBHittingRunsBattedInWithTwoOuts:
                    handler.string_value("MLBHittingRunsBattedInWithTwoOuts");
                    break;
                case TypeValueKnownValues.Value_MLBHittingSacrificeFlys:
                    handler.string_value("MLBHittingSacrificeFlys");
                    break;
                case TypeValueKnownValues.Value_MLBHittingSacrificeHits:
                    handler.string_value("MLBHittingSacrificeHits");
                    break;
                case TypeValueKnownValues.Value_MLBHittingSecondaryAverage:
                    handler.string_value("MLBHittingSecondaryAverage");
                    break;
                case TypeValueKnownValues.Value_MLBHittingSingles:
                    handler.string_value("MLBHittingSingles");
                    break;
                case TypeValueKnownValues.Value_MLBHittingSluggingPerc:
                    handler.string_value("MLBHittingSluggingPerc");
                    break;
                case TypeValueKnownValues.Value_MLBHittingStrikeoutsLooking:
                    handler.string_value("MLBHittingStrikeoutsLooking");
                    break;
                case TypeValueKnownValues.Value_MLBHittingStrikeoutsSwinging:
                    handler.string_value("MLBHittingStrikeoutsSwinging");
                    break;
                case TypeValueKnownValues.Value_MLBHittingStrikesLooking:
                    handler.string_value("MLBHittingStrikesLooking");
                    break;
                case TypeValueKnownValues.Value_MLBHittingStrikesSwinging:
                    handler.string_value("MLBHittingStrikesSwinging");
                    break;
                case TypeValueKnownValues.Value_MLBHittingTotalBases:
                    handler.string_value("MLBHittingTotalBases");
                    break;
                case TypeValueKnownValues.Value_MLBHittingTotalRunsScored:
                    handler.string_value("MLBHittingTotalRunsScored");
                    break;
                case TypeValueKnownValues.Value_MLBHittingTotalStrikeouts:
                    handler.string_value("MLBHittingTotalStrikeouts");
                    break;
                case TypeValueKnownValues.Value_MLBHittingTotalStrikes:
                    handler.string_value("MLBHittingTotalStrikes");
                    break;
                case TypeValueKnownValues.Value_MLBHittingTriples:
                    handler.string_value("MLBHittingTriples");
                    break;
                case TypeValueKnownValues.Value_MLBHittingUnearnedRunsScored:
                    handler.string_value("MLBHittingUnearnedRunsScored");
                    break;
                case TypeValueKnownValues.Value_MLBHittingWalks:
                    handler.string_value("MLBHittingWalks");
                    break;
                case TypeValueKnownValues.Value_MLBHittingWalksPerPlaceAppearance:
                    handler.string_value("MLBHittingWalksPerPlaceAppearance");
                    break;
                case TypeValueKnownValues.Value_MLBHittingWalksPerStrikeout:
                    handler.string_value("MLBHittingWalksPerStrikeout");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingBalks:
                    handler.string_value("MLBPitchingBalks");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingBalls:
                    handler.string_value("MLBPitchingBalls");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingBattersFaced:
                    handler.string_value("MLBPitchingBattersFaced");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingBlownSaves:
                    handler.string_value("MLBPitchingBlownSaves");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingCompleteGames:
                    handler.string_value("MLBPitchingCompleteGames");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingDirtBallsThrown:
                    handler.string_value("MLBPitchingDirtBallsThrown");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingDoublesAllowed:
                    handler.string_value("MLBPitchingDoublesAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingEarnedRunAverage:
                    handler.string_value("MLBPitchingEarnedRunAverage");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingEarnedRunsAllowed:
                    handler.string_value("MLBPitchingEarnedRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingErrors:
                    handler.string_value("MLBPitchingErrors");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingFieldersChoice:
                    handler.string_value("MLBPitchingFieldersChoice");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingFlyOuts:
                    handler.string_value("MLBPitchingFlyOuts");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingFlyOutsIntoDoublePlays:
                    handler.string_value("MLBPitchingFlyOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingFoulBalls:
                    handler.string_value("MLBPitchingFoulBalls");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingGamesFinished:
                    handler.string_value("MLBPitchingGamesFinished");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingGamesPlayed:
                    handler.string_value("MLBPitchingGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingGamesStarted:
                    handler.string_value("MLBPitchingGamesStarted");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingGroundBallToFlyBallRatio:
                    handler.string_value("MLBPitchingGroundBallToFlyBallRatio");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingGroundOuts:
                    handler.string_value("MLBPitchingGroundOuts");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingGroundOutsIntoDoublePlays:
                    handler.string_value("MLBPitchingGroundOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingHitBatters:
                    handler.string_value("MLBPitchingHitBatters");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingHitsAllowed:
                    handler.string_value("MLBPitchingHitsAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingHolds:
                    handler.string_value("MLBPitchingHolds");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingHomeRunsAllowed:
                    handler.string_value("MLBPitchingHomeRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingInningsPitchedCompletePartial:
                    handler.string_value("MLBPitchingInningsPitchedCompletePartial");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingInningsPitchedTotalOuts:
                    handler.string_value("MLBPitchingInningsPitchedTotalOuts");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingIntentionalBalls:
                    handler.string_value("MLBPitchingIntentionalBalls");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingIntentionalWalks:
                    handler.string_value("MLBPitchingIntentionalWalks");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingLineOuts:
                    handler.string_value("MLBPitchingLineOuts");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingLineOutsIntoDoublePlays:
                    handler.string_value("MLBPitchingLineOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingLosses:
                    handler.string_value("MLBPitchingLosses");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingOpponentsBattingAverage:
                    handler.string_value("MLBPitchingOpponentsBattingAverage");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingOpponentRunnersLeftOnBase:
                    handler.string_value("MLBPitchingOpponentRunnersLeftOnBase");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingPickoffs:
                    handler.string_value("MLBPitchingPickoffs");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingPitchCount:
                    handler.string_value("MLBPitchingPitchCount");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingPopOutsForced:
                    handler.string_value("MLBPitchingPopOutsForced");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingQualityStarts:
                    handler.string_value("MLBPitchingQualityStarts");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingReachedOnError:
                    handler.string_value("MLBPitchingReachedOnError");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingRunnersCaughtStealing:
                    handler.string_value("MLBPitchingRunnersCaughtStealing");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingSacrificeFlys:
                    handler.string_value("MLBPitchingSacrificeFlys");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingSacrificeHits:
                    handler.string_value("MLBPitchingSacrificeHits");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingSaveOpportunities:
                    handler.string_value("MLBPitchingSaveOpportunities");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingSaves:
                    handler.string_value("MLBPitchingSaves");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingShutouts:
                    handler.string_value("MLBPitchingShutouts");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingSinglesAllowed:
                    handler.string_value("MLBPitchingSinglesAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingStolenBasesAllowed:
                    handler.string_value("MLBPitchingStolenBasesAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingStrikeoutsLooking:
                    handler.string_value("MLBPitchingStrikeoutsLooking");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingStrikeoutsPer9Innings:
                    handler.string_value("MLBPitchingStrikeoutsPer9Innings");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingStrikeoutsPerWalk:
                    handler.string_value("MLBPitchingStrikeoutsPerWalk");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingStrikeoutsSwinging:
                    handler.string_value("MLBPitchingStrikeoutsSwinging");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingStrikesLooking:
                    handler.string_value("MLBPitchingStrikesLooking");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingStrikesSwinging:
                    handler.string_value("MLBPitchingStrikesSwinging");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingTotalBasesAllowed:
                    handler.string_value("MLBPitchingTotalBasesAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingTotalRunsAllowed:
                    handler.string_value("MLBPitchingTotalRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingTotalStrikeouts:
                    handler.string_value("MLBPitchingTotalStrikeouts");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingTotalStrikes:
                    handler.string_value("MLBPitchingTotalStrikes");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingTriplesAllowed:
                    handler.string_value("MLBPitchingTriplesAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingUnearnedRunsAllowed:
                    handler.string_value("MLBPitchingUnearnedRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingWalks:
                    handler.string_value("MLBPitchingWalks");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingWalksPlusHitsPerInningPitched:
                    handler.string_value("MLBPitchingWalksPlusHitsPerInningPitched");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingWildPitches:
                    handler.string_value("MLBPitchingWildPitches");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingWins:
                    handler.string_value("MLBPitchingWins");
                    break;
                case TypeValueKnownValues.Value_NHLAssists:
                    handler.string_value("NHLAssists");
                    break;
                case TypeValueKnownValues.Value_NHLAssistsPerGame:
                    handler.string_value("NHLAssistsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLAverageTimeOnIce:
                    handler.string_value("NHLAverageTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_NHLBlockedAttempts:
                    handler.string_value("NHLBlockedAttempts");
                    break;
                case TypeValueKnownValues.Value_NHLBlockedAttemptsPerGame:
                    handler.string_value("NHLBlockedAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLBlockedShots:
                    handler.string_value("NHLBlockedShots");
                    break;
                case TypeValueKnownValues.Value_NHLBlockedShotsPerGame:
                    handler.string_value("NHLBlockedShotsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthAssists:
                    handler.string_value("NHLEvenStrengthAssists");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthFaceoffWinPerc:
                    handler.string_value("NHLEvenStrengthFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthFaceoffs:
                    handler.string_value("NHLEvenStrengthFaceoffs");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthFaceoffsLost:
                    handler.string_value("NHLEvenStrengthFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthFaceoffsWon:
                    handler.string_value("NHLEvenStrengthFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthGoals:
                    handler.string_value("NHLEvenStrengthGoals");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthMissedShots:
                    handler.string_value("NHLEvenStrengthMissedShots");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthShotsOnGoal:
                    handler.string_value("NHLEvenStrengthShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthTimeOnIce:
                    handler.string_value("NHLEvenStrengthTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_NHLFaceoffWinPerc:
                    handler.string_value("NHLFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_NHLFaceoffs:
                    handler.string_value("NHLFaceoffs");
                    break;
                case TypeValueKnownValues.Value_NHLFaceoffsWon:
                    handler.string_value("NHLFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_NHLFaceoffsLost:
                    handler.string_value("NHLFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_NHLGameWinningGoalFlag:
                    handler.string_value("NHLGameWinningGoalFlag");
                    break;
                case TypeValueKnownValues.Value_NHLGameWinningGoals:
                    handler.string_value("NHLGameWinningGoals");
                    break;
                case TypeValueKnownValues.Value_NHLGamesPlayed:
                    handler.string_value("NHLGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_NHLGiveaways:
                    handler.string_value("NHLGiveaways");
                    break;
                case TypeValueKnownValues.Value_NHLGiveawaysPerGame:
                    handler.string_value("NHLGiveawaysPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLGoals:
                    handler.string_value("NHLGoals");
                    break;
                case TypeValueKnownValues.Value_NHLGoalsPerGame:
                    handler.string_value("NHLGoalsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLHits:
                    handler.string_value("NHLHits");
                    break;
                case TypeValueKnownValues.Value_NHLHitsPerGame:
                    handler.string_value("NHLHitsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLMissedShots:
                    handler.string_value("NHLMissedShots");
                    break;
                case TypeValueKnownValues.Value_NHLMissedShotsPerGame:
                    handler.string_value("NHLMissedShotsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLPenalties:
                    handler.string_value("NHLPenalties");
                    break;
                case TypeValueKnownValues.Value_NHLPenaltiesPerGame:
                    handler.string_value("NHLPenaltiesPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLPenaltyGoals:
                    handler.string_value("NHLPenaltyGoals");
                    break;
                case TypeValueKnownValues.Value_NHLPenaltyMinutes:
                    handler.string_value("NHLPenaltyMinutes");
                    break;
                case TypeValueKnownValues.Value_NHLPenaltyMinutesPerGame:
                    handler.string_value("NHLPenaltyMinutesPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLPenaltyMissedShots:
                    handler.string_value("NHLPenaltyMissedShots");
                    break;
                case TypeValueKnownValues.Value_NHLPenaltyShotsOnGoal:
                    handler.string_value("NHLPenaltyShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_NHLPlusMinus:
                    handler.string_value("NHLPlusMinus");
                    break;
                case TypeValueKnownValues.Value_NHLPoints:
                    handler.string_value("NHLPoints");
                    break;
                case TypeValueKnownValues.Value_NHLPointsPerGame:
                    handler.string_value("NHLPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayAssists:
                    handler.string_value("NHLPowerPlayAssists");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayFaceoffWinPerc:
                    handler.string_value("NHLPowerPlayFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayFaceoffs:
                    handler.string_value("NHLPowerPlayFaceoffs");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayFaceoffsLost:
                    handler.string_value("NHLPowerPlayFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayFaceoffsWon:
                    handler.string_value("NHLPowerPlayFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayGoals:
                    handler.string_value("NHLPowerPlayGoals");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayMissedShots:
                    handler.string_value("NHLPowerPlayMissedShots");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayOpportunities:
                    handler.string_value("NHLPowerPlayOpportunities");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayPoints:
                    handler.string_value("NHLPowerPlayPoints");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayShotsOnGoal:
                    handler.string_value("NHLPowerPlayShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayTimeOnIce:
                    handler.string_value("NHLPowerPlayTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_NHLScratches:
                    handler.string_value("NHLScratches");
                    break;
                case TypeValueKnownValues.Value_NHLShifts:
                    handler.string_value("NHLShifts");
                    break;
                case TypeValueKnownValues.Value_NHLShiftsPerGame:
                    handler.string_value("NHLShiftsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLShootingPerc:
                    handler.string_value("NHLShootingPerc");
                    break;
                case TypeValueKnownValues.Value_NHLShootoutGoals:
                    handler.string_value("NHLShootoutGoals");
                    break;
                case TypeValueKnownValues.Value_NHLShootoutMissedShots:
                    handler.string_value("NHLShootoutMissedShots");
                    break;
                case TypeValueKnownValues.Value_NHLShootoutShotsOnGoal:
                    handler.string_value("NHLShootoutShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedAssists:
                    handler.string_value("NHLShortHandedAssists");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedFaceoffWinPerc:
                    handler.string_value("NHLShortHandedFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedFaceoffs:
                    handler.string_value("NHLShortHandedFaceoffs");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedFaceoffsLost:
                    handler.string_value("NHLShortHandedFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedFaceoffsWon:
                    handler.string_value("NHLShortHandedFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedGoals:
                    handler.string_value("NHLShortHandedGoals");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedMissedShots:
                    handler.string_value("NHLShortHandedMissedShots");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedPoints:
                    handler.string_value("NHLShortHandedPoints");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedShotsOnGoal:
                    handler.string_value("NHLShortHandedShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedTimeOnIce:
                    handler.string_value("NHLShortHandedTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_NHLShotsOnGoal:
                    handler.string_value("NHLShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_NHLShotsOnGoalPerGame:
                    handler.string_value("NHLShotsOnGoalPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLTakeaways:
                    handler.string_value("NHLTakeaways");
                    break;
                case TypeValueKnownValues.Value_NHLTakeawaysPerGame:
                    handler.string_value("NHLTakeawaysPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLTeamPenalties:
                    handler.string_value("NHLTeamPenalties");
                    break;
                case TypeValueKnownValues.Value_NHLTeamPenaltiesPerGame:
                    handler.string_value("NHLTeamPenaltiesPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLTeamPenaltyMinutes:
                    handler.string_value("NHLTeamPenaltyMinutes");
                    break;
                case TypeValueKnownValues.Value_NHLTeamPenaltyMinutesPerGame:
                    handler.string_value("NHLTeamPenaltyMinutesPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLTotalTimeOnIce:
                    handler.string_value("NHLTotalTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_NHLTotalTimeOnIcePerGame:
                    handler.string_value("NHLTotalTimeOnIcePerGame");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEmptyNetEvenStrengthGoalsAgainst:
                    handler.string_value("NHLGoaltendingEmptyNetEvenStrengthGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEmptyNetGoalsAgainst:
                    handler.string_value("NHLGoaltendingEmptyNetGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEmptyNetPowerPlayGoalsAgainst:
                    handler.string_value("NHLGoaltendingEmptyNetPowerPlayGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEmptyNetShortHandedGoalsAgainst:
                    handler.string_value("NHLGoaltendingEmptyNetShortHandedGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEmptyNetShotsAgainst:
                    handler.string_value("NHLGoaltendingEmptyNetShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthGoalsAgainst:
                    handler.string_value("NHLGoaltendingEvenStrengthGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthSavePerc:
                    handler.string_value("NHLGoaltendingEvenStrengthSavePerc");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthSaves:
                    handler.string_value("NHLGoaltendingEvenStrengthSaves");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthShotsAgainst:
                    handler.string_value("NHLGoaltendingEvenStrengthShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingGoalsAgainst:
                    handler.string_value("NHLGoaltendingGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingGoalsAgainstAverage:
                    handler.string_value("NHLGoaltendingGoalsAgainstAverage");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingGoalsAgainstPerGame:
                    handler.string_value("NHLGoaltendingGoalsAgainstPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingLosses:
                    handler.string_value("NHLGoaltendingLosses");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingOutcome:
                    handler.string_value("NHLGoaltendingOutcome");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingOvertimeLosses:
                    handler.string_value("NHLGoaltendingOvertimeLosses");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPenaltyGoalsAgainst:
                    handler.string_value("NHLGoaltendingPenaltyGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPenaltySavePerc:
                    handler.string_value("NHLGoaltendingPenaltySavePerc");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPenaltySaves:
                    handler.string_value("NHLGoaltendingPenaltySaves");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPenaltyShotsAgainst:
                    handler.string_value("NHLGoaltendingPenaltyShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPowerPlayGoalsAgainst:
                    handler.string_value("NHLGoaltendingPowerPlayGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPowerPlaySavePerc:
                    handler.string_value("NHLGoaltendingPowerPlaySavePerc");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPowerPlaySaves:
                    handler.string_value("NHLGoaltendingPowerPlaySaves");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPowerPlayShotsAgainst:
                    handler.string_value("NHLGoaltendingPowerPlayShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingSavePerc:
                    handler.string_value("NHLGoaltendingSavePerc");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingSaves:
                    handler.string_value("NHLGoaltendingSaves");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShootoutGoalsAgainst:
                    handler.string_value("NHLGoaltendingShootoutGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShootoutSavePerc:
                    handler.string_value("NHLGoaltendingShootoutSavePerc");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShootoutSaves:
                    handler.string_value("NHLGoaltendingShootoutSaves");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShootoutShotsAgainst:
                    handler.string_value("NHLGoaltendingShootoutShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShortHandedGoalsAgainst:
                    handler.string_value("NHLGoaltendingShortHandedGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShortHandedSavePerc:
                    handler.string_value("NHLGoaltendingShortHandedSavePerc");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShortHandedSaves:
                    handler.string_value("NHLGoaltendingShortHandedSaves");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShortHandedShotsAgainst:
                    handler.string_value("NHLGoaltendingShortHandedShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShotsAgainst:
                    handler.string_value("NHLGoaltendingShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShotsAgainstPerGame:
                    handler.string_value("NHLGoaltendingShotsAgainstPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShutoutFlag:
                    handler.string_value("NHLGoaltendingShutoutFlag");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShutouts:
                    handler.string_value("NHLGoaltendingShutouts");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingTotalGoalsAgainst:
                    handler.string_value("NHLGoaltendingTotalGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingTotalShotsAgainst:
                    handler.string_value("NHLGoaltendingTotalShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingWins:
                    handler.string_value("NHLGoaltendingWins");
                    break;
                case TypeValueKnownValues.Value_NFL3rdDownConversionAttempts:
                    handler.string_value("NFL3rdDownConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_NFL3rdDownConversions:
                    handler.string_value("NFL3rdDownConversions");
                    break;
                case TypeValueKnownValues.Value_NFL3rdDownConversionPerc:
                    handler.string_value("NFL3rdDownConversionPerc");
                    break;
                case TypeValueKnownValues.Value_NFL3rdDownConversionsViaPass:
                    handler.string_value("NFL3rdDownConversionsViaPass");
                    break;
                case TypeValueKnownValues.Value_NFL3rdDownConversionsViaPenalty:
                    handler.string_value("NFL3rdDownConversionsViaPenalty");
                    break;
                case TypeValueKnownValues.Value_NFL3rdDownConversionsViaRush:
                    handler.string_value("NFL3rdDownConversionsViaRush");
                    break;
                case TypeValueKnownValues.Value_NFL4thDownConversionAttempts:
                    handler.string_value("NFL4thDownConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_NFL4thDownConversions:
                    handler.string_value("NFL4thDownConversions");
                    break;
                case TypeValueKnownValues.Value_NFL4thDownConversionPerc:
                    handler.string_value("NFL4thDownConversionPerc");
                    break;
                case TypeValueKnownValues.Value_NFL4thDownConversionsViaPass:
                    handler.string_value("NFL4thDownConversionsViaPass");
                    break;
                case TypeValueKnownValues.Value_NFL4thDownConversionsViaPenalty:
                    handler.string_value("NFL4thDownConversionsViaPenalty");
                    break;
                case TypeValueKnownValues.Value_NFL4thDownConversionsViaRush:
                    handler.string_value("NFL4thDownConversionsViaRush");
                    break;
                case TypeValueKnownValues.Value_NFLGamesPlayed:
                    handler.string_value("NFLGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_NFLGamesStarted:
                    handler.string_value("NFLGamesStarted");
                    break;
                case TypeValueKnownValues.Value_NFLGoalEfficiencyAttempts:
                    handler.string_value("NFLGoalEfficiencyAttempts");
                    break;
                case TypeValueKnownValues.Value_NFLGoalEfficiencyPerc:
                    handler.string_value("NFLGoalEfficiencyPerc");
                    break;
                case TypeValueKnownValues.Value_NFLGoalEfficiencyTouchdowns:
                    handler.string_value("NFLGoalEfficiencyTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLPassing10PlusYards:
                    handler.string_value("NFLPassing10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassing20PlusYards:
                    handler.string_value("NFLPassing20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassing30PlusYards:
                    handler.string_value("NFLPassing30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassing40PlusYards:
                    handler.string_value("NFLPassing40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassing50PlusYards:
                    handler.string_value("NFLPassing50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassingAttempts:
                    handler.string_value("NFLPassingAttempts");
                    break;
                case TypeValueKnownValues.Value_NFLPassingAverageYardsPerCompletion:
                    handler.string_value("NFLPassingAverageYardsPerCompletion");
                    break;
                case TypeValueKnownValues.Value_NFLPassingAverageYardsPerAttempt:
                    handler.string_value("NFLPassingAverageYardsPerAttempt");
                    break;
                case TypeValueKnownValues.Value_NFLPassingCompletionPerc:
                    handler.string_value("NFLPassingCompletionPerc");
                    break;
                case TypeValueKnownValues.Value_NFLPassingCompletions:
                    handler.string_value("NFLPassingCompletions");
                    break;
                case TypeValueKnownValues.Value_NFLPassing1stDowns:
                    handler.string_value("NFLPassing1stDowns");
                    break;
                case TypeValueKnownValues.Value_NFLPassingGrossYards:
                    handler.string_value("NFLPassingGrossYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassingInterceptionPerc:
                    handler.string_value("NFLPassingInterceptionPerc");
                    break;
                case TypeValueKnownValues.Value_NFLPassingInterceptions:
                    handler.string_value("NFLPassingInterceptions");
                    break;
                case TypeValueKnownValues.Value_NFLPassingInterceptionsReturnedForTouchdown:
                    handler.string_value("NFLPassingInterceptionsReturnedForTouchdown");
                    break;
                case TypeValueKnownValues.Value_NFLPassingLongestPass:
                    handler.string_value("NFLPassingLongestPass");
                    break;
                case TypeValueKnownValues.Value_NFLPassingNetYards:
                    handler.string_value("NFLPassingNetYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassingRating:
                    handler.string_value("NFLPassingRating");
                    break;
                case TypeValueKnownValues.Value_NFLPassingRedZoneAttempts:
                    handler.string_value("NFLPassingRedZoneAttempts");
                    break;
                case TypeValueKnownValues.Value_NFLPassingSacked:
                    handler.string_value("NFLPassingSacked");
                    break;
                case TypeValueKnownValues.Value_NFLPassingSackedYardsLost:
                    handler.string_value("NFLPassingSackedYardsLost");
                    break;
                case TypeValueKnownValues.Value_NFLPassingTackledForSafety:
                    handler.string_value("NFLPassingTackledForSafety");
                    break;
                case TypeValueKnownValues.Value_NFLPassingTotalYards:
                    handler.string_value("NFLPassingTotalYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassingTouchdownPerc:
                    handler.string_value("NFLPassingTouchdownPerc");
                    break;
                case TypeValueKnownValues.Value_NFLPassingTouchdowns:
                    handler.string_value("NFLPassingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLReceiving10PlusYards:
                    handler.string_value("NFLReceiving10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLReceiving20PlusYards:
                    handler.string_value("NFLReceiving20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLReceiving30PlusYards:
                    handler.string_value("NFLReceiving30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLReceiving40PlusYards:
                    handler.string_value("NFLReceiving40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLReceiving50PlusYards:
                    handler.string_value("NFLReceiving50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingAverageReception:
                    handler.string_value("NFLReceivingAverageReception");
                    break;
                case TypeValueKnownValues.Value_NFLReceiving1stDowns:
                    handler.string_value("NFLReceiving1stDowns");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingFumbledOnReception:
                    handler.string_value("NFLReceivingFumbledOnReception");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingLongestReception:
                    handler.string_value("NFLReceivingLongestReception");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingReceptions:
                    handler.string_value("NFLReceivingReceptions");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingRedZoneTargets:
                    handler.string_value("NFLReceivingRedZoneTargets");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingTargets:
                    handler.string_value("NFLReceivingTargets");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingTotalYards:
                    handler.string_value("NFLReceivingTotalYards");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingTouchdowns:
                    handler.string_value("NFLReceivingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingYardsAfterCompletion:
                    handler.string_value("NFLReceivingYardsAfterCompletion");
                    break;
                case TypeValueKnownValues.Value_NFLRedZoneEfficiencyAttempts:
                    handler.string_value("NFLRedZoneEfficiencyAttempts");
                    break;
                case TypeValueKnownValues.Value_NFLRedZoneEfficiencyConversions:
                    handler.string_value("NFLRedZoneEfficiencyConversions");
                    break;
                case TypeValueKnownValues.Value_NFLRedZoneEfficiencyPerc:
                    handler.string_value("NFLRedZoneEfficiencyPerc");
                    break;
                case TypeValueKnownValues.Value_NFLRushing10PlusYards:
                    handler.string_value("NFLRushing10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLRushing20PlusYards:
                    handler.string_value("NFLRushing20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLRushing30PlusYards:
                    handler.string_value("NFLRushing30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLRushing40PlusYards:
                    handler.string_value("NFLRushing40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLRushing50PlusYards:
                    handler.string_value("NFLRushing50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLRushingAttempts:
                    handler.string_value("NFLRushingAttempts");
                    break;
                case TypeValueKnownValues.Value_NFLRushingAverageRush:
                    handler.string_value("NFLRushingAverageRush");
                    break;
                case TypeValueKnownValues.Value_NFLRushing1stDownPerc:
                    handler.string_value("NFLRushing1stDownPerc");
                    break;
                case TypeValueKnownValues.Value_NFLRushing1stDowns:
                    handler.string_value("NFLRushing1stDowns");
                    break;
                case TypeValueKnownValues.Value_NFLRushingFumbledOnRush:
                    handler.string_value("NFLRushingFumbledOnRush");
                    break;
                case TypeValueKnownValues.Value_NFLRushingLongestRush:
                    handler.string_value("NFLRushingLongestRush");
                    break;
                case TypeValueKnownValues.Value_NFLRushingRedZoneAttempts:
                    handler.string_value("NFLRushingRedZoneAttempts");
                    break;
                case TypeValueKnownValues.Value_NFLRushingTackledForSafety:
                    handler.string_value("NFLRushingTackledForSafety");
                    break;
                case TypeValueKnownValues.Value_NFLRushingTotalYards:
                    handler.string_value("NFLRushingTotalYards");
                    break;
                case TypeValueKnownValues.Value_NFLRushingTouchdowns:
                    handler.string_value("NFLRushingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFL1stDowns:
                    handler.string_value("NFL1stDowns");
                    break;
                case TypeValueKnownValues.Value_NFL2PointConversionsAttempted:
                    handler.string_value("NFL2PointConversionsAttempted");
                    break;
                case TypeValueKnownValues.Value_NFL2PointConversionsFailed:
                    handler.string_value("NFL2PointConversionsFailed");
                    break;
                case TypeValueKnownValues.Value_NFL2PointConversionsMade:
                    handler.string_value("NFL2PointConversionsMade");
                    break;
                case TypeValueKnownValues.Value_NFL2PointConversionsPassing:
                    handler.string_value("NFL2PointConversionsPassing");
                    break;
                case TypeValueKnownValues.Value_NFL2PointConversionsReceiving:
                    handler.string_value("NFL2PointConversionsReceiving");
                    break;
                case TypeValueKnownValues.Value_NFL2PointConversionsRushing:
                    handler.string_value("NFL2PointConversionsRushing");
                    break;
                case TypeValueKnownValues.Value_NFL1PointSafety:
                    handler.string_value("NFL1PointSafety");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedKicks:
                    handler.string_value("NFLBlockedKicks");
                    break;
                case TypeValueKnownValues.Value_NFLConversionAttempts:
                    handler.string_value("NFLConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_NFLConversionsCompleted:
                    handler.string_value("NFLConversionsCompleted");
                    break;
                case TypeValueKnownValues.Value_NFLConversionsFailed:
                    handler.string_value("NFLConversionsFailed");
                    break;
                case TypeValueKnownValues.Value_NFLForcedFumbles:
                    handler.string_value("NFLForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesRecovered:
                    handler.string_value("NFLFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesRecoveredForTouchdowns:
                    handler.string_value("NFLFumblesRecoveredForTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLInterceptions:
                    handler.string_value("NFLInterceptions");
                    break;
                case TypeValueKnownValues.Value_NFLInterceptionsLongestInterception:
                    handler.string_value("NFLInterceptionsLongestInterception");
                    break;
                case TypeValueKnownValues.Value_NFLInterceptionsTouchdowns:
                    handler.string_value("NFLInterceptionsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLInterceptionsYards:
                    handler.string_value("NFLInterceptionsYards");
                    break;
                case TypeValueKnownValues.Value_NFLMiscAssistedTackles:
                    handler.string_value("NFLMiscAssistedTackles");
                    break;
                case TypeValueKnownValues.Value_NFLMiscCombinedTackles:
                    handler.string_value("NFLMiscCombinedTackles");
                    break;
                case TypeValueKnownValues.Value_NFLMiscForcedFumbles:
                    handler.string_value("NFLMiscForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_NFLMiscFumblesRecovered:
                    handler.string_value("NFLMiscFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_NFLMiscTackles:
                    handler.string_value("NFLMiscTackles");
                    break;
                case TypeValueKnownValues.Value_NFLPassesDefended:
                    handler.string_value("NFLPassesDefended");
                    break;
                case TypeValueKnownValues.Value_NFLQuarterbackHits:
                    handler.string_value("NFLQuarterbackHits");
                    break;
                case TypeValueKnownValues.Value_NFLSacks:
                    handler.string_value("NFLSacks");
                    break;
                case TypeValueKnownValues.Value_NFLSackYards:
                    handler.string_value("NFLSackYards");
                    break;
                case TypeValueKnownValues.Value_NFLSafeties:
                    handler.string_value("NFLSafeties");
                    break;
                case TypeValueKnownValues.Value_NFLSpecialTeamsAssistedTackles:
                    handler.string_value("NFLSpecialTeamsAssistedTackles");
                    break;
                case TypeValueKnownValues.Value_NFLSpecialTeamsCombinedTackles:
                    handler.string_value("NFLSpecialTeamsCombinedTackles");
                    break;
                case TypeValueKnownValues.Value_NFLSpecialTeamsForcedFumbles:
                    handler.string_value("NFLSpecialTeamsForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_NFLSpecialTeamsFumblesRecovered:
                    handler.string_value("NFLSpecialTeamsFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_NFLSpecialTeamsTotalTackles:
                    handler.string_value("NFLSpecialTeamsTotalTackles");
                    break;
                case TypeValueKnownValues.Value_NFLTacklesAssisted:
                    handler.string_value("NFLTacklesAssisted");
                    break;
                case TypeValueKnownValues.Value_NFLTacklesCombined:
                    handler.string_value("NFLTacklesCombined");
                    break;
                case TypeValueKnownValues.Value_NFLTacklesForLoss:
                    handler.string_value("NFLTacklesForLoss");
                    break;
                case TypeValueKnownValues.Value_NFLTackles:
                    handler.string_value("NFLTackles");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns10PlusYards:
                    handler.string_value("NFLBlockedFieldGoalReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns20PlusYards:
                    handler.string_value("NFLBlockedFieldGoalReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns30PlusYards:
                    handler.string_value("NFLBlockedFieldGoalReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns40PlusYards:
                    handler.string_value("NFLBlockedFieldGoalReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns50PlusYards:
                    handler.string_value("NFLBlockedFieldGoalReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsAverageReturn:
                    handler.string_value("NFLBlockedFieldGoalReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsLongestReturn:
                    handler.string_value("NFLBlockedFieldGoalReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns:
                    handler.string_value("NFLBlockedFieldGoalReturns");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsTotalYards:
                    handler.string_value("NFLBlockedFieldGoalReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsTouchdowns:
                    handler.string_value("NFLBlockedFieldGoalReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturn10PlusYards:
                    handler.string_value("NFLBlockedPuntReturn10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturn20PlusYards:
                    handler.string_value("NFLBlockedPuntReturn20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturn30PlusYards:
                    handler.string_value("NFLBlockedPuntReturn30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturn40PlusYards:
                    handler.string_value("NFLBlockedPuntReturn40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturn50PlusYards:
                    handler.string_value("NFLBlockedPuntReturn50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturnsAverageReturn:
                    handler.string_value("NFLBlockedPuntReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturnsLongestReturn:
                    handler.string_value("NFLBlockedPuntReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturns:
                    handler.string_value("NFLBlockedPuntReturns");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturnsTotalYards:
                    handler.string_value("NFLBlockedPuntReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturnsTouchdowns:
                    handler.string_value("NFLBlockedPuntReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsAttempted:
                    handler.string_value("NFLExtraPointsAttempted");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsAttemptedKicking:
                    handler.string_value("NFLExtraPointsAttemptedKicking");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsAttempted2PointConversion:
                    handler.string_value("NFLExtraPointsAttempted2PointConversion");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsBlocked:
                    handler.string_value("NFLExtraPointsBlocked");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsMade:
                    handler.string_value("NFLExtraPointsMade");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsMadeKicking:
                    handler.string_value("NFLExtraPointsMadeKicking");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsMade2PointConversion:
                    handler.string_value("NFLExtraPointsMade2PointConversion");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsPerc:
                    handler.string_value("NFLExtraPointsPerc");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturns10PlusYards:
                    handler.string_value("NFLFieldGoalReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturns20PlusYards:
                    handler.string_value("NFLFieldGoalReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturns30PlusYards:
                    handler.string_value("NFLFieldGoalReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturns40PlusYards:
                    handler.string_value("NFLFieldGoalReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturns50PlusYards:
                    handler.string_value("NFLFieldGoalReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturnsAverageReturn:
                    handler.string_value("NFLFieldGoalReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturnsLongestReturn:
                    handler.string_value("NFLFieldGoalReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturns:
                    handler.string_value("NFLFieldGoalReturns");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturnsTotalYards:
                    handler.string_value("NFLFieldGoalReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturnsTouchdowns:
                    handler.string_value("NFLFieldGoalReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsAttempted:
                    handler.string_value("NFLFieldGoalsAttempted");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsAttempted1to19Yards:
                    handler.string_value("NFLFieldGoalsAttempted1to19Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsAttempted20to29Yards:
                    handler.string_value("NFLFieldGoalsAttempted20to29Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsAttempted30to39Yards:
                    handler.string_value("NFLFieldGoalsAttempted30to39Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsAttempted40to49Yards:
                    handler.string_value("NFLFieldGoalsAttempted40to49Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsAttempted50PlusYards:
                    handler.string_value("NFLFieldGoalsAttempted50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsBlocked:
                    handler.string_value("NFLFieldGoalsBlocked");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsLongestMade:
                    handler.string_value("NFLFieldGoalsLongestMade");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsMade:
                    handler.string_value("NFLFieldGoalsMade");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsMade1to19Yards:
                    handler.string_value("NFLFieldGoalsMade1to19Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsMade20to29Yards:
                    handler.string_value("NFLFieldGoalsMade20to29Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsMade30to39Yards:
                    handler.string_value("NFLFieldGoalsMade30to39Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsMade40to49Yards:
                    handler.string_value("NFLFieldGoalsMade40to49Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsMade50PlusYards:
                    handler.string_value("NFLFieldGoalsMade50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsPerc:
                    handler.string_value("NFLFieldGoalsPerc");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturns10PlusYards:
                    handler.string_value("NFLKickoffReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturns20PlusYards:
                    handler.string_value("NFLKickoffReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturns30PlusYards:
                    handler.string_value("NFLKickoffReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturns40PlusYards:
                    handler.string_value("NFLKickoffReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturns50PlusYards:
                    handler.string_value("NFLKickoffReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturnsAverageRun:
                    handler.string_value("NFLKickoffReturnsAverageRun");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturnsFairCatches:
                    handler.string_value("NFLKickoffReturnsFairCatches");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturnsLongestKickReturn:
                    handler.string_value("NFLKickoffReturnsLongestKickReturn");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturnsReturns:
                    handler.string_value("NFLKickoffReturnsReturns");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturnsTouchdowns:
                    handler.string_value("NFLKickoffReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturnsYards:
                    handler.string_value("NFLKickoffReturnsYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsAverageGrossYards:
                    handler.string_value("NFLKickoffsAverageGrossYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsAverageNetYards:
                    handler.string_value("NFLKickoffsAverageNetYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsAverageReturnYards:
                    handler.string_value("NFLKickoffsAverageReturnYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsEndZoneKicks:
                    handler.string_value("NFLKickoffsEndZoneKicks");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsGrossYards:
                    handler.string_value("NFLKickoffsGrossYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsInsideOpponents20YardLine:
                    handler.string_value("NFLKickoffsInsideOpponents20YardLine");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsKicks:
                    handler.string_value("NFLKickoffsKicks");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsLongestKick:
                    handler.string_value("NFLKickoffsLongestKick");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsNetYards:
                    handler.string_value("NFLKickoffsNetYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsInsideOpponents20YardLinePerc:
                    handler.string_value("NFLKickoffsInsideOpponents20YardLinePerc");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsTouchbacksPerc:
                    handler.string_value("NFLKickoffsTouchbacksPerc");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsReturned:
                    handler.string_value("NFLKickoffsReturned");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsTotalReturnYards:
                    handler.string_value("NFLKickoffsTotalReturnYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsTouchbacks:
                    handler.string_value("NFLKickoffsTouchbacks");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturns10PlusYards:
                    handler.string_value("NFLPuntReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturns20PlusYards:
                    handler.string_value("NFLPuntReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturns30PlusYards:
                    handler.string_value("NFLPuntReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturns40PlusYards:
                    handler.string_value("NFLPuntReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturns50PlusYards:
                    handler.string_value("NFLPuntReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturnsAverageRun:
                    handler.string_value("NFLPuntReturnsAverageRun");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturnsFairCatches:
                    handler.string_value("NFLPuntReturnsFairCatches");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturnsLongestKickReturn:
                    handler.string_value("NFLPuntReturnsLongestKickReturn");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturns:
                    handler.string_value("NFLPuntReturns");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturnsTouchdowns:
                    handler.string_value("NFLPuntReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturnsYards:
                    handler.string_value("NFLPuntReturnsYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingAverageGrossYards:
                    handler.string_value("NFLPuntingAverageGrossYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingAverageNetYards:
                    handler.string_value("NFLPuntingAverageNetYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingAverageReturnYards:
                    handler.string_value("NFLPuntingAverageReturnYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingBlocked:
                    handler.string_value("NFLPuntingBlocked");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingGrossYards:
                    handler.string_value("NFLPuntingGrossYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingInsideOpponents20YardLine:
                    handler.string_value("NFLPuntingInsideOpponents20YardLine");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingLongestPunt:
                    handler.string_value("NFLPuntingLongestPunt");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingNetYards:
                    handler.string_value("NFLPuntingNetYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingInsideOpponents20YardLinePerc:
                    handler.string_value("NFLPuntingInsideOpponents20YardLinePerc");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingTouchbacksPerc:
                    handler.string_value("NFLPuntingTouchbacksPerc");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingPunts:
                    handler.string_value("NFLPuntingPunts");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingReturnYards:
                    handler.string_value("NFLPuntingReturnYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingReturned:
                    handler.string_value("NFLPuntingReturned");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingTouchbacks:
                    handler.string_value("NFLPuntingTouchbacks");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesForced:
                    handler.string_value("NFLFumblesForced");
                    break;
                case TypeValueKnownValues.Value_NFLFumbles:
                    handler.string_value("NFLFumbles");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesLost:
                    handler.string_value("NFLFumblesLost");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesOpponentRecovery:
                    handler.string_value("NFLFumblesOpponentRecovery");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesOpponentTouchdownsFromRecovery:
                    handler.string_value("NFLFumblesOpponentTouchdownsFromRecovery");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesOutOfBounds:
                    handler.string_value("NFLFumblesOutOfBounds");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesOwnRecovery:
                    handler.string_value("NFLFumblesOwnRecovery");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesOwnTouchdownsFromRecovery:
                    handler.string_value("NFLFumblesOwnTouchdownsFromRecovery");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesYardsFromOpponentRecovery:
                    handler.string_value("NFLFumblesYardsFromOpponentRecovery");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesYardsFromOwnRecovery:
                    handler.string_value("NFLFumblesYardsFromOwnRecovery");
                    break;
                case TypeValueKnownValues.Value_NFLPenalties1stDowns:
                    handler.string_value("NFLPenalties1stDowns");
                    break;
                case TypeValueKnownValues.Value_NFLPenalties:
                    handler.string_value("NFLPenalties");
                    break;
                case TypeValueKnownValues.Value_NFLPenaltiesYards:
                    handler.string_value("NFLPenaltiesYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFB3rdDownConversionAttempts:
                    handler.string_value("NCAAFB3rdDownConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFB3rdDownConversions:
                    handler.string_value("NCAAFB3rdDownConversions");
                    break;
                case TypeValueKnownValues.Value_NCAAFB3rdDownConversionPerc:
                    handler.string_value("NCAAFB3rdDownConversionPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFB3rdDownConversionsViaPass:
                    handler.string_value("NCAAFB3rdDownConversionsViaPass");
                    break;
                case TypeValueKnownValues.Value_NCAAFB3rdDownConversionsViaPenalty:
                    handler.string_value("NCAAFB3rdDownConversionsViaPenalty");
                    break;
                case TypeValueKnownValues.Value_NCAAFB3rdDownConversionsViaRush:
                    handler.string_value("NCAAFB3rdDownConversionsViaRush");
                    break;
                case TypeValueKnownValues.Value_NCAAFB4thDownConversionAttempts:
                    handler.string_value("NCAAFB4thDownConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFB4thDownConversions:
                    handler.string_value("NCAAFB4thDownConversions");
                    break;
                case TypeValueKnownValues.Value_NCAAFB4thDownConversionPerc:
                    handler.string_value("NCAAFB4thDownConversionPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFB4thDownConversionsViaPass:
                    handler.string_value("NCAAFB4thDownConversionsViaPass");
                    break;
                case TypeValueKnownValues.Value_NCAAFB4thDownConversionsViaPenalty:
                    handler.string_value("NCAAFB4thDownConversionsViaPenalty");
                    break;
                case TypeValueKnownValues.Value_NCAAFB4thDownConversionsViaRush:
                    handler.string_value("NCAAFB4thDownConversionsViaRush");
                    break;
                case TypeValueKnownValues.Value_NCAAFBGamesPlayed:
                    handler.string_value("NCAAFBGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_NCAAFBGamesStarted:
                    handler.string_value("NCAAFBGamesStarted");
                    break;
                case TypeValueKnownValues.Value_NCAAFBGoalEfficiencyAttempts:
                    handler.string_value("NCAAFBGoalEfficiencyAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFBGoalEfficiencyPerc:
                    handler.string_value("NCAAFBGoalEfficiencyPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBGoalEfficiencyTouchdowns:
                    handler.string_value("NCAAFBGoalEfficiencyTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassing10PlusYards:
                    handler.string_value("NCAAFBPassing10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassing20PlusYards:
                    handler.string_value("NCAAFBPassing20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassing30PlusYards:
                    handler.string_value("NCAAFBPassing30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassing40PlusYards:
                    handler.string_value("NCAAFBPassing40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassing50PlusYards:
                    handler.string_value("NCAAFBPassing50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingAttempts:
                    handler.string_value("NCAAFBPassingAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingAverageYardsPerCompletion:
                    handler.string_value("NCAAFBPassingAverageYardsPerCompletion");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingAverageYardsPerAttempt:
                    handler.string_value("NCAAFBPassingAverageYardsPerAttempt");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingCompletionPerc:
                    handler.string_value("NCAAFBPassingCompletionPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingCompletions:
                    handler.string_value("NCAAFBPassingCompletions");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassing1stDowns:
                    handler.string_value("NCAAFBPassing1stDowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingGrossYards:
                    handler.string_value("NCAAFBPassingGrossYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingInterceptionPerc:
                    handler.string_value("NCAAFBPassingInterceptionPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingInterceptions:
                    handler.string_value("NCAAFBPassingInterceptions");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingInterceptionsReturnedForTouchdown:
                    handler.string_value("NCAAFBPassingInterceptionsReturnedForTouchdown");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingLongestPass:
                    handler.string_value("NCAAFBPassingLongestPass");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingNetYards:
                    handler.string_value("NCAAFBPassingNetYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingRating:
                    handler.string_value("NCAAFBPassingRating");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingRedZoneAttempts:
                    handler.string_value("NCAAFBPassingRedZoneAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingSacked:
                    handler.string_value("NCAAFBPassingSacked");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingSackedYardsLost:
                    handler.string_value("NCAAFBPassingSackedYardsLost");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingTackledForSafety:
                    handler.string_value("NCAAFBPassingTackledForSafety");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingTotalYards:
                    handler.string_value("NCAAFBPassingTotalYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingTouchdownPerc:
                    handler.string_value("NCAAFBPassingTouchdownPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingTouchdowns:
                    handler.string_value("NCAAFBPassingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceiving10PlusYards:
                    handler.string_value("NCAAFBReceiving10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceiving20PlusYards:
                    handler.string_value("NCAAFBReceiving20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceiving30PlusYards:
                    handler.string_value("NCAAFBReceiving30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceiving40PlusYards:
                    handler.string_value("NCAAFBReceiving40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceiving50PlusYards:
                    handler.string_value("NCAAFBReceiving50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingAverageReception:
                    handler.string_value("NCAAFBReceivingAverageReception");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceiving1stDowns:
                    handler.string_value("NCAAFBReceiving1stDowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingFumbledOnReception:
                    handler.string_value("NCAAFBReceivingFumbledOnReception");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingLongestReception:
                    handler.string_value("NCAAFBReceivingLongestReception");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingReceptions:
                    handler.string_value("NCAAFBReceivingReceptions");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingRedZoneTargets:
                    handler.string_value("NCAAFBReceivingRedZoneTargets");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingTargets:
                    handler.string_value("NCAAFBReceivingTargets");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingTotalYards:
                    handler.string_value("NCAAFBReceivingTotalYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingTouchdowns:
                    handler.string_value("NCAAFBReceivingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingYardsAfterCompletion:
                    handler.string_value("NCAAFBReceivingYardsAfterCompletion");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRedZoneEfficiencyAttempts:
                    handler.string_value("NCAAFBRedZoneEfficiencyAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRedZoneEfficiencyConversions:
                    handler.string_value("NCAAFBRedZoneEfficiencyConversions");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRedZoneEfficiencyPerc:
                    handler.string_value("NCAAFBRedZoneEfficiencyPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushing10PlusYards:
                    handler.string_value("NCAAFBRushing10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushing20PlusYards:
                    handler.string_value("NCAAFBRushing20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushing30PlusYards:
                    handler.string_value("NCAAFBRushing30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushing40PlusYards:
                    handler.string_value("NCAAFBRushing40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushing50PlusYards:
                    handler.string_value("NCAAFBRushing50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingAttempts:
                    handler.string_value("NCAAFBRushingAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingAverageRush:
                    handler.string_value("NCAAFBRushingAverageRush");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushing1stDownPerc:
                    handler.string_value("NCAAFBRushing1stDownPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushing1stDowns:
                    handler.string_value("NCAAFBRushing1stDowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingFumbledOnRush:
                    handler.string_value("NCAAFBRushingFumbledOnRush");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingLongestRush:
                    handler.string_value("NCAAFBRushingLongestRush");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingRedZoneAttempts:
                    handler.string_value("NCAAFBRushingRedZoneAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingTackledForSafety:
                    handler.string_value("NCAAFBRushingTackledForSafety");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingTotalYards:
                    handler.string_value("NCAAFBRushingTotalYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingTouchdowns:
                    handler.string_value("NCAAFBRushingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFB1stDowns:
                    handler.string_value("NCAAFB1stDowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFB2PointConversionsAttempted:
                    handler.string_value("NCAAFB2PointConversionsAttempted");
                    break;
                case TypeValueKnownValues.Value_NCAAFB2PointConversionsFailed:
                    handler.string_value("NCAAFB2PointConversionsFailed");
                    break;
                case TypeValueKnownValues.Value_NCAAFB2PointConversionsMade:
                    handler.string_value("NCAAFB2PointConversionsMade");
                    break;
                case TypeValueKnownValues.Value_NCAAFB2PointConversionsPassing:
                    handler.string_value("NCAAFB2PointConversionsPassing");
                    break;
                case TypeValueKnownValues.Value_NCAAFB2PointConversionsReceiving:
                    handler.string_value("NCAAFB2PointConversionsReceiving");
                    break;
                case TypeValueKnownValues.Value_NCAAFB2PointConversionsRushing:
                    handler.string_value("NCAAFB2PointConversionsRushing");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedKicks:
                    handler.string_value("NCAAFBBlockedKicks");
                    break;
                case TypeValueKnownValues.Value_NCAAFBForcedFumbles:
                    handler.string_value("NCAAFBForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesRecovered:
                    handler.string_value("NCAAFBFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesRecoveredForTouchdowns:
                    handler.string_value("NCAAFBFumblesRecoveredForTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBInterceptions:
                    handler.string_value("NCAAFBInterceptions");
                    break;
                case TypeValueKnownValues.Value_NCAAFBInterceptionsLongestInterception:
                    handler.string_value("NCAAFBInterceptionsLongestInterception");
                    break;
                case TypeValueKnownValues.Value_NCAAFBInterceptionsTouchdowns:
                    handler.string_value("NCAAFBInterceptionsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBInterceptionsYards:
                    handler.string_value("NCAAFBInterceptionsYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBMiscAssistedTackles:
                    handler.string_value("NCAAFBMiscAssistedTackles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBMiscCombinedTackles:
                    handler.string_value("NCAAFBMiscCombinedTackles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBMiscForcedFumbles:
                    handler.string_value("NCAAFBMiscForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBMiscFumblesRecovered:
                    handler.string_value("NCAAFBMiscFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_NCAAFBMiscTackles:
                    handler.string_value("NCAAFBMiscTackles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassesDefended:
                    handler.string_value("NCAAFBPassesDefended");
                    break;
                case TypeValueKnownValues.Value_NCAAFBQuarterbackHits:
                    handler.string_value("NCAAFBQuarterbackHits");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSacks:
                    handler.string_value("NCAAFBSacks");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSackYards:
                    handler.string_value("NCAAFBSackYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSafeties:
                    handler.string_value("NCAAFBSafeties");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSpecialTeamsAssistedTackles:
                    handler.string_value("NCAAFBSpecialTeamsAssistedTackles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSpecialTeamsCombinedTackles:
                    handler.string_value("NCAAFBSpecialTeamsCombinedTackles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSpecialTeamsForcedFumbles:
                    handler.string_value("NCAAFBSpecialTeamsForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSpecialTeamsFumblesRecovered:
                    handler.string_value("NCAAFBSpecialTeamsFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSpecialTeamsTotalTackles:
                    handler.string_value("NCAAFBSpecialTeamsTotalTackles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBTacklesAssisted:
                    handler.string_value("NCAAFBTacklesAssisted");
                    break;
                case TypeValueKnownValues.Value_NCAAFBTacklesCombined:
                    handler.string_value("NCAAFBTacklesCombined");
                    break;
                case TypeValueKnownValues.Value_NCAAFBTacklesForLoss:
                    handler.string_value("NCAAFBTacklesForLoss");
                    break;
                case TypeValueKnownValues.Value_NCAAFBTackles:
                    handler.string_value("NCAAFBTackles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns10PlusYards:
                    handler.string_value("NCAAFBBlockedFieldGoalReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns20PlusYards:
                    handler.string_value("NCAAFBBlockedFieldGoalReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns30PlusYards:
                    handler.string_value("NCAAFBBlockedFieldGoalReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns40PlusYards:
                    handler.string_value("NCAAFBBlockedFieldGoalReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns50PlusYards:
                    handler.string_value("NCAAFBBlockedFieldGoalReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsAverageReturn:
                    handler.string_value("NCAAFBBlockedFieldGoalReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsLongestReturn:
                    handler.string_value("NCAAFBBlockedFieldGoalReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns:
                    handler.string_value("NCAAFBBlockedFieldGoalReturns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsTotalYards:
                    handler.string_value("NCAAFBBlockedFieldGoalReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsTouchdowns:
                    handler.string_value("NCAAFBBlockedFieldGoalReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn10PlusYards:
                    handler.string_value("NCAAFBBlockedPuntReturn10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn20PlusYards:
                    handler.string_value("NCAAFBBlockedPuntReturn20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn30PlusYards:
                    handler.string_value("NCAAFBBlockedPuntReturn30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn40PlusYards:
                    handler.string_value("NCAAFBBlockedPuntReturn40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn50PlusYards:
                    handler.string_value("NCAAFBBlockedPuntReturn50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsAverageReturn:
                    handler.string_value("NCAAFBBlockedPuntReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsLongestReturn:
                    handler.string_value("NCAAFBBlockedPuntReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturns:
                    handler.string_value("NCAAFBBlockedPuntReturns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsTotalYards:
                    handler.string_value("NCAAFBBlockedPuntReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsTouchdowns:
                    handler.string_value("NCAAFBBlockedPuntReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsAttempted:
                    handler.string_value("NCAAFBExtraPointsAttempted");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsAttemptedKicking:
                    handler.string_value("NCAAFBExtraPointsAttemptedKicking");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsAttempted2PointConversion:
                    handler.string_value("NCAAFBExtraPointsAttempted2PointConversion");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsBlocked:
                    handler.string_value("NCAAFBExtraPointsBlocked");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsMade:
                    handler.string_value("NCAAFBExtraPointsMade");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsMadeKicking:
                    handler.string_value("NCAAFBExtraPointsMadeKicking");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsMade2PointConversion:
                    handler.string_value("NCAAFBExtraPointsMade2PointConversion");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsPerc:
                    handler.string_value("NCAAFBExtraPointsPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns10PlusYards:
                    handler.string_value("NCAAFBFieldGoalReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns20PlusYards:
                    handler.string_value("NCAAFBFieldGoalReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns30PlusYards:
                    handler.string_value("NCAAFBFieldGoalReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns40PlusYards:
                    handler.string_value("NCAAFBFieldGoalReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns50PlusYards:
                    handler.string_value("NCAAFBFieldGoalReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsAverageReturn:
                    handler.string_value("NCAAFBFieldGoalReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsLongestReturn:
                    handler.string_value("NCAAFBFieldGoalReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns:
                    handler.string_value("NCAAFBFieldGoalReturns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsTotalYards:
                    handler.string_value("NCAAFBFieldGoalReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsTouchdowns:
                    handler.string_value("NCAAFBFieldGoalReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted:
                    handler.string_value("NCAAFBFieldGoalsAttempted");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted1to19Yards:
                    handler.string_value("NCAAFBFieldGoalsAttempted1to19Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted20to29Yards:
                    handler.string_value("NCAAFBFieldGoalsAttempted20to29Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted30to39Yards:
                    handler.string_value("NCAAFBFieldGoalsAttempted30to39Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted40to49Yards:
                    handler.string_value("NCAAFBFieldGoalsAttempted40to49Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted50PlusYards:
                    handler.string_value("NCAAFBFieldGoalsAttempted50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsBlocked:
                    handler.string_value("NCAAFBFieldGoalsBlocked");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsLongestMade:
                    handler.string_value("NCAAFBFieldGoalsLongestMade");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade:
                    handler.string_value("NCAAFBFieldGoalsMade");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade1to19Yards:
                    handler.string_value("NCAAFBFieldGoalsMade1to19Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade20to29Yards:
                    handler.string_value("NCAAFBFieldGoalsMade20to29Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade30to39Yards:
                    handler.string_value("NCAAFBFieldGoalsMade30to39Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade40to49Yards:
                    handler.string_value("NCAAFBFieldGoalsMade40to49Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade50PlusYards:
                    handler.string_value("NCAAFBFieldGoalsMade50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsPerc:
                    handler.string_value("NCAAFBFieldGoalsPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturns10PlusYards:
                    handler.string_value("NCAAFBKickoffReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturns20PlusYards:
                    handler.string_value("NCAAFBKickoffReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturns30PlusYards:
                    handler.string_value("NCAAFBKickoffReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturns40PlusYards:
                    handler.string_value("NCAAFBKickoffReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturns50PlusYards:
                    handler.string_value("NCAAFBKickoffReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturnsAverageRun:
                    handler.string_value("NCAAFBKickoffReturnsAverageRun");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturnsFairCatches:
                    handler.string_value("NCAAFBKickoffReturnsFairCatches");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturnsLongestKickReturn:
                    handler.string_value("NCAAFBKickoffReturnsLongestKickReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturnsReturns:
                    handler.string_value("NCAAFBKickoffReturnsReturns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturnsTouchdowns:
                    handler.string_value("NCAAFBKickoffReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturnsYards:
                    handler.string_value("NCAAFBKickoffReturnsYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsAverageGrossYards:
                    handler.string_value("NCAAFBKickoffsAverageGrossYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsAverageNetYards:
                    handler.string_value("NCAAFBKickoffsAverageNetYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsAverageReturnYards:
                    handler.string_value("NCAAFBKickoffsAverageReturnYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsEndZoneKicks:
                    handler.string_value("NCAAFBKickoffsEndZoneKicks");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsGrossYards:
                    handler.string_value("NCAAFBKickoffsGrossYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsInsideOpponents20YardLine:
                    handler.string_value("NCAAFBKickoffsInsideOpponents20YardLine");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsKicks:
                    handler.string_value("NCAAFBKickoffsKicks");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsLongestKick:
                    handler.string_value("NCAAFBKickoffsLongestKick");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsNetYards:
                    handler.string_value("NCAAFBKickoffsNetYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsInsideOpponents20YardLinePerc:
                    handler.string_value("NCAAFBKickoffsInsideOpponents20YardLinePerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsTouchbacksPerc:
                    handler.string_value("NCAAFBKickoffsTouchbacksPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsReturned:
                    handler.string_value("NCAAFBKickoffsReturned");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsTotalReturnYards:
                    handler.string_value("NCAAFBKickoffsTotalReturnYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsTouchbacks:
                    handler.string_value("NCAAFBKickoffsTouchbacks");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturns10PlusYards:
                    handler.string_value("NCAAFBPuntReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturns20PlusYards:
                    handler.string_value("NCAAFBPuntReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturns30PlusYards:
                    handler.string_value("NCAAFBPuntReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturns40PlusYards:
                    handler.string_value("NCAAFBPuntReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturns50PlusYards:
                    handler.string_value("NCAAFBPuntReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturnsAverageRun:
                    handler.string_value("NCAAFBPuntReturnsAverageRun");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturnsFairCatches:
                    handler.string_value("NCAAFBPuntReturnsFairCatches");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturnsLongestKickReturn:
                    handler.string_value("NCAAFBPuntReturnsLongestKickReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturns:
                    handler.string_value("NCAAFBPuntReturns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturnsTouchdowns:
                    handler.string_value("NCAAFBPuntReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturnsYards:
                    handler.string_value("NCAAFBPuntReturnsYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingAverageGrossYards:
                    handler.string_value("NCAAFBPuntingAverageGrossYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingAverageNetYards:
                    handler.string_value("NCAAFBPuntingAverageNetYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingAverageReturnYards:
                    handler.string_value("NCAAFBPuntingAverageReturnYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingBlocked:
                    handler.string_value("NCAAFBPuntingBlocked");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingGrossYards:
                    handler.string_value("NCAAFBPuntingGrossYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingInsideOpponents20YardLine:
                    handler.string_value("NCAAFBPuntingInsideOpponents20YardLine");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingLongestPunt:
                    handler.string_value("NCAAFBPuntingLongestPunt");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingNetYards:
                    handler.string_value("NCAAFBPuntingNetYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingInsideOpponents20YardLinePerc:
                    handler.string_value("NCAAFBPuntingInsideOpponents20YardLinePerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingTouchbacksPerc:
                    handler.string_value("NCAAFBPuntingTouchbacksPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingPunts:
                    handler.string_value("NCAAFBPuntingPunts");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingReturnYards:
                    handler.string_value("NCAAFBPuntingReturnYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingReturned:
                    handler.string_value("NCAAFBPuntingReturned");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingTouchbacks:
                    handler.string_value("NCAAFBPuntingTouchbacks");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesForced:
                    handler.string_value("NCAAFBFumblesForced");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumbles:
                    handler.string_value("NCAAFBFumbles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesLost:
                    handler.string_value("NCAAFBFumblesLost");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesOpponentRecovery:
                    handler.string_value("NCAAFBFumblesOpponentRecovery");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesOpponentTouchdownsFromRecovery:
                    handler.string_value("NCAAFBFumblesOpponentTouchdownsFromRecovery");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesOutOfBounds:
                    handler.string_value("NCAAFBFumblesOutOfBounds");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesOwnRecovery:
                    handler.string_value("NCAAFBFumblesOwnRecovery");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesOwnTouchdownsFromRecovery:
                    handler.string_value("NCAAFBFumblesOwnTouchdownsFromRecovery");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesYardsFromOpponentRecovery:
                    handler.string_value("NCAAFBFumblesYardsFromOpponentRecovery");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesYardsFromOwnRecovery:
                    handler.string_value("NCAAFBFumblesYardsFromOwnRecovery");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPenalties1stDowns:
                    handler.string_value("NCAAFBPenalties1stDowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPenalties:
                    handler.string_value("NCAAFBPenalties");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPenaltiesYards:
                    handler.string_value("NCAAFBPenaltiesYards");
                    break;
                case TypeValueKnownValues.Value_NBAAssists:
                    handler.string_value("NBAAssists");
                    break;
                case TypeValueKnownValues.Value_NBAAssistsPerGame:
                    handler.string_value("NBAAssistsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAAssistsToTurnoverRatio:
                    handler.string_value("NBAAssistsToTurnoverRatio");
                    break;
                case TypeValueKnownValues.Value_NBABlockedAttempts:
                    handler.string_value("NBABlockedAttempts");
                    break;
                case TypeValueKnownValues.Value_NBABlockedAttemptsPerGame:
                    handler.string_value("NBABlockedAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBABlockedShots:
                    handler.string_value("NBABlockedShots");
                    break;
                case TypeValueKnownValues.Value_NBABlockedShotsPerGame:
                    handler.string_value("NBABlockedShotsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBACoachTechnicalFouls:
                    handler.string_value("NBACoachTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_NBADefensiveRebounds:
                    handler.string_value("NBADefensiveRebounds");
                    break;
                case TypeValueKnownValues.Value_NBADefensiveReboundsPerGame:
                    handler.string_value("NBADefensiveReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAEjections:
                    handler.string_value("NBAEjections");
                    break;
                case TypeValueKnownValues.Value_NBAFastBreakPoints:
                    handler.string_value("NBAFastBreakPoints");
                    break;
                case TypeValueKnownValues.Value_NBAFastBreakPointsPerGame:
                    handler.string_value("NBAFastBreakPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAFieldGoalAttempts:
                    handler.string_value("NBAFieldGoalAttempts");
                    break;
                case TypeValueKnownValues.Value_NBAFieldGoalAttemptsPerGame:
                    handler.string_value("NBAFieldGoalAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAFieldGoalPercentage:
                    handler.string_value("NBAFieldGoalPercentage");
                    break;
                case TypeValueKnownValues.Value_NBAFieldGoalsMade:
                    handler.string_value("NBAFieldGoalsMade");
                    break;
                case TypeValueKnownValues.Value_NBAFieldGoalsMadePerGame:
                    handler.string_value("NBAFieldGoalsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_NBAFlagrantFouls:
                    handler.string_value("NBAFlagrantFouls");
                    break;
                case TypeValueKnownValues.Value_NBAFlagrantFoulsPerGame:
                    handler.string_value("NBAFlagrantFoulsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAFreeThrowAttempts:
                    handler.string_value("NBAFreeThrowAttempts");
                    break;
                case TypeValueKnownValues.Value_NBAFreeThrowAttemptsPerGame:
                    handler.string_value("NBAFreeThrowAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAFreeThrowPercentage:
                    handler.string_value("NBAFreeThrowPercentage");
                    break;
                case TypeValueKnownValues.Value_NBAFreeThrowsMade:
                    handler.string_value("NBAFreeThrowsMade");
                    break;
                case TypeValueKnownValues.Value_NBAFreeThrowsMadePerGame:
                    handler.string_value("NBAFreeThrowsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_NBAGamesPlayed:
                    handler.string_value("NBAGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_NBAGamesStarted:
                    handler.string_value("NBAGamesStarted");
                    break;
                case TypeValueKnownValues.Value_NBAMinutesPlayed:
                    handler.string_value("NBAMinutesPlayed");
                    break;
                case TypeValueKnownValues.Value_NBAMinutesPlayedPerGame:
                    handler.string_value("NBAMinutesPlayedPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAOffensiveRebounds:
                    handler.string_value("NBAOffensiveRebounds");
                    break;
                case TypeValueKnownValues.Value_NBAOffensiveReboundsPerGame:
                    handler.string_value("NBAOffensiveReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAPersonalFouls:
                    handler.string_value("NBAPersonalFouls");
                    break;
                case TypeValueKnownValues.Value_NBAPersonalFoulsPerGame:
                    handler.string_value("NBAPersonalFoulsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAPoints:
                    handler.string_value("NBAPoints");
                    break;
                case TypeValueKnownValues.Value_NBAPointsPerGame:
                    handler.string_value("NBAPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAPointsInPaint:
                    handler.string_value("NBAPointsInPaint");
                    break;
                case TypeValueKnownValues.Value_NBAPointsInPaintPerGame:
                    handler.string_value("NBAPointsInPaintPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAPointsOffTurnovers:
                    handler.string_value("NBAPointsOffTurnovers");
                    break;
                case TypeValueKnownValues.Value_NBAPointsOffTurnoversPerGame:
                    handler.string_value("NBAPointsOffTurnoversPerGame");
                    break;
                case TypeValueKnownValues.Value_NBARebounds:
                    handler.string_value("NBARebounds");
                    break;
                case TypeValueKnownValues.Value_NBAReboundsPerGame:
                    handler.string_value("NBAReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBASecondChancePoints:
                    handler.string_value("NBASecondChancePoints");
                    break;
                case TypeValueKnownValues.Value_NBASecondChancePointsPerGame:
                    handler.string_value("NBASecondChancePointsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBASteals:
                    handler.string_value("NBASteals");
                    break;
                case TypeValueKnownValues.Value_NBAStealsPerGame:
                    handler.string_value("NBAStealsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBATeamTechnicalFouls:
                    handler.string_value("NBATeamTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_NBAPlayerTechnicalFouls:
                    handler.string_value("NBAPlayerTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_NBAThreePointAttempts:
                    handler.string_value("NBAThreePointAttempts");
                    break;
                case TypeValueKnownValues.Value_NBAThreePointAttemptsPerGame:
                    handler.string_value("NBAThreePointAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAThreePointPercentage:
                    handler.string_value("NBAThreePointPercentage");
                    break;
                case TypeValueKnownValues.Value_NBAThreePointsMade:
                    handler.string_value("NBAThreePointsMade");
                    break;
                case TypeValueKnownValues.Value_NBAThreePointsMadePerGame:
                    handler.string_value("NBAThreePointsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_NBATurnovers:
                    handler.string_value("NBATurnovers");
                    break;
                case TypeValueKnownValues.Value_NBATurnoversPerGame:
                    handler.string_value("NBATurnoversPerGame");
                    break;
                case TypeValueKnownValues.Value_NBATwoPointAttempts:
                    handler.string_value("NBATwoPointAttempts");
                    break;
                case TypeValueKnownValues.Value_NBATwoPointAttemptsPerGame:
                    handler.string_value("NBATwoPointAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBATwoPointPercentage:
                    handler.string_value("NBATwoPointPercentage");
                    break;
                case TypeValueKnownValues.Value_NBATwoPointsMade:
                    handler.string_value("NBATwoPointsMade");
                    break;
                case TypeValueKnownValues.Value_NBATwoPointsMadePerGame:
                    handler.string_value("NBATwoPointsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBAssists:
                    handler.string_value("NCAAMBAssists");
                    break;
                case TypeValueKnownValues.Value_NCAAMBAssistsPerGame:
                    handler.string_value("NCAAMBAssistsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBAssistsToTurnoverRatio:
                    handler.string_value("NCAAMBAssistsToTurnoverRatio");
                    break;
                case TypeValueKnownValues.Value_NCAAMBBlockedAttempts:
                    handler.string_value("NCAAMBBlockedAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAMBBlockedAttemptsPerGame:
                    handler.string_value("NCAAMBBlockedAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBBlockedShots:
                    handler.string_value("NCAAMBBlockedShots");
                    break;
                case TypeValueKnownValues.Value_NCAAMBBlockedShotsPerGame:
                    handler.string_value("NCAAMBBlockedShotsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBCoachTechnicalFouls:
                    handler.string_value("NCAAMBCoachTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_NCAAMBDefensiveRebounds:
                    handler.string_value("NCAAMBDefensiveRebounds");
                    break;
                case TypeValueKnownValues.Value_NCAAMBDefensiveReboundsPerGame:
                    handler.string_value("NCAAMBDefensiveReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBEjections:
                    handler.string_value("NCAAMBEjections");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFastBreakPoints:
                    handler.string_value("NCAAMBFastBreakPoints");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFastBreakPointsPerGame:
                    handler.string_value("NCAAMBFastBreakPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFieldGoalAttempts:
                    handler.string_value("NCAAMBFieldGoalAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFieldGoalAttemptsPerGame:
                    handler.string_value("NCAAMBFieldGoalAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFieldGoalPercentage:
                    handler.string_value("NCAAMBFieldGoalPercentage");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFieldGoalsMade:
                    handler.string_value("NCAAMBFieldGoalsMade");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFieldGoalsMadePerGame:
                    handler.string_value("NCAAMBFieldGoalsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFlagrantFouls:
                    handler.string_value("NCAAMBFlagrantFouls");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFlagrantFoulsPerGame:
                    handler.string_value("NCAAMBFlagrantFoulsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFreeThrowAttempts:
                    handler.string_value("NCAAMBFreeThrowAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFreeThrowAttemptsPerGame:
                    handler.string_value("NCAAMBFreeThrowAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFreeThrowPercentage:
                    handler.string_value("NCAAMBFreeThrowPercentage");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFreeThrowsMade:
                    handler.string_value("NCAAMBFreeThrowsMade");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFreeThrowsMadePerGame:
                    handler.string_value("NCAAMBFreeThrowsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBGamesPlayed:
                    handler.string_value("NCAAMBGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_NCAAMBGamesStarted:
                    handler.string_value("NCAAMBGamesStarted");
                    break;
                case TypeValueKnownValues.Value_NCAAMBMinutesPlayed:
                    handler.string_value("NCAAMBMinutesPlayed");
                    break;
                case TypeValueKnownValues.Value_NCAAMBMinutesPlayedPerGame:
                    handler.string_value("NCAAMBMinutesPlayedPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBOffensiveRebounds:
                    handler.string_value("NCAAMBOffensiveRebounds");
                    break;
                case TypeValueKnownValues.Value_NCAAMBOffensiveReboundsPerGame:
                    handler.string_value("NCAAMBOffensiveReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPersonalFouls:
                    handler.string_value("NCAAMBPersonalFouls");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPersonalFoulsPerGame:
                    handler.string_value("NCAAMBPersonalFoulsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPoints:
                    handler.string_value("NCAAMBPoints");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPointsPerGame:
                    handler.string_value("NCAAMBPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPointsInPaint:
                    handler.string_value("NCAAMBPointsInPaint");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPointsInPaintPerGame:
                    handler.string_value("NCAAMBPointsInPaintPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPointsOffTurnovers:
                    handler.string_value("NCAAMBPointsOffTurnovers");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPointsOffTurnoversPerGame:
                    handler.string_value("NCAAMBPointsOffTurnoversPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBRebounds:
                    handler.string_value("NCAAMBRebounds");
                    break;
                case TypeValueKnownValues.Value_NCAAMBReboundsPerGame:
                    handler.string_value("NCAAMBReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBSecondChancePoints:
                    handler.string_value("NCAAMBSecondChancePoints");
                    break;
                case TypeValueKnownValues.Value_NCAAMBSecondChancePointsPerGame:
                    handler.string_value("NCAAMBSecondChancePointsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBSteals:
                    handler.string_value("NCAAMBSteals");
                    break;
                case TypeValueKnownValues.Value_NCAAMBStealsPerGame:
                    handler.string_value("NCAAMBStealsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTeamTechnicalFouls:
                    handler.string_value("NCAAMBTeamTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPlayerTechnicalFouls:
                    handler.string_value("NCAAMBPlayerTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_NCAAMBThreePointAttempts:
                    handler.string_value("NCAAMBThreePointAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAMBThreePointAttemptsPerGame:
                    handler.string_value("NCAAMBThreePointAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBThreePointPercentage:
                    handler.string_value("NCAAMBThreePointPercentage");
                    break;
                case TypeValueKnownValues.Value_NCAAMBThreePointsMade:
                    handler.string_value("NCAAMBThreePointsMade");
                    break;
                case TypeValueKnownValues.Value_NCAAMBThreePointsMadePerGame:
                    handler.string_value("NCAAMBThreePointsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTurnovers:
                    handler.string_value("NCAAMBTurnovers");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTurnoversPerGame:
                    handler.string_value("NCAAMBTurnoversPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTwoPointAttempts:
                    handler.string_value("NCAAMBTwoPointAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTwoPointAttemptsPerGame:
                    handler.string_value("NCAAMBTwoPointAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTwoPointPercentage:
                    handler.string_value("NCAAMBTwoPointPercentage");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTwoPointsMade:
                    handler.string_value("NCAAMBTwoPointsMade");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTwoPointsMadePerGame:
                    handler.string_value("NCAAMBTwoPointsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_SoccerBallPossessions:
                    handler.string_value("SoccerBallPossessions");
                    break;
                case TypeValueKnownValues.Value_SoccerCardsGiven:
                    handler.string_value("SoccerCardsGiven");
                    break;
                case TypeValueKnownValues.Value_SoccerCornerKicks:
                    handler.string_value("SoccerCornerKicks");
                    break;
                case TypeValueKnownValues.Value_SoccerFreeKicks:
                    handler.string_value("SoccerFreeKicks");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalAttempts:
                    handler.string_value("SoccerGoalAttempts");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByFoot:
                    handler.string_value("SoccerGoalsByFoot");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByHeaders:
                    handler.string_value("SoccerGoalsByHeaders");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime00To15:
                    handler.string_value("SoccerGoalsByTime00To15");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime16To30:
                    handler.string_value("SoccerGoalsByTime16To30");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime31To45:
                    handler.string_value("SoccerGoalsByTime31To45");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime46To60:
                    handler.string_value("SoccerGoalsByTime46To60");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime61To75:
                    handler.string_value("SoccerGoalsByTime61To75");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime76To90:
                    handler.string_value("SoccerGoalsByTime76To90");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConceded:
                    handler.string_value("SoccerGoalsConceded");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime00To15:
                    handler.string_value("SoccerGoalsConcededByTime00To15");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime16To30:
                    handler.string_value("SoccerGoalsConcededByTime16To30");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime31To45:
                    handler.string_value("SoccerGoalsConcededByTime31To45");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime46To60:
                    handler.string_value("SoccerGoalsConcededByTime46To60");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime61To75:
                    handler.string_value("SoccerGoalsConcededByTime61To75");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime76To90:
                    handler.string_value("SoccerGoalsConcededByTime76To90");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsScored:
                    handler.string_value("SoccerGoalsScored");
                    break;
                case TypeValueKnownValues.Value_SoccerMatchesPlayed:
                    handler.string_value("SoccerMatchesPlayed");
                    break;
                case TypeValueKnownValues.Value_SoccerOffsides:
                    handler.string_value("SoccerOffsides");
                    break;
                case TypeValueKnownValues.Value_SoccerOwnGoals:
                    handler.string_value("SoccerOwnGoals");
                    break;
                case TypeValueKnownValues.Value_SoccerShotsBlocked:
                    handler.string_value("SoccerShotsBlocked");
                    break;
                case TypeValueKnownValues.Value_SoccerShotsOffGoal:
                    handler.string_value("SoccerShotsOffGoal");
                    break;
                case TypeValueKnownValues.Value_SoccerShotsOnGoal:
                    handler.string_value("SoccerShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_SoccerSubstitutedIn:
                    handler.string_value("SoccerSubstitutedIn");
                    break;
                case TypeValueKnownValues.Value_SoccerSubstitutedOut:
                    handler.string_value("SoccerSubstitutedOut");
                    break;
                default:
                    Debug.Assert(false);
                    break;
              }
          }
        else
          {
                    handler.string_value(storeValue.string_value);
          }
      }
    public override void write_partial_as_json(JSONHandler handler)
      {
        if (storeValue.in_known_list)
          {
            switch (storeValue.list_value)
              {
                case TypeValueKnownValues.Value_MLBBaserunningCaughtStealing:
                    handler.string_value("MLBBaserunningCaughtStealing");
                    break;
                case TypeValueKnownValues.Value_MLBBaserunningPickoffs:
                    handler.string_value("MLBBaserunningPickoffs");
                    break;
                case TypeValueKnownValues.Value_MLBBaserunningStolenBasePerc:
                    handler.string_value("MLBBaserunningStolenBasePerc");
                    break;
                case TypeValueKnownValues.Value_MLBBaserunningStolenBases:
                    handler.string_value("MLBBaserunningStolenBases");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingAssists:
                    handler.string_value("MLBFieldingAssists");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingCompleteGames:
                    handler.string_value("MLBFieldingCompleteGames");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingDoublePlays:
                    handler.string_value("MLBFieldingDoublePlays");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingErrors:
                    handler.string_value("MLBFieldingErrors");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingFieldingPercentage:
                    handler.string_value("MLBFieldingFieldingPercentage");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingGamesFinished:
                    handler.string_value("MLBFieldingGamesFinished");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingGamesPlayed:
                    handler.string_value("MLBFieldingGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingGamesStarted:
                    handler.string_value("MLBFieldingGamesStarted");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingPassedBalls:
                    handler.string_value("MLBFieldingPassedBalls");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingPutouts:
                    handler.string_value("MLBFieldingPutouts");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingRangeFactor:
                    handler.string_value("MLBFieldingRangeFactor");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingTotalChances:
                    handler.string_value("MLBFieldingTotalChances");
                    break;
                case TypeValueKnownValues.Value_MLBFieldingTriplePlays:
                    handler.string_value("MLBFieldingTriplePlays");
                    break;
                case TypeValueKnownValues.Value_MLBHittingAtBats:
                    handler.string_value("MLBHittingAtBats");
                    break;
                case TypeValueKnownValues.Value_MLBHittingAtBatsPerHomeRun:
                    handler.string_value("MLBHittingAtBatsPerHomeRun");
                    break;
                case TypeValueKnownValues.Value_MLBHittingAtBatsPerStrikeout:
                    handler.string_value("MLBHittingAtBatsPerStrikeout");
                    break;
                case TypeValueKnownValues.Value_MLBHittingAtBatsWithRunnersInScoringPosition:
                    handler.string_value("MLBHittingAtBatsWithRunnersInScoringPosition");
                    break;
                case TypeValueKnownValues.Value_MLBHittingBalls:
                    handler.string_value("MLBHittingBalls");
                    break;
                case TypeValueKnownValues.Value_MLBHittingBallsInPlay:
                    handler.string_value("MLBHittingBallsInPlay");
                    break;
                case TypeValueKnownValues.Value_MLBHittingBattingAverage:
                    handler.string_value("MLBHittingBattingAverage");
                    break;
                case TypeValueKnownValues.Value_MLBHittingBattingAverageOnBallsInPlay:
                    handler.string_value("MLBHittingBattingAverageOnBallsInPlay");
                    break;
                case TypeValueKnownValues.Value_MLBHittingCompleteGames:
                    handler.string_value("MLBHittingCompleteGames");
                    break;
                case TypeValueKnownValues.Value_MLBHittingCycles:
                    handler.string_value("MLBHittingCycles");
                    break;
                case TypeValueKnownValues.Value_MLBHittingDirtBallsFaced:
                    handler.string_value("MLBHittingDirtBallsFaced");
                    break;
                case TypeValueKnownValues.Value_MLBHittingDoubles:
                    handler.string_value("MLBHittingDoubles");
                    break;
                case TypeValueKnownValues.Value_MLBHittingEarnedRunsScored:
                    handler.string_value("MLBHittingEarnedRunsScored");
                    break;
                case TypeValueKnownValues.Value_MLBHittingExtraBaseHits:
                    handler.string_value("MLBHittingExtraBaseHits");
                    break;
                case TypeValueKnownValues.Value_MLBHittingFieldersChoice:
                    handler.string_value("MLBHittingFieldersChoice");
                    break;
                case TypeValueKnownValues.Value_MLBHittingFlyBalls:
                    handler.string_value("MLBHittingFlyBalls");
                    break;
                case TypeValueKnownValues.Value_MLBHittingFlyOuts:
                    handler.string_value("MLBHittingFlyOuts");
                    break;
                case TypeValueKnownValues.Value_MLBHittingFlyOutsIntoDoublePlays:
                    handler.string_value("MLBHittingFlyOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_MLBHittingFoulBalls:
                    handler.string_value("MLBHittingFoulBalls");
                    break;
                case TypeValueKnownValues.Value_MLBHittingGamesFinished:
                    handler.string_value("MLBHittingGamesFinished");
                    break;
                case TypeValueKnownValues.Value_MLBHittingGamesPlayed:
                    handler.string_value("MLBHittingGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_MLBHittingGamesStarted:
                    handler.string_value("MLBHittingGamesStarted");
                    break;
                case TypeValueKnownValues.Value_MLBHittingGroundBallToFlyBallRatio:
                    handler.string_value("MLBHittingGroundBallToFlyBallRatio");
                    break;
                case TypeValueKnownValues.Value_MLBHittingGroundBalls:
                    handler.string_value("MLBHittingGroundBalls");
                    break;
                case TypeValueKnownValues.Value_MLBHittingGroundOuts:
                    handler.string_value("MLBHittingGroundOuts");
                    break;
                case TypeValueKnownValues.Value_MLBHittingGroundedIntoDoublePlay:
                    handler.string_value("MLBHittingGroundedIntoDoublePlay");
                    break;
                case TypeValueKnownValues.Value_MLBHittingHitByPitch:
                    handler.string_value("MLBHittingHitByPitch");
                    break;
                case TypeValueKnownValues.Value_MLBHittingHits:
                    handler.string_value("MLBHittingHits");
                    break;
                case TypeValueKnownValues.Value_MLBHittingHitsWithRunnersInScoringPosition:
                    handler.string_value("MLBHittingHitsWithRunnersInScoringPosition");
                    break;
                case TypeValueKnownValues.Value_MLBHittingHomeRuns:
                    handler.string_value("MLBHittingHomeRuns");
                    break;
                case TypeValueKnownValues.Value_MLBHittingIntentionalBalls:
                    handler.string_value("MLBHittingIntentionalBalls");
                    break;
                case TypeValueKnownValues.Value_MLBHittingIntentionalWalks:
                    handler.string_value("MLBHittingIntentionalWalks");
                    break;
                case TypeValueKnownValues.Value_MLBHittingIsolatedPower:
                    handler.string_value("MLBHittingIsolatedPower");
                    break;
                case TypeValueKnownValues.Value_MLBHittingLineDrives:
                    handler.string_value("MLBHittingLineDrives");
                    break;
                case TypeValueKnownValues.Value_MLBHittingLineOuts:
                    handler.string_value("MLBHittingLineOuts");
                    break;
                case TypeValueKnownValues.Value_MLBHittingLineOutsIntoDoublePlay:
                    handler.string_value("MLBHittingLineOutsIntoDoublePlay");
                    break;
                case TypeValueKnownValues.Value_MLBHittingOnBasePlusSluggingPerc:
                    handler.string_value("MLBHittingOnBasePlusSluggingPerc");
                    break;
                case TypeValueKnownValues.Value_MLBHittingOnBasePerc:
                    handler.string_value("MLBHittingOnBasePerc");
                    break;
                case TypeValueKnownValues.Value_MLBHittingPitchesFaced:
                    handler.string_value("MLBHittingPitchesFaced");
                    break;
                case TypeValueKnownValues.Value_MLBHittingPlateAppearances:
                    handler.string_value("MLBHittingPlateAppearances");
                    break;
                case TypeValueKnownValues.Value_MLBHittingPopOuts:
                    handler.string_value("MLBHittingPopOuts");
                    break;
                case TypeValueKnownValues.Value_MLBHittingPopUps:
                    handler.string_value("MLBHittingPopUps");
                    break;
                case TypeValueKnownValues.Value_MLBHittingReachedOnError:
                    handler.string_value("MLBHittingReachedOnError");
                    break;
                case TypeValueKnownValues.Value_MLBHittingRunnersLeftOnBase:
                    handler.string_value("MLBHittingRunnersLeftOnBase");
                    break;
                case TypeValueKnownValues.Value_MLBHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition:
                    handler.string_value("MLBHittingRunnersLeftOnBaseTwoOutsRunnersInScoringPosition");
                    break;
                case TypeValueKnownValues.Value_MLBHittingRunsBattedIn:
                    handler.string_value("MLBHittingRunsBattedIn");
                    break;
                case TypeValueKnownValues.Value_MLBHittingRunsBattedInWithTwoOuts:
                    handler.string_value("MLBHittingRunsBattedInWithTwoOuts");
                    break;
                case TypeValueKnownValues.Value_MLBHittingSacrificeFlys:
                    handler.string_value("MLBHittingSacrificeFlys");
                    break;
                case TypeValueKnownValues.Value_MLBHittingSacrificeHits:
                    handler.string_value("MLBHittingSacrificeHits");
                    break;
                case TypeValueKnownValues.Value_MLBHittingSecondaryAverage:
                    handler.string_value("MLBHittingSecondaryAverage");
                    break;
                case TypeValueKnownValues.Value_MLBHittingSingles:
                    handler.string_value("MLBHittingSingles");
                    break;
                case TypeValueKnownValues.Value_MLBHittingSluggingPerc:
                    handler.string_value("MLBHittingSluggingPerc");
                    break;
                case TypeValueKnownValues.Value_MLBHittingStrikeoutsLooking:
                    handler.string_value("MLBHittingStrikeoutsLooking");
                    break;
                case TypeValueKnownValues.Value_MLBHittingStrikeoutsSwinging:
                    handler.string_value("MLBHittingStrikeoutsSwinging");
                    break;
                case TypeValueKnownValues.Value_MLBHittingStrikesLooking:
                    handler.string_value("MLBHittingStrikesLooking");
                    break;
                case TypeValueKnownValues.Value_MLBHittingStrikesSwinging:
                    handler.string_value("MLBHittingStrikesSwinging");
                    break;
                case TypeValueKnownValues.Value_MLBHittingTotalBases:
                    handler.string_value("MLBHittingTotalBases");
                    break;
                case TypeValueKnownValues.Value_MLBHittingTotalRunsScored:
                    handler.string_value("MLBHittingTotalRunsScored");
                    break;
                case TypeValueKnownValues.Value_MLBHittingTotalStrikeouts:
                    handler.string_value("MLBHittingTotalStrikeouts");
                    break;
                case TypeValueKnownValues.Value_MLBHittingTotalStrikes:
                    handler.string_value("MLBHittingTotalStrikes");
                    break;
                case TypeValueKnownValues.Value_MLBHittingTriples:
                    handler.string_value("MLBHittingTriples");
                    break;
                case TypeValueKnownValues.Value_MLBHittingUnearnedRunsScored:
                    handler.string_value("MLBHittingUnearnedRunsScored");
                    break;
                case TypeValueKnownValues.Value_MLBHittingWalks:
                    handler.string_value("MLBHittingWalks");
                    break;
                case TypeValueKnownValues.Value_MLBHittingWalksPerPlaceAppearance:
                    handler.string_value("MLBHittingWalksPerPlaceAppearance");
                    break;
                case TypeValueKnownValues.Value_MLBHittingWalksPerStrikeout:
                    handler.string_value("MLBHittingWalksPerStrikeout");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingBalks:
                    handler.string_value("MLBPitchingBalks");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingBalls:
                    handler.string_value("MLBPitchingBalls");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingBattersFaced:
                    handler.string_value("MLBPitchingBattersFaced");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingBlownSaves:
                    handler.string_value("MLBPitchingBlownSaves");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingCompleteGames:
                    handler.string_value("MLBPitchingCompleteGames");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingDirtBallsThrown:
                    handler.string_value("MLBPitchingDirtBallsThrown");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingDoublesAllowed:
                    handler.string_value("MLBPitchingDoublesAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingEarnedRunAverage:
                    handler.string_value("MLBPitchingEarnedRunAverage");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingEarnedRunsAllowed:
                    handler.string_value("MLBPitchingEarnedRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingErrors:
                    handler.string_value("MLBPitchingErrors");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingFieldersChoice:
                    handler.string_value("MLBPitchingFieldersChoice");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingFlyOuts:
                    handler.string_value("MLBPitchingFlyOuts");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingFlyOutsIntoDoublePlays:
                    handler.string_value("MLBPitchingFlyOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingFoulBalls:
                    handler.string_value("MLBPitchingFoulBalls");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingGamesFinished:
                    handler.string_value("MLBPitchingGamesFinished");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingGamesPlayed:
                    handler.string_value("MLBPitchingGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingGamesStarted:
                    handler.string_value("MLBPitchingGamesStarted");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingGroundBallToFlyBallRatio:
                    handler.string_value("MLBPitchingGroundBallToFlyBallRatio");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingGroundOuts:
                    handler.string_value("MLBPitchingGroundOuts");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingGroundOutsIntoDoublePlays:
                    handler.string_value("MLBPitchingGroundOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingHitBatters:
                    handler.string_value("MLBPitchingHitBatters");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingHitsAllowed:
                    handler.string_value("MLBPitchingHitsAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingHolds:
                    handler.string_value("MLBPitchingHolds");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingHomeRunsAllowed:
                    handler.string_value("MLBPitchingHomeRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingInningsPitchedCompletePartial:
                    handler.string_value("MLBPitchingInningsPitchedCompletePartial");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingInningsPitchedTotalOuts:
                    handler.string_value("MLBPitchingInningsPitchedTotalOuts");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingIntentionalBalls:
                    handler.string_value("MLBPitchingIntentionalBalls");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingIntentionalWalks:
                    handler.string_value("MLBPitchingIntentionalWalks");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingLineOuts:
                    handler.string_value("MLBPitchingLineOuts");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingLineOutsIntoDoublePlays:
                    handler.string_value("MLBPitchingLineOutsIntoDoublePlays");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingLosses:
                    handler.string_value("MLBPitchingLosses");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingOpponentsBattingAverage:
                    handler.string_value("MLBPitchingOpponentsBattingAverage");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingOpponentRunnersLeftOnBase:
                    handler.string_value("MLBPitchingOpponentRunnersLeftOnBase");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingPickoffs:
                    handler.string_value("MLBPitchingPickoffs");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingPitchCount:
                    handler.string_value("MLBPitchingPitchCount");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingPopOutsForced:
                    handler.string_value("MLBPitchingPopOutsForced");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingQualityStarts:
                    handler.string_value("MLBPitchingQualityStarts");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingReachedOnError:
                    handler.string_value("MLBPitchingReachedOnError");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingRunnersCaughtStealing:
                    handler.string_value("MLBPitchingRunnersCaughtStealing");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingSacrificeFlys:
                    handler.string_value("MLBPitchingSacrificeFlys");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingSacrificeHits:
                    handler.string_value("MLBPitchingSacrificeHits");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingSaveOpportunities:
                    handler.string_value("MLBPitchingSaveOpportunities");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingSaves:
                    handler.string_value("MLBPitchingSaves");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingShutouts:
                    handler.string_value("MLBPitchingShutouts");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingSinglesAllowed:
                    handler.string_value("MLBPitchingSinglesAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingStolenBasesAllowed:
                    handler.string_value("MLBPitchingStolenBasesAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingStrikeoutsLooking:
                    handler.string_value("MLBPitchingStrikeoutsLooking");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingStrikeoutsPer9Innings:
                    handler.string_value("MLBPitchingStrikeoutsPer9Innings");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingStrikeoutsPerWalk:
                    handler.string_value("MLBPitchingStrikeoutsPerWalk");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingStrikeoutsSwinging:
                    handler.string_value("MLBPitchingStrikeoutsSwinging");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingStrikesLooking:
                    handler.string_value("MLBPitchingStrikesLooking");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingStrikesSwinging:
                    handler.string_value("MLBPitchingStrikesSwinging");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingTotalBasesAllowed:
                    handler.string_value("MLBPitchingTotalBasesAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingTotalRunsAllowed:
                    handler.string_value("MLBPitchingTotalRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingTotalStrikeouts:
                    handler.string_value("MLBPitchingTotalStrikeouts");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingTotalStrikes:
                    handler.string_value("MLBPitchingTotalStrikes");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingTriplesAllowed:
                    handler.string_value("MLBPitchingTriplesAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingUnearnedRunsAllowed:
                    handler.string_value("MLBPitchingUnearnedRunsAllowed");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingWalks:
                    handler.string_value("MLBPitchingWalks");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingWalksPlusHitsPerInningPitched:
                    handler.string_value("MLBPitchingWalksPlusHitsPerInningPitched");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingWildPitches:
                    handler.string_value("MLBPitchingWildPitches");
                    break;
                case TypeValueKnownValues.Value_MLBPitchingWins:
                    handler.string_value("MLBPitchingWins");
                    break;
                case TypeValueKnownValues.Value_NHLAssists:
                    handler.string_value("NHLAssists");
                    break;
                case TypeValueKnownValues.Value_NHLAssistsPerGame:
                    handler.string_value("NHLAssistsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLAverageTimeOnIce:
                    handler.string_value("NHLAverageTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_NHLBlockedAttempts:
                    handler.string_value("NHLBlockedAttempts");
                    break;
                case TypeValueKnownValues.Value_NHLBlockedAttemptsPerGame:
                    handler.string_value("NHLBlockedAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLBlockedShots:
                    handler.string_value("NHLBlockedShots");
                    break;
                case TypeValueKnownValues.Value_NHLBlockedShotsPerGame:
                    handler.string_value("NHLBlockedShotsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthAssists:
                    handler.string_value("NHLEvenStrengthAssists");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthFaceoffWinPerc:
                    handler.string_value("NHLEvenStrengthFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthFaceoffs:
                    handler.string_value("NHLEvenStrengthFaceoffs");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthFaceoffsLost:
                    handler.string_value("NHLEvenStrengthFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthFaceoffsWon:
                    handler.string_value("NHLEvenStrengthFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthGoals:
                    handler.string_value("NHLEvenStrengthGoals");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthMissedShots:
                    handler.string_value("NHLEvenStrengthMissedShots");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthShotsOnGoal:
                    handler.string_value("NHLEvenStrengthShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_NHLEvenStrengthTimeOnIce:
                    handler.string_value("NHLEvenStrengthTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_NHLFaceoffWinPerc:
                    handler.string_value("NHLFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_NHLFaceoffs:
                    handler.string_value("NHLFaceoffs");
                    break;
                case TypeValueKnownValues.Value_NHLFaceoffsWon:
                    handler.string_value("NHLFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_NHLFaceoffsLost:
                    handler.string_value("NHLFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_NHLGameWinningGoalFlag:
                    handler.string_value("NHLGameWinningGoalFlag");
                    break;
                case TypeValueKnownValues.Value_NHLGameWinningGoals:
                    handler.string_value("NHLGameWinningGoals");
                    break;
                case TypeValueKnownValues.Value_NHLGamesPlayed:
                    handler.string_value("NHLGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_NHLGiveaways:
                    handler.string_value("NHLGiveaways");
                    break;
                case TypeValueKnownValues.Value_NHLGiveawaysPerGame:
                    handler.string_value("NHLGiveawaysPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLGoals:
                    handler.string_value("NHLGoals");
                    break;
                case TypeValueKnownValues.Value_NHLGoalsPerGame:
                    handler.string_value("NHLGoalsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLHits:
                    handler.string_value("NHLHits");
                    break;
                case TypeValueKnownValues.Value_NHLHitsPerGame:
                    handler.string_value("NHLHitsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLMissedShots:
                    handler.string_value("NHLMissedShots");
                    break;
                case TypeValueKnownValues.Value_NHLMissedShotsPerGame:
                    handler.string_value("NHLMissedShotsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLPenalties:
                    handler.string_value("NHLPenalties");
                    break;
                case TypeValueKnownValues.Value_NHLPenaltiesPerGame:
                    handler.string_value("NHLPenaltiesPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLPenaltyGoals:
                    handler.string_value("NHLPenaltyGoals");
                    break;
                case TypeValueKnownValues.Value_NHLPenaltyMinutes:
                    handler.string_value("NHLPenaltyMinutes");
                    break;
                case TypeValueKnownValues.Value_NHLPenaltyMinutesPerGame:
                    handler.string_value("NHLPenaltyMinutesPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLPenaltyMissedShots:
                    handler.string_value("NHLPenaltyMissedShots");
                    break;
                case TypeValueKnownValues.Value_NHLPenaltyShotsOnGoal:
                    handler.string_value("NHLPenaltyShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_NHLPlusMinus:
                    handler.string_value("NHLPlusMinus");
                    break;
                case TypeValueKnownValues.Value_NHLPoints:
                    handler.string_value("NHLPoints");
                    break;
                case TypeValueKnownValues.Value_NHLPointsPerGame:
                    handler.string_value("NHLPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayAssists:
                    handler.string_value("NHLPowerPlayAssists");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayFaceoffWinPerc:
                    handler.string_value("NHLPowerPlayFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayFaceoffs:
                    handler.string_value("NHLPowerPlayFaceoffs");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayFaceoffsLost:
                    handler.string_value("NHLPowerPlayFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayFaceoffsWon:
                    handler.string_value("NHLPowerPlayFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayGoals:
                    handler.string_value("NHLPowerPlayGoals");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayMissedShots:
                    handler.string_value("NHLPowerPlayMissedShots");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayOpportunities:
                    handler.string_value("NHLPowerPlayOpportunities");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayPoints:
                    handler.string_value("NHLPowerPlayPoints");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayShotsOnGoal:
                    handler.string_value("NHLPowerPlayShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_NHLPowerPlayTimeOnIce:
                    handler.string_value("NHLPowerPlayTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_NHLScratches:
                    handler.string_value("NHLScratches");
                    break;
                case TypeValueKnownValues.Value_NHLShifts:
                    handler.string_value("NHLShifts");
                    break;
                case TypeValueKnownValues.Value_NHLShiftsPerGame:
                    handler.string_value("NHLShiftsPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLShootingPerc:
                    handler.string_value("NHLShootingPerc");
                    break;
                case TypeValueKnownValues.Value_NHLShootoutGoals:
                    handler.string_value("NHLShootoutGoals");
                    break;
                case TypeValueKnownValues.Value_NHLShootoutMissedShots:
                    handler.string_value("NHLShootoutMissedShots");
                    break;
                case TypeValueKnownValues.Value_NHLShootoutShotsOnGoal:
                    handler.string_value("NHLShootoutShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedAssists:
                    handler.string_value("NHLShortHandedAssists");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedFaceoffWinPerc:
                    handler.string_value("NHLShortHandedFaceoffWinPerc");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedFaceoffs:
                    handler.string_value("NHLShortHandedFaceoffs");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedFaceoffsLost:
                    handler.string_value("NHLShortHandedFaceoffsLost");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedFaceoffsWon:
                    handler.string_value("NHLShortHandedFaceoffsWon");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedGoals:
                    handler.string_value("NHLShortHandedGoals");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedMissedShots:
                    handler.string_value("NHLShortHandedMissedShots");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedPoints:
                    handler.string_value("NHLShortHandedPoints");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedShotsOnGoal:
                    handler.string_value("NHLShortHandedShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_NHLShortHandedTimeOnIce:
                    handler.string_value("NHLShortHandedTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_NHLShotsOnGoal:
                    handler.string_value("NHLShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_NHLShotsOnGoalPerGame:
                    handler.string_value("NHLShotsOnGoalPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLTakeaways:
                    handler.string_value("NHLTakeaways");
                    break;
                case TypeValueKnownValues.Value_NHLTakeawaysPerGame:
                    handler.string_value("NHLTakeawaysPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLTeamPenalties:
                    handler.string_value("NHLTeamPenalties");
                    break;
                case TypeValueKnownValues.Value_NHLTeamPenaltiesPerGame:
                    handler.string_value("NHLTeamPenaltiesPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLTeamPenaltyMinutes:
                    handler.string_value("NHLTeamPenaltyMinutes");
                    break;
                case TypeValueKnownValues.Value_NHLTeamPenaltyMinutesPerGame:
                    handler.string_value("NHLTeamPenaltyMinutesPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLTotalTimeOnIce:
                    handler.string_value("NHLTotalTimeOnIce");
                    break;
                case TypeValueKnownValues.Value_NHLTotalTimeOnIcePerGame:
                    handler.string_value("NHLTotalTimeOnIcePerGame");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEmptyNetEvenStrengthGoalsAgainst:
                    handler.string_value("NHLGoaltendingEmptyNetEvenStrengthGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEmptyNetGoalsAgainst:
                    handler.string_value("NHLGoaltendingEmptyNetGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEmptyNetPowerPlayGoalsAgainst:
                    handler.string_value("NHLGoaltendingEmptyNetPowerPlayGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEmptyNetShortHandedGoalsAgainst:
                    handler.string_value("NHLGoaltendingEmptyNetShortHandedGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEmptyNetShotsAgainst:
                    handler.string_value("NHLGoaltendingEmptyNetShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthGoalsAgainst:
                    handler.string_value("NHLGoaltendingEvenStrengthGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthSavePerc:
                    handler.string_value("NHLGoaltendingEvenStrengthSavePerc");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthSaves:
                    handler.string_value("NHLGoaltendingEvenStrengthSaves");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingEvenStrengthShotsAgainst:
                    handler.string_value("NHLGoaltendingEvenStrengthShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingGoalsAgainst:
                    handler.string_value("NHLGoaltendingGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingGoalsAgainstAverage:
                    handler.string_value("NHLGoaltendingGoalsAgainstAverage");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingGoalsAgainstPerGame:
                    handler.string_value("NHLGoaltendingGoalsAgainstPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingLosses:
                    handler.string_value("NHLGoaltendingLosses");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingOutcome:
                    handler.string_value("NHLGoaltendingOutcome");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingOvertimeLosses:
                    handler.string_value("NHLGoaltendingOvertimeLosses");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPenaltyGoalsAgainst:
                    handler.string_value("NHLGoaltendingPenaltyGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPenaltySavePerc:
                    handler.string_value("NHLGoaltendingPenaltySavePerc");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPenaltySaves:
                    handler.string_value("NHLGoaltendingPenaltySaves");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPenaltyShotsAgainst:
                    handler.string_value("NHLGoaltendingPenaltyShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPowerPlayGoalsAgainst:
                    handler.string_value("NHLGoaltendingPowerPlayGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPowerPlaySavePerc:
                    handler.string_value("NHLGoaltendingPowerPlaySavePerc");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPowerPlaySaves:
                    handler.string_value("NHLGoaltendingPowerPlaySaves");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingPowerPlayShotsAgainst:
                    handler.string_value("NHLGoaltendingPowerPlayShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingSavePerc:
                    handler.string_value("NHLGoaltendingSavePerc");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingSaves:
                    handler.string_value("NHLGoaltendingSaves");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShootoutGoalsAgainst:
                    handler.string_value("NHLGoaltendingShootoutGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShootoutSavePerc:
                    handler.string_value("NHLGoaltendingShootoutSavePerc");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShootoutSaves:
                    handler.string_value("NHLGoaltendingShootoutSaves");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShootoutShotsAgainst:
                    handler.string_value("NHLGoaltendingShootoutShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShortHandedGoalsAgainst:
                    handler.string_value("NHLGoaltendingShortHandedGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShortHandedSavePerc:
                    handler.string_value("NHLGoaltendingShortHandedSavePerc");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShortHandedSaves:
                    handler.string_value("NHLGoaltendingShortHandedSaves");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShortHandedShotsAgainst:
                    handler.string_value("NHLGoaltendingShortHandedShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShotsAgainst:
                    handler.string_value("NHLGoaltendingShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShotsAgainstPerGame:
                    handler.string_value("NHLGoaltendingShotsAgainstPerGame");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShutoutFlag:
                    handler.string_value("NHLGoaltendingShutoutFlag");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingShutouts:
                    handler.string_value("NHLGoaltendingShutouts");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingTotalGoalsAgainst:
                    handler.string_value("NHLGoaltendingTotalGoalsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingTotalShotsAgainst:
                    handler.string_value("NHLGoaltendingTotalShotsAgainst");
                    break;
                case TypeValueKnownValues.Value_NHLGoaltendingWins:
                    handler.string_value("NHLGoaltendingWins");
                    break;
                case TypeValueKnownValues.Value_NFL3rdDownConversionAttempts:
                    handler.string_value("NFL3rdDownConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_NFL3rdDownConversions:
                    handler.string_value("NFL3rdDownConversions");
                    break;
                case TypeValueKnownValues.Value_NFL3rdDownConversionPerc:
                    handler.string_value("NFL3rdDownConversionPerc");
                    break;
                case TypeValueKnownValues.Value_NFL3rdDownConversionsViaPass:
                    handler.string_value("NFL3rdDownConversionsViaPass");
                    break;
                case TypeValueKnownValues.Value_NFL3rdDownConversionsViaPenalty:
                    handler.string_value("NFL3rdDownConversionsViaPenalty");
                    break;
                case TypeValueKnownValues.Value_NFL3rdDownConversionsViaRush:
                    handler.string_value("NFL3rdDownConversionsViaRush");
                    break;
                case TypeValueKnownValues.Value_NFL4thDownConversionAttempts:
                    handler.string_value("NFL4thDownConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_NFL4thDownConversions:
                    handler.string_value("NFL4thDownConversions");
                    break;
                case TypeValueKnownValues.Value_NFL4thDownConversionPerc:
                    handler.string_value("NFL4thDownConversionPerc");
                    break;
                case TypeValueKnownValues.Value_NFL4thDownConversionsViaPass:
                    handler.string_value("NFL4thDownConversionsViaPass");
                    break;
                case TypeValueKnownValues.Value_NFL4thDownConversionsViaPenalty:
                    handler.string_value("NFL4thDownConversionsViaPenalty");
                    break;
                case TypeValueKnownValues.Value_NFL4thDownConversionsViaRush:
                    handler.string_value("NFL4thDownConversionsViaRush");
                    break;
                case TypeValueKnownValues.Value_NFLGamesPlayed:
                    handler.string_value("NFLGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_NFLGamesStarted:
                    handler.string_value("NFLGamesStarted");
                    break;
                case TypeValueKnownValues.Value_NFLGoalEfficiencyAttempts:
                    handler.string_value("NFLGoalEfficiencyAttempts");
                    break;
                case TypeValueKnownValues.Value_NFLGoalEfficiencyPerc:
                    handler.string_value("NFLGoalEfficiencyPerc");
                    break;
                case TypeValueKnownValues.Value_NFLGoalEfficiencyTouchdowns:
                    handler.string_value("NFLGoalEfficiencyTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLPassing10PlusYards:
                    handler.string_value("NFLPassing10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassing20PlusYards:
                    handler.string_value("NFLPassing20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassing30PlusYards:
                    handler.string_value("NFLPassing30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassing40PlusYards:
                    handler.string_value("NFLPassing40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassing50PlusYards:
                    handler.string_value("NFLPassing50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassingAttempts:
                    handler.string_value("NFLPassingAttempts");
                    break;
                case TypeValueKnownValues.Value_NFLPassingAverageYardsPerCompletion:
                    handler.string_value("NFLPassingAverageYardsPerCompletion");
                    break;
                case TypeValueKnownValues.Value_NFLPassingAverageYardsPerAttempt:
                    handler.string_value("NFLPassingAverageYardsPerAttempt");
                    break;
                case TypeValueKnownValues.Value_NFLPassingCompletionPerc:
                    handler.string_value("NFLPassingCompletionPerc");
                    break;
                case TypeValueKnownValues.Value_NFLPassingCompletions:
                    handler.string_value("NFLPassingCompletions");
                    break;
                case TypeValueKnownValues.Value_NFLPassing1stDowns:
                    handler.string_value("NFLPassing1stDowns");
                    break;
                case TypeValueKnownValues.Value_NFLPassingGrossYards:
                    handler.string_value("NFLPassingGrossYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassingInterceptionPerc:
                    handler.string_value("NFLPassingInterceptionPerc");
                    break;
                case TypeValueKnownValues.Value_NFLPassingInterceptions:
                    handler.string_value("NFLPassingInterceptions");
                    break;
                case TypeValueKnownValues.Value_NFLPassingInterceptionsReturnedForTouchdown:
                    handler.string_value("NFLPassingInterceptionsReturnedForTouchdown");
                    break;
                case TypeValueKnownValues.Value_NFLPassingLongestPass:
                    handler.string_value("NFLPassingLongestPass");
                    break;
                case TypeValueKnownValues.Value_NFLPassingNetYards:
                    handler.string_value("NFLPassingNetYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassingRating:
                    handler.string_value("NFLPassingRating");
                    break;
                case TypeValueKnownValues.Value_NFLPassingRedZoneAttempts:
                    handler.string_value("NFLPassingRedZoneAttempts");
                    break;
                case TypeValueKnownValues.Value_NFLPassingSacked:
                    handler.string_value("NFLPassingSacked");
                    break;
                case TypeValueKnownValues.Value_NFLPassingSackedYardsLost:
                    handler.string_value("NFLPassingSackedYardsLost");
                    break;
                case TypeValueKnownValues.Value_NFLPassingTackledForSafety:
                    handler.string_value("NFLPassingTackledForSafety");
                    break;
                case TypeValueKnownValues.Value_NFLPassingTotalYards:
                    handler.string_value("NFLPassingTotalYards");
                    break;
                case TypeValueKnownValues.Value_NFLPassingTouchdownPerc:
                    handler.string_value("NFLPassingTouchdownPerc");
                    break;
                case TypeValueKnownValues.Value_NFLPassingTouchdowns:
                    handler.string_value("NFLPassingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLReceiving10PlusYards:
                    handler.string_value("NFLReceiving10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLReceiving20PlusYards:
                    handler.string_value("NFLReceiving20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLReceiving30PlusYards:
                    handler.string_value("NFLReceiving30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLReceiving40PlusYards:
                    handler.string_value("NFLReceiving40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLReceiving50PlusYards:
                    handler.string_value("NFLReceiving50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingAverageReception:
                    handler.string_value("NFLReceivingAverageReception");
                    break;
                case TypeValueKnownValues.Value_NFLReceiving1stDowns:
                    handler.string_value("NFLReceiving1stDowns");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingFumbledOnReception:
                    handler.string_value("NFLReceivingFumbledOnReception");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingLongestReception:
                    handler.string_value("NFLReceivingLongestReception");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingReceptions:
                    handler.string_value("NFLReceivingReceptions");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingRedZoneTargets:
                    handler.string_value("NFLReceivingRedZoneTargets");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingTargets:
                    handler.string_value("NFLReceivingTargets");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingTotalYards:
                    handler.string_value("NFLReceivingTotalYards");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingTouchdowns:
                    handler.string_value("NFLReceivingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLReceivingYardsAfterCompletion:
                    handler.string_value("NFLReceivingYardsAfterCompletion");
                    break;
                case TypeValueKnownValues.Value_NFLRedZoneEfficiencyAttempts:
                    handler.string_value("NFLRedZoneEfficiencyAttempts");
                    break;
                case TypeValueKnownValues.Value_NFLRedZoneEfficiencyConversions:
                    handler.string_value("NFLRedZoneEfficiencyConversions");
                    break;
                case TypeValueKnownValues.Value_NFLRedZoneEfficiencyPerc:
                    handler.string_value("NFLRedZoneEfficiencyPerc");
                    break;
                case TypeValueKnownValues.Value_NFLRushing10PlusYards:
                    handler.string_value("NFLRushing10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLRushing20PlusYards:
                    handler.string_value("NFLRushing20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLRushing30PlusYards:
                    handler.string_value("NFLRushing30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLRushing40PlusYards:
                    handler.string_value("NFLRushing40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLRushing50PlusYards:
                    handler.string_value("NFLRushing50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLRushingAttempts:
                    handler.string_value("NFLRushingAttempts");
                    break;
                case TypeValueKnownValues.Value_NFLRushingAverageRush:
                    handler.string_value("NFLRushingAverageRush");
                    break;
                case TypeValueKnownValues.Value_NFLRushing1stDownPerc:
                    handler.string_value("NFLRushing1stDownPerc");
                    break;
                case TypeValueKnownValues.Value_NFLRushing1stDowns:
                    handler.string_value("NFLRushing1stDowns");
                    break;
                case TypeValueKnownValues.Value_NFLRushingFumbledOnRush:
                    handler.string_value("NFLRushingFumbledOnRush");
                    break;
                case TypeValueKnownValues.Value_NFLRushingLongestRush:
                    handler.string_value("NFLRushingLongestRush");
                    break;
                case TypeValueKnownValues.Value_NFLRushingRedZoneAttempts:
                    handler.string_value("NFLRushingRedZoneAttempts");
                    break;
                case TypeValueKnownValues.Value_NFLRushingTackledForSafety:
                    handler.string_value("NFLRushingTackledForSafety");
                    break;
                case TypeValueKnownValues.Value_NFLRushingTotalYards:
                    handler.string_value("NFLRushingTotalYards");
                    break;
                case TypeValueKnownValues.Value_NFLRushingTouchdowns:
                    handler.string_value("NFLRushingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFL1stDowns:
                    handler.string_value("NFL1stDowns");
                    break;
                case TypeValueKnownValues.Value_NFL2PointConversionsAttempted:
                    handler.string_value("NFL2PointConversionsAttempted");
                    break;
                case TypeValueKnownValues.Value_NFL2PointConversionsFailed:
                    handler.string_value("NFL2PointConversionsFailed");
                    break;
                case TypeValueKnownValues.Value_NFL2PointConversionsMade:
                    handler.string_value("NFL2PointConversionsMade");
                    break;
                case TypeValueKnownValues.Value_NFL2PointConversionsPassing:
                    handler.string_value("NFL2PointConversionsPassing");
                    break;
                case TypeValueKnownValues.Value_NFL2PointConversionsReceiving:
                    handler.string_value("NFL2PointConversionsReceiving");
                    break;
                case TypeValueKnownValues.Value_NFL2PointConversionsRushing:
                    handler.string_value("NFL2PointConversionsRushing");
                    break;
                case TypeValueKnownValues.Value_NFL1PointSafety:
                    handler.string_value("NFL1PointSafety");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedKicks:
                    handler.string_value("NFLBlockedKicks");
                    break;
                case TypeValueKnownValues.Value_NFLConversionAttempts:
                    handler.string_value("NFLConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_NFLConversionsCompleted:
                    handler.string_value("NFLConversionsCompleted");
                    break;
                case TypeValueKnownValues.Value_NFLConversionsFailed:
                    handler.string_value("NFLConversionsFailed");
                    break;
                case TypeValueKnownValues.Value_NFLForcedFumbles:
                    handler.string_value("NFLForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesRecovered:
                    handler.string_value("NFLFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesRecoveredForTouchdowns:
                    handler.string_value("NFLFumblesRecoveredForTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLInterceptions:
                    handler.string_value("NFLInterceptions");
                    break;
                case TypeValueKnownValues.Value_NFLInterceptionsLongestInterception:
                    handler.string_value("NFLInterceptionsLongestInterception");
                    break;
                case TypeValueKnownValues.Value_NFLInterceptionsTouchdowns:
                    handler.string_value("NFLInterceptionsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLInterceptionsYards:
                    handler.string_value("NFLInterceptionsYards");
                    break;
                case TypeValueKnownValues.Value_NFLMiscAssistedTackles:
                    handler.string_value("NFLMiscAssistedTackles");
                    break;
                case TypeValueKnownValues.Value_NFLMiscCombinedTackles:
                    handler.string_value("NFLMiscCombinedTackles");
                    break;
                case TypeValueKnownValues.Value_NFLMiscForcedFumbles:
                    handler.string_value("NFLMiscForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_NFLMiscFumblesRecovered:
                    handler.string_value("NFLMiscFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_NFLMiscTackles:
                    handler.string_value("NFLMiscTackles");
                    break;
                case TypeValueKnownValues.Value_NFLPassesDefended:
                    handler.string_value("NFLPassesDefended");
                    break;
                case TypeValueKnownValues.Value_NFLQuarterbackHits:
                    handler.string_value("NFLQuarterbackHits");
                    break;
                case TypeValueKnownValues.Value_NFLSacks:
                    handler.string_value("NFLSacks");
                    break;
                case TypeValueKnownValues.Value_NFLSackYards:
                    handler.string_value("NFLSackYards");
                    break;
                case TypeValueKnownValues.Value_NFLSafeties:
                    handler.string_value("NFLSafeties");
                    break;
                case TypeValueKnownValues.Value_NFLSpecialTeamsAssistedTackles:
                    handler.string_value("NFLSpecialTeamsAssistedTackles");
                    break;
                case TypeValueKnownValues.Value_NFLSpecialTeamsCombinedTackles:
                    handler.string_value("NFLSpecialTeamsCombinedTackles");
                    break;
                case TypeValueKnownValues.Value_NFLSpecialTeamsForcedFumbles:
                    handler.string_value("NFLSpecialTeamsForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_NFLSpecialTeamsFumblesRecovered:
                    handler.string_value("NFLSpecialTeamsFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_NFLSpecialTeamsTotalTackles:
                    handler.string_value("NFLSpecialTeamsTotalTackles");
                    break;
                case TypeValueKnownValues.Value_NFLTacklesAssisted:
                    handler.string_value("NFLTacklesAssisted");
                    break;
                case TypeValueKnownValues.Value_NFLTacklesCombined:
                    handler.string_value("NFLTacklesCombined");
                    break;
                case TypeValueKnownValues.Value_NFLTacklesForLoss:
                    handler.string_value("NFLTacklesForLoss");
                    break;
                case TypeValueKnownValues.Value_NFLTackles:
                    handler.string_value("NFLTackles");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns10PlusYards:
                    handler.string_value("NFLBlockedFieldGoalReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns20PlusYards:
                    handler.string_value("NFLBlockedFieldGoalReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns30PlusYards:
                    handler.string_value("NFLBlockedFieldGoalReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns40PlusYards:
                    handler.string_value("NFLBlockedFieldGoalReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns50PlusYards:
                    handler.string_value("NFLBlockedFieldGoalReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsAverageReturn:
                    handler.string_value("NFLBlockedFieldGoalReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsLongestReturn:
                    handler.string_value("NFLBlockedFieldGoalReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturns:
                    handler.string_value("NFLBlockedFieldGoalReturns");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsTotalYards:
                    handler.string_value("NFLBlockedFieldGoalReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedFieldGoalReturnsTouchdowns:
                    handler.string_value("NFLBlockedFieldGoalReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturn10PlusYards:
                    handler.string_value("NFLBlockedPuntReturn10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturn20PlusYards:
                    handler.string_value("NFLBlockedPuntReturn20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturn30PlusYards:
                    handler.string_value("NFLBlockedPuntReturn30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturn40PlusYards:
                    handler.string_value("NFLBlockedPuntReturn40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturn50PlusYards:
                    handler.string_value("NFLBlockedPuntReturn50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturnsAverageReturn:
                    handler.string_value("NFLBlockedPuntReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturnsLongestReturn:
                    handler.string_value("NFLBlockedPuntReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturns:
                    handler.string_value("NFLBlockedPuntReturns");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturnsTotalYards:
                    handler.string_value("NFLBlockedPuntReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_NFLBlockedPuntReturnsTouchdowns:
                    handler.string_value("NFLBlockedPuntReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsAttempted:
                    handler.string_value("NFLExtraPointsAttempted");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsAttemptedKicking:
                    handler.string_value("NFLExtraPointsAttemptedKicking");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsAttempted2PointConversion:
                    handler.string_value("NFLExtraPointsAttempted2PointConversion");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsBlocked:
                    handler.string_value("NFLExtraPointsBlocked");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsMade:
                    handler.string_value("NFLExtraPointsMade");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsMadeKicking:
                    handler.string_value("NFLExtraPointsMadeKicking");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsMade2PointConversion:
                    handler.string_value("NFLExtraPointsMade2PointConversion");
                    break;
                case TypeValueKnownValues.Value_NFLExtraPointsPerc:
                    handler.string_value("NFLExtraPointsPerc");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturns10PlusYards:
                    handler.string_value("NFLFieldGoalReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturns20PlusYards:
                    handler.string_value("NFLFieldGoalReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturns30PlusYards:
                    handler.string_value("NFLFieldGoalReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturns40PlusYards:
                    handler.string_value("NFLFieldGoalReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturns50PlusYards:
                    handler.string_value("NFLFieldGoalReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturnsAverageReturn:
                    handler.string_value("NFLFieldGoalReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturnsLongestReturn:
                    handler.string_value("NFLFieldGoalReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturns:
                    handler.string_value("NFLFieldGoalReturns");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturnsTotalYards:
                    handler.string_value("NFLFieldGoalReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalReturnsTouchdowns:
                    handler.string_value("NFLFieldGoalReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsAttempted:
                    handler.string_value("NFLFieldGoalsAttempted");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsAttempted1to19Yards:
                    handler.string_value("NFLFieldGoalsAttempted1to19Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsAttempted20to29Yards:
                    handler.string_value("NFLFieldGoalsAttempted20to29Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsAttempted30to39Yards:
                    handler.string_value("NFLFieldGoalsAttempted30to39Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsAttempted40to49Yards:
                    handler.string_value("NFLFieldGoalsAttempted40to49Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsAttempted50PlusYards:
                    handler.string_value("NFLFieldGoalsAttempted50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsBlocked:
                    handler.string_value("NFLFieldGoalsBlocked");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsLongestMade:
                    handler.string_value("NFLFieldGoalsLongestMade");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsMade:
                    handler.string_value("NFLFieldGoalsMade");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsMade1to19Yards:
                    handler.string_value("NFLFieldGoalsMade1to19Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsMade20to29Yards:
                    handler.string_value("NFLFieldGoalsMade20to29Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsMade30to39Yards:
                    handler.string_value("NFLFieldGoalsMade30to39Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsMade40to49Yards:
                    handler.string_value("NFLFieldGoalsMade40to49Yards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsMade50PlusYards:
                    handler.string_value("NFLFieldGoalsMade50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLFieldGoalsPerc:
                    handler.string_value("NFLFieldGoalsPerc");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturns10PlusYards:
                    handler.string_value("NFLKickoffReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturns20PlusYards:
                    handler.string_value("NFLKickoffReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturns30PlusYards:
                    handler.string_value("NFLKickoffReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturns40PlusYards:
                    handler.string_value("NFLKickoffReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturns50PlusYards:
                    handler.string_value("NFLKickoffReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturnsAverageRun:
                    handler.string_value("NFLKickoffReturnsAverageRun");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturnsFairCatches:
                    handler.string_value("NFLKickoffReturnsFairCatches");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturnsLongestKickReturn:
                    handler.string_value("NFLKickoffReturnsLongestKickReturn");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturnsReturns:
                    handler.string_value("NFLKickoffReturnsReturns");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturnsTouchdowns:
                    handler.string_value("NFLKickoffReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffReturnsYards:
                    handler.string_value("NFLKickoffReturnsYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsAverageGrossYards:
                    handler.string_value("NFLKickoffsAverageGrossYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsAverageNetYards:
                    handler.string_value("NFLKickoffsAverageNetYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsAverageReturnYards:
                    handler.string_value("NFLKickoffsAverageReturnYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsEndZoneKicks:
                    handler.string_value("NFLKickoffsEndZoneKicks");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsGrossYards:
                    handler.string_value("NFLKickoffsGrossYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsInsideOpponents20YardLine:
                    handler.string_value("NFLKickoffsInsideOpponents20YardLine");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsKicks:
                    handler.string_value("NFLKickoffsKicks");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsLongestKick:
                    handler.string_value("NFLKickoffsLongestKick");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsNetYards:
                    handler.string_value("NFLKickoffsNetYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsInsideOpponents20YardLinePerc:
                    handler.string_value("NFLKickoffsInsideOpponents20YardLinePerc");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsTouchbacksPerc:
                    handler.string_value("NFLKickoffsTouchbacksPerc");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsReturned:
                    handler.string_value("NFLKickoffsReturned");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsTotalReturnYards:
                    handler.string_value("NFLKickoffsTotalReturnYards");
                    break;
                case TypeValueKnownValues.Value_NFLKickoffsTouchbacks:
                    handler.string_value("NFLKickoffsTouchbacks");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturns10PlusYards:
                    handler.string_value("NFLPuntReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturns20PlusYards:
                    handler.string_value("NFLPuntReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturns30PlusYards:
                    handler.string_value("NFLPuntReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturns40PlusYards:
                    handler.string_value("NFLPuntReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturns50PlusYards:
                    handler.string_value("NFLPuntReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturnsAverageRun:
                    handler.string_value("NFLPuntReturnsAverageRun");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturnsFairCatches:
                    handler.string_value("NFLPuntReturnsFairCatches");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturnsLongestKickReturn:
                    handler.string_value("NFLPuntReturnsLongestKickReturn");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturns:
                    handler.string_value("NFLPuntReturns");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturnsTouchdowns:
                    handler.string_value("NFLPuntReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NFLPuntReturnsYards:
                    handler.string_value("NFLPuntReturnsYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingAverageGrossYards:
                    handler.string_value("NFLPuntingAverageGrossYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingAverageNetYards:
                    handler.string_value("NFLPuntingAverageNetYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingAverageReturnYards:
                    handler.string_value("NFLPuntingAverageReturnYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingBlocked:
                    handler.string_value("NFLPuntingBlocked");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingGrossYards:
                    handler.string_value("NFLPuntingGrossYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingInsideOpponents20YardLine:
                    handler.string_value("NFLPuntingInsideOpponents20YardLine");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingLongestPunt:
                    handler.string_value("NFLPuntingLongestPunt");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingNetYards:
                    handler.string_value("NFLPuntingNetYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingInsideOpponents20YardLinePerc:
                    handler.string_value("NFLPuntingInsideOpponents20YardLinePerc");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingTouchbacksPerc:
                    handler.string_value("NFLPuntingTouchbacksPerc");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingPunts:
                    handler.string_value("NFLPuntingPunts");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingReturnYards:
                    handler.string_value("NFLPuntingReturnYards");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingReturned:
                    handler.string_value("NFLPuntingReturned");
                    break;
                case TypeValueKnownValues.Value_NFLPuntingTouchbacks:
                    handler.string_value("NFLPuntingTouchbacks");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesForced:
                    handler.string_value("NFLFumblesForced");
                    break;
                case TypeValueKnownValues.Value_NFLFumbles:
                    handler.string_value("NFLFumbles");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesLost:
                    handler.string_value("NFLFumblesLost");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesOpponentRecovery:
                    handler.string_value("NFLFumblesOpponentRecovery");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesOpponentTouchdownsFromRecovery:
                    handler.string_value("NFLFumblesOpponentTouchdownsFromRecovery");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesOutOfBounds:
                    handler.string_value("NFLFumblesOutOfBounds");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesOwnRecovery:
                    handler.string_value("NFLFumblesOwnRecovery");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesOwnTouchdownsFromRecovery:
                    handler.string_value("NFLFumblesOwnTouchdownsFromRecovery");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesYardsFromOpponentRecovery:
                    handler.string_value("NFLFumblesYardsFromOpponentRecovery");
                    break;
                case TypeValueKnownValues.Value_NFLFumblesYardsFromOwnRecovery:
                    handler.string_value("NFLFumblesYardsFromOwnRecovery");
                    break;
                case TypeValueKnownValues.Value_NFLPenalties1stDowns:
                    handler.string_value("NFLPenalties1stDowns");
                    break;
                case TypeValueKnownValues.Value_NFLPenalties:
                    handler.string_value("NFLPenalties");
                    break;
                case TypeValueKnownValues.Value_NFLPenaltiesYards:
                    handler.string_value("NFLPenaltiesYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFB3rdDownConversionAttempts:
                    handler.string_value("NCAAFB3rdDownConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFB3rdDownConversions:
                    handler.string_value("NCAAFB3rdDownConversions");
                    break;
                case TypeValueKnownValues.Value_NCAAFB3rdDownConversionPerc:
                    handler.string_value("NCAAFB3rdDownConversionPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFB3rdDownConversionsViaPass:
                    handler.string_value("NCAAFB3rdDownConversionsViaPass");
                    break;
                case TypeValueKnownValues.Value_NCAAFB3rdDownConversionsViaPenalty:
                    handler.string_value("NCAAFB3rdDownConversionsViaPenalty");
                    break;
                case TypeValueKnownValues.Value_NCAAFB3rdDownConversionsViaRush:
                    handler.string_value("NCAAFB3rdDownConversionsViaRush");
                    break;
                case TypeValueKnownValues.Value_NCAAFB4thDownConversionAttempts:
                    handler.string_value("NCAAFB4thDownConversionAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFB4thDownConversions:
                    handler.string_value("NCAAFB4thDownConversions");
                    break;
                case TypeValueKnownValues.Value_NCAAFB4thDownConversionPerc:
                    handler.string_value("NCAAFB4thDownConversionPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFB4thDownConversionsViaPass:
                    handler.string_value("NCAAFB4thDownConversionsViaPass");
                    break;
                case TypeValueKnownValues.Value_NCAAFB4thDownConversionsViaPenalty:
                    handler.string_value("NCAAFB4thDownConversionsViaPenalty");
                    break;
                case TypeValueKnownValues.Value_NCAAFB4thDownConversionsViaRush:
                    handler.string_value("NCAAFB4thDownConversionsViaRush");
                    break;
                case TypeValueKnownValues.Value_NCAAFBGamesPlayed:
                    handler.string_value("NCAAFBGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_NCAAFBGamesStarted:
                    handler.string_value("NCAAFBGamesStarted");
                    break;
                case TypeValueKnownValues.Value_NCAAFBGoalEfficiencyAttempts:
                    handler.string_value("NCAAFBGoalEfficiencyAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFBGoalEfficiencyPerc:
                    handler.string_value("NCAAFBGoalEfficiencyPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBGoalEfficiencyTouchdowns:
                    handler.string_value("NCAAFBGoalEfficiencyTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassing10PlusYards:
                    handler.string_value("NCAAFBPassing10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassing20PlusYards:
                    handler.string_value("NCAAFBPassing20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassing30PlusYards:
                    handler.string_value("NCAAFBPassing30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassing40PlusYards:
                    handler.string_value("NCAAFBPassing40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassing50PlusYards:
                    handler.string_value("NCAAFBPassing50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingAttempts:
                    handler.string_value("NCAAFBPassingAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingAverageYardsPerCompletion:
                    handler.string_value("NCAAFBPassingAverageYardsPerCompletion");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingAverageYardsPerAttempt:
                    handler.string_value("NCAAFBPassingAverageYardsPerAttempt");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingCompletionPerc:
                    handler.string_value("NCAAFBPassingCompletionPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingCompletions:
                    handler.string_value("NCAAFBPassingCompletions");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassing1stDowns:
                    handler.string_value("NCAAFBPassing1stDowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingGrossYards:
                    handler.string_value("NCAAFBPassingGrossYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingInterceptionPerc:
                    handler.string_value("NCAAFBPassingInterceptionPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingInterceptions:
                    handler.string_value("NCAAFBPassingInterceptions");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingInterceptionsReturnedForTouchdown:
                    handler.string_value("NCAAFBPassingInterceptionsReturnedForTouchdown");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingLongestPass:
                    handler.string_value("NCAAFBPassingLongestPass");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingNetYards:
                    handler.string_value("NCAAFBPassingNetYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingRating:
                    handler.string_value("NCAAFBPassingRating");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingRedZoneAttempts:
                    handler.string_value("NCAAFBPassingRedZoneAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingSacked:
                    handler.string_value("NCAAFBPassingSacked");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingSackedYardsLost:
                    handler.string_value("NCAAFBPassingSackedYardsLost");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingTackledForSafety:
                    handler.string_value("NCAAFBPassingTackledForSafety");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingTotalYards:
                    handler.string_value("NCAAFBPassingTotalYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingTouchdownPerc:
                    handler.string_value("NCAAFBPassingTouchdownPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassingTouchdowns:
                    handler.string_value("NCAAFBPassingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceiving10PlusYards:
                    handler.string_value("NCAAFBReceiving10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceiving20PlusYards:
                    handler.string_value("NCAAFBReceiving20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceiving30PlusYards:
                    handler.string_value("NCAAFBReceiving30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceiving40PlusYards:
                    handler.string_value("NCAAFBReceiving40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceiving50PlusYards:
                    handler.string_value("NCAAFBReceiving50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingAverageReception:
                    handler.string_value("NCAAFBReceivingAverageReception");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceiving1stDowns:
                    handler.string_value("NCAAFBReceiving1stDowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingFumbledOnReception:
                    handler.string_value("NCAAFBReceivingFumbledOnReception");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingLongestReception:
                    handler.string_value("NCAAFBReceivingLongestReception");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingReceptions:
                    handler.string_value("NCAAFBReceivingReceptions");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingRedZoneTargets:
                    handler.string_value("NCAAFBReceivingRedZoneTargets");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingTargets:
                    handler.string_value("NCAAFBReceivingTargets");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingTotalYards:
                    handler.string_value("NCAAFBReceivingTotalYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingTouchdowns:
                    handler.string_value("NCAAFBReceivingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBReceivingYardsAfterCompletion:
                    handler.string_value("NCAAFBReceivingYardsAfterCompletion");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRedZoneEfficiencyAttempts:
                    handler.string_value("NCAAFBRedZoneEfficiencyAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRedZoneEfficiencyConversions:
                    handler.string_value("NCAAFBRedZoneEfficiencyConversions");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRedZoneEfficiencyPerc:
                    handler.string_value("NCAAFBRedZoneEfficiencyPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushing10PlusYards:
                    handler.string_value("NCAAFBRushing10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushing20PlusYards:
                    handler.string_value("NCAAFBRushing20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushing30PlusYards:
                    handler.string_value("NCAAFBRushing30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushing40PlusYards:
                    handler.string_value("NCAAFBRushing40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushing50PlusYards:
                    handler.string_value("NCAAFBRushing50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingAttempts:
                    handler.string_value("NCAAFBRushingAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingAverageRush:
                    handler.string_value("NCAAFBRushingAverageRush");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushing1stDownPerc:
                    handler.string_value("NCAAFBRushing1stDownPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushing1stDowns:
                    handler.string_value("NCAAFBRushing1stDowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingFumbledOnRush:
                    handler.string_value("NCAAFBRushingFumbledOnRush");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingLongestRush:
                    handler.string_value("NCAAFBRushingLongestRush");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingRedZoneAttempts:
                    handler.string_value("NCAAFBRushingRedZoneAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingTackledForSafety:
                    handler.string_value("NCAAFBRushingTackledForSafety");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingTotalYards:
                    handler.string_value("NCAAFBRushingTotalYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBRushingTouchdowns:
                    handler.string_value("NCAAFBRushingTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFB1stDowns:
                    handler.string_value("NCAAFB1stDowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFB2PointConversionsAttempted:
                    handler.string_value("NCAAFB2PointConversionsAttempted");
                    break;
                case TypeValueKnownValues.Value_NCAAFB2PointConversionsFailed:
                    handler.string_value("NCAAFB2PointConversionsFailed");
                    break;
                case TypeValueKnownValues.Value_NCAAFB2PointConversionsMade:
                    handler.string_value("NCAAFB2PointConversionsMade");
                    break;
                case TypeValueKnownValues.Value_NCAAFB2PointConversionsPassing:
                    handler.string_value("NCAAFB2PointConversionsPassing");
                    break;
                case TypeValueKnownValues.Value_NCAAFB2PointConversionsReceiving:
                    handler.string_value("NCAAFB2PointConversionsReceiving");
                    break;
                case TypeValueKnownValues.Value_NCAAFB2PointConversionsRushing:
                    handler.string_value("NCAAFB2PointConversionsRushing");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedKicks:
                    handler.string_value("NCAAFBBlockedKicks");
                    break;
                case TypeValueKnownValues.Value_NCAAFBForcedFumbles:
                    handler.string_value("NCAAFBForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesRecovered:
                    handler.string_value("NCAAFBFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesRecoveredForTouchdowns:
                    handler.string_value("NCAAFBFumblesRecoveredForTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBInterceptions:
                    handler.string_value("NCAAFBInterceptions");
                    break;
                case TypeValueKnownValues.Value_NCAAFBInterceptionsLongestInterception:
                    handler.string_value("NCAAFBInterceptionsLongestInterception");
                    break;
                case TypeValueKnownValues.Value_NCAAFBInterceptionsTouchdowns:
                    handler.string_value("NCAAFBInterceptionsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBInterceptionsYards:
                    handler.string_value("NCAAFBInterceptionsYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBMiscAssistedTackles:
                    handler.string_value("NCAAFBMiscAssistedTackles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBMiscCombinedTackles:
                    handler.string_value("NCAAFBMiscCombinedTackles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBMiscForcedFumbles:
                    handler.string_value("NCAAFBMiscForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBMiscFumblesRecovered:
                    handler.string_value("NCAAFBMiscFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_NCAAFBMiscTackles:
                    handler.string_value("NCAAFBMiscTackles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPassesDefended:
                    handler.string_value("NCAAFBPassesDefended");
                    break;
                case TypeValueKnownValues.Value_NCAAFBQuarterbackHits:
                    handler.string_value("NCAAFBQuarterbackHits");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSacks:
                    handler.string_value("NCAAFBSacks");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSackYards:
                    handler.string_value("NCAAFBSackYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSafeties:
                    handler.string_value("NCAAFBSafeties");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSpecialTeamsAssistedTackles:
                    handler.string_value("NCAAFBSpecialTeamsAssistedTackles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSpecialTeamsCombinedTackles:
                    handler.string_value("NCAAFBSpecialTeamsCombinedTackles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSpecialTeamsForcedFumbles:
                    handler.string_value("NCAAFBSpecialTeamsForcedFumbles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSpecialTeamsFumblesRecovered:
                    handler.string_value("NCAAFBSpecialTeamsFumblesRecovered");
                    break;
                case TypeValueKnownValues.Value_NCAAFBSpecialTeamsTotalTackles:
                    handler.string_value("NCAAFBSpecialTeamsTotalTackles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBTacklesAssisted:
                    handler.string_value("NCAAFBTacklesAssisted");
                    break;
                case TypeValueKnownValues.Value_NCAAFBTacklesCombined:
                    handler.string_value("NCAAFBTacklesCombined");
                    break;
                case TypeValueKnownValues.Value_NCAAFBTacklesForLoss:
                    handler.string_value("NCAAFBTacklesForLoss");
                    break;
                case TypeValueKnownValues.Value_NCAAFBTackles:
                    handler.string_value("NCAAFBTackles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns10PlusYards:
                    handler.string_value("NCAAFBBlockedFieldGoalReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns20PlusYards:
                    handler.string_value("NCAAFBBlockedFieldGoalReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns30PlusYards:
                    handler.string_value("NCAAFBBlockedFieldGoalReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns40PlusYards:
                    handler.string_value("NCAAFBBlockedFieldGoalReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns50PlusYards:
                    handler.string_value("NCAAFBBlockedFieldGoalReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsAverageReturn:
                    handler.string_value("NCAAFBBlockedFieldGoalReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsLongestReturn:
                    handler.string_value("NCAAFBBlockedFieldGoalReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturns:
                    handler.string_value("NCAAFBBlockedFieldGoalReturns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsTotalYards:
                    handler.string_value("NCAAFBBlockedFieldGoalReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedFieldGoalReturnsTouchdowns:
                    handler.string_value("NCAAFBBlockedFieldGoalReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn10PlusYards:
                    handler.string_value("NCAAFBBlockedPuntReturn10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn20PlusYards:
                    handler.string_value("NCAAFBBlockedPuntReturn20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn30PlusYards:
                    handler.string_value("NCAAFBBlockedPuntReturn30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn40PlusYards:
                    handler.string_value("NCAAFBBlockedPuntReturn40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturn50PlusYards:
                    handler.string_value("NCAAFBBlockedPuntReturn50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsAverageReturn:
                    handler.string_value("NCAAFBBlockedPuntReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsLongestReturn:
                    handler.string_value("NCAAFBBlockedPuntReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturns:
                    handler.string_value("NCAAFBBlockedPuntReturns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsTotalYards:
                    handler.string_value("NCAAFBBlockedPuntReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBBlockedPuntReturnsTouchdowns:
                    handler.string_value("NCAAFBBlockedPuntReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsAttempted:
                    handler.string_value("NCAAFBExtraPointsAttempted");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsAttemptedKicking:
                    handler.string_value("NCAAFBExtraPointsAttemptedKicking");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsAttempted2PointConversion:
                    handler.string_value("NCAAFBExtraPointsAttempted2PointConversion");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsBlocked:
                    handler.string_value("NCAAFBExtraPointsBlocked");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsMade:
                    handler.string_value("NCAAFBExtraPointsMade");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsMadeKicking:
                    handler.string_value("NCAAFBExtraPointsMadeKicking");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsMade2PointConversion:
                    handler.string_value("NCAAFBExtraPointsMade2PointConversion");
                    break;
                case TypeValueKnownValues.Value_NCAAFBExtraPointsPerc:
                    handler.string_value("NCAAFBExtraPointsPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns10PlusYards:
                    handler.string_value("NCAAFBFieldGoalReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns20PlusYards:
                    handler.string_value("NCAAFBFieldGoalReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns30PlusYards:
                    handler.string_value("NCAAFBFieldGoalReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns40PlusYards:
                    handler.string_value("NCAAFBFieldGoalReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns50PlusYards:
                    handler.string_value("NCAAFBFieldGoalReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsAverageReturn:
                    handler.string_value("NCAAFBFieldGoalReturnsAverageReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsLongestReturn:
                    handler.string_value("NCAAFBFieldGoalReturnsLongestReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturns:
                    handler.string_value("NCAAFBFieldGoalReturns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsTotalYards:
                    handler.string_value("NCAAFBFieldGoalReturnsTotalYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalReturnsTouchdowns:
                    handler.string_value("NCAAFBFieldGoalReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted:
                    handler.string_value("NCAAFBFieldGoalsAttempted");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted1to19Yards:
                    handler.string_value("NCAAFBFieldGoalsAttempted1to19Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted20to29Yards:
                    handler.string_value("NCAAFBFieldGoalsAttempted20to29Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted30to39Yards:
                    handler.string_value("NCAAFBFieldGoalsAttempted30to39Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted40to49Yards:
                    handler.string_value("NCAAFBFieldGoalsAttempted40to49Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsAttempted50PlusYards:
                    handler.string_value("NCAAFBFieldGoalsAttempted50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsBlocked:
                    handler.string_value("NCAAFBFieldGoalsBlocked");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsLongestMade:
                    handler.string_value("NCAAFBFieldGoalsLongestMade");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade:
                    handler.string_value("NCAAFBFieldGoalsMade");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade1to19Yards:
                    handler.string_value("NCAAFBFieldGoalsMade1to19Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade20to29Yards:
                    handler.string_value("NCAAFBFieldGoalsMade20to29Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade30to39Yards:
                    handler.string_value("NCAAFBFieldGoalsMade30to39Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade40to49Yards:
                    handler.string_value("NCAAFBFieldGoalsMade40to49Yards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsMade50PlusYards:
                    handler.string_value("NCAAFBFieldGoalsMade50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFieldGoalsPerc:
                    handler.string_value("NCAAFBFieldGoalsPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturns10PlusYards:
                    handler.string_value("NCAAFBKickoffReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturns20PlusYards:
                    handler.string_value("NCAAFBKickoffReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturns30PlusYards:
                    handler.string_value("NCAAFBKickoffReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturns40PlusYards:
                    handler.string_value("NCAAFBKickoffReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturns50PlusYards:
                    handler.string_value("NCAAFBKickoffReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturnsAverageRun:
                    handler.string_value("NCAAFBKickoffReturnsAverageRun");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturnsFairCatches:
                    handler.string_value("NCAAFBKickoffReturnsFairCatches");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturnsLongestKickReturn:
                    handler.string_value("NCAAFBKickoffReturnsLongestKickReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturnsReturns:
                    handler.string_value("NCAAFBKickoffReturnsReturns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturnsTouchdowns:
                    handler.string_value("NCAAFBKickoffReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffReturnsYards:
                    handler.string_value("NCAAFBKickoffReturnsYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsAverageGrossYards:
                    handler.string_value("NCAAFBKickoffsAverageGrossYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsAverageNetYards:
                    handler.string_value("NCAAFBKickoffsAverageNetYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsAverageReturnYards:
                    handler.string_value("NCAAFBKickoffsAverageReturnYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsEndZoneKicks:
                    handler.string_value("NCAAFBKickoffsEndZoneKicks");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsGrossYards:
                    handler.string_value("NCAAFBKickoffsGrossYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsInsideOpponents20YardLine:
                    handler.string_value("NCAAFBKickoffsInsideOpponents20YardLine");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsKicks:
                    handler.string_value("NCAAFBKickoffsKicks");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsLongestKick:
                    handler.string_value("NCAAFBKickoffsLongestKick");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsNetYards:
                    handler.string_value("NCAAFBKickoffsNetYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsInsideOpponents20YardLinePerc:
                    handler.string_value("NCAAFBKickoffsInsideOpponents20YardLinePerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsTouchbacksPerc:
                    handler.string_value("NCAAFBKickoffsTouchbacksPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsReturned:
                    handler.string_value("NCAAFBKickoffsReturned");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsTotalReturnYards:
                    handler.string_value("NCAAFBKickoffsTotalReturnYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBKickoffsTouchbacks:
                    handler.string_value("NCAAFBKickoffsTouchbacks");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturns10PlusYards:
                    handler.string_value("NCAAFBPuntReturns10PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturns20PlusYards:
                    handler.string_value("NCAAFBPuntReturns20PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturns30PlusYards:
                    handler.string_value("NCAAFBPuntReturns30PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturns40PlusYards:
                    handler.string_value("NCAAFBPuntReturns40PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturns50PlusYards:
                    handler.string_value("NCAAFBPuntReturns50PlusYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturnsAverageRun:
                    handler.string_value("NCAAFBPuntReturnsAverageRun");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturnsFairCatches:
                    handler.string_value("NCAAFBPuntReturnsFairCatches");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturnsLongestKickReturn:
                    handler.string_value("NCAAFBPuntReturnsLongestKickReturn");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturns:
                    handler.string_value("NCAAFBPuntReturns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturnsTouchdowns:
                    handler.string_value("NCAAFBPuntReturnsTouchdowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntReturnsYards:
                    handler.string_value("NCAAFBPuntReturnsYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingAverageGrossYards:
                    handler.string_value("NCAAFBPuntingAverageGrossYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingAverageNetYards:
                    handler.string_value("NCAAFBPuntingAverageNetYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingAverageReturnYards:
                    handler.string_value("NCAAFBPuntingAverageReturnYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingBlocked:
                    handler.string_value("NCAAFBPuntingBlocked");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingGrossYards:
                    handler.string_value("NCAAFBPuntingGrossYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingInsideOpponents20YardLine:
                    handler.string_value("NCAAFBPuntingInsideOpponents20YardLine");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingLongestPunt:
                    handler.string_value("NCAAFBPuntingLongestPunt");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingNetYards:
                    handler.string_value("NCAAFBPuntingNetYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingInsideOpponents20YardLinePerc:
                    handler.string_value("NCAAFBPuntingInsideOpponents20YardLinePerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingTouchbacksPerc:
                    handler.string_value("NCAAFBPuntingTouchbacksPerc");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingPunts:
                    handler.string_value("NCAAFBPuntingPunts");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingReturnYards:
                    handler.string_value("NCAAFBPuntingReturnYards");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingReturned:
                    handler.string_value("NCAAFBPuntingReturned");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPuntingTouchbacks:
                    handler.string_value("NCAAFBPuntingTouchbacks");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesForced:
                    handler.string_value("NCAAFBFumblesForced");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumbles:
                    handler.string_value("NCAAFBFumbles");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesLost:
                    handler.string_value("NCAAFBFumblesLost");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesOpponentRecovery:
                    handler.string_value("NCAAFBFumblesOpponentRecovery");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesOpponentTouchdownsFromRecovery:
                    handler.string_value("NCAAFBFumblesOpponentTouchdownsFromRecovery");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesOutOfBounds:
                    handler.string_value("NCAAFBFumblesOutOfBounds");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesOwnRecovery:
                    handler.string_value("NCAAFBFumblesOwnRecovery");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesOwnTouchdownsFromRecovery:
                    handler.string_value("NCAAFBFumblesOwnTouchdownsFromRecovery");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesYardsFromOpponentRecovery:
                    handler.string_value("NCAAFBFumblesYardsFromOpponentRecovery");
                    break;
                case TypeValueKnownValues.Value_NCAAFBFumblesYardsFromOwnRecovery:
                    handler.string_value("NCAAFBFumblesYardsFromOwnRecovery");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPenalties1stDowns:
                    handler.string_value("NCAAFBPenalties1stDowns");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPenalties:
                    handler.string_value("NCAAFBPenalties");
                    break;
                case TypeValueKnownValues.Value_NCAAFBPenaltiesYards:
                    handler.string_value("NCAAFBPenaltiesYards");
                    break;
                case TypeValueKnownValues.Value_NBAAssists:
                    handler.string_value("NBAAssists");
                    break;
                case TypeValueKnownValues.Value_NBAAssistsPerGame:
                    handler.string_value("NBAAssistsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAAssistsToTurnoverRatio:
                    handler.string_value("NBAAssistsToTurnoverRatio");
                    break;
                case TypeValueKnownValues.Value_NBABlockedAttempts:
                    handler.string_value("NBABlockedAttempts");
                    break;
                case TypeValueKnownValues.Value_NBABlockedAttemptsPerGame:
                    handler.string_value("NBABlockedAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBABlockedShots:
                    handler.string_value("NBABlockedShots");
                    break;
                case TypeValueKnownValues.Value_NBABlockedShotsPerGame:
                    handler.string_value("NBABlockedShotsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBACoachTechnicalFouls:
                    handler.string_value("NBACoachTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_NBADefensiveRebounds:
                    handler.string_value("NBADefensiveRebounds");
                    break;
                case TypeValueKnownValues.Value_NBADefensiveReboundsPerGame:
                    handler.string_value("NBADefensiveReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAEjections:
                    handler.string_value("NBAEjections");
                    break;
                case TypeValueKnownValues.Value_NBAFastBreakPoints:
                    handler.string_value("NBAFastBreakPoints");
                    break;
                case TypeValueKnownValues.Value_NBAFastBreakPointsPerGame:
                    handler.string_value("NBAFastBreakPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAFieldGoalAttempts:
                    handler.string_value("NBAFieldGoalAttempts");
                    break;
                case TypeValueKnownValues.Value_NBAFieldGoalAttemptsPerGame:
                    handler.string_value("NBAFieldGoalAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAFieldGoalPercentage:
                    handler.string_value("NBAFieldGoalPercentage");
                    break;
                case TypeValueKnownValues.Value_NBAFieldGoalsMade:
                    handler.string_value("NBAFieldGoalsMade");
                    break;
                case TypeValueKnownValues.Value_NBAFieldGoalsMadePerGame:
                    handler.string_value("NBAFieldGoalsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_NBAFlagrantFouls:
                    handler.string_value("NBAFlagrantFouls");
                    break;
                case TypeValueKnownValues.Value_NBAFlagrantFoulsPerGame:
                    handler.string_value("NBAFlagrantFoulsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAFreeThrowAttempts:
                    handler.string_value("NBAFreeThrowAttempts");
                    break;
                case TypeValueKnownValues.Value_NBAFreeThrowAttemptsPerGame:
                    handler.string_value("NBAFreeThrowAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAFreeThrowPercentage:
                    handler.string_value("NBAFreeThrowPercentage");
                    break;
                case TypeValueKnownValues.Value_NBAFreeThrowsMade:
                    handler.string_value("NBAFreeThrowsMade");
                    break;
                case TypeValueKnownValues.Value_NBAFreeThrowsMadePerGame:
                    handler.string_value("NBAFreeThrowsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_NBAGamesPlayed:
                    handler.string_value("NBAGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_NBAGamesStarted:
                    handler.string_value("NBAGamesStarted");
                    break;
                case TypeValueKnownValues.Value_NBAMinutesPlayed:
                    handler.string_value("NBAMinutesPlayed");
                    break;
                case TypeValueKnownValues.Value_NBAMinutesPlayedPerGame:
                    handler.string_value("NBAMinutesPlayedPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAOffensiveRebounds:
                    handler.string_value("NBAOffensiveRebounds");
                    break;
                case TypeValueKnownValues.Value_NBAOffensiveReboundsPerGame:
                    handler.string_value("NBAOffensiveReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAPersonalFouls:
                    handler.string_value("NBAPersonalFouls");
                    break;
                case TypeValueKnownValues.Value_NBAPersonalFoulsPerGame:
                    handler.string_value("NBAPersonalFoulsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAPoints:
                    handler.string_value("NBAPoints");
                    break;
                case TypeValueKnownValues.Value_NBAPointsPerGame:
                    handler.string_value("NBAPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAPointsInPaint:
                    handler.string_value("NBAPointsInPaint");
                    break;
                case TypeValueKnownValues.Value_NBAPointsInPaintPerGame:
                    handler.string_value("NBAPointsInPaintPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAPointsOffTurnovers:
                    handler.string_value("NBAPointsOffTurnovers");
                    break;
                case TypeValueKnownValues.Value_NBAPointsOffTurnoversPerGame:
                    handler.string_value("NBAPointsOffTurnoversPerGame");
                    break;
                case TypeValueKnownValues.Value_NBARebounds:
                    handler.string_value("NBARebounds");
                    break;
                case TypeValueKnownValues.Value_NBAReboundsPerGame:
                    handler.string_value("NBAReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBASecondChancePoints:
                    handler.string_value("NBASecondChancePoints");
                    break;
                case TypeValueKnownValues.Value_NBASecondChancePointsPerGame:
                    handler.string_value("NBASecondChancePointsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBASteals:
                    handler.string_value("NBASteals");
                    break;
                case TypeValueKnownValues.Value_NBAStealsPerGame:
                    handler.string_value("NBAStealsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBATeamTechnicalFouls:
                    handler.string_value("NBATeamTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_NBAPlayerTechnicalFouls:
                    handler.string_value("NBAPlayerTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_NBAThreePointAttempts:
                    handler.string_value("NBAThreePointAttempts");
                    break;
                case TypeValueKnownValues.Value_NBAThreePointAttemptsPerGame:
                    handler.string_value("NBAThreePointAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBAThreePointPercentage:
                    handler.string_value("NBAThreePointPercentage");
                    break;
                case TypeValueKnownValues.Value_NBAThreePointsMade:
                    handler.string_value("NBAThreePointsMade");
                    break;
                case TypeValueKnownValues.Value_NBAThreePointsMadePerGame:
                    handler.string_value("NBAThreePointsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_NBATurnovers:
                    handler.string_value("NBATurnovers");
                    break;
                case TypeValueKnownValues.Value_NBATurnoversPerGame:
                    handler.string_value("NBATurnoversPerGame");
                    break;
                case TypeValueKnownValues.Value_NBATwoPointAttempts:
                    handler.string_value("NBATwoPointAttempts");
                    break;
                case TypeValueKnownValues.Value_NBATwoPointAttemptsPerGame:
                    handler.string_value("NBATwoPointAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NBATwoPointPercentage:
                    handler.string_value("NBATwoPointPercentage");
                    break;
                case TypeValueKnownValues.Value_NBATwoPointsMade:
                    handler.string_value("NBATwoPointsMade");
                    break;
                case TypeValueKnownValues.Value_NBATwoPointsMadePerGame:
                    handler.string_value("NBATwoPointsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBAssists:
                    handler.string_value("NCAAMBAssists");
                    break;
                case TypeValueKnownValues.Value_NCAAMBAssistsPerGame:
                    handler.string_value("NCAAMBAssistsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBAssistsToTurnoverRatio:
                    handler.string_value("NCAAMBAssistsToTurnoverRatio");
                    break;
                case TypeValueKnownValues.Value_NCAAMBBlockedAttempts:
                    handler.string_value("NCAAMBBlockedAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAMBBlockedAttemptsPerGame:
                    handler.string_value("NCAAMBBlockedAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBBlockedShots:
                    handler.string_value("NCAAMBBlockedShots");
                    break;
                case TypeValueKnownValues.Value_NCAAMBBlockedShotsPerGame:
                    handler.string_value("NCAAMBBlockedShotsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBCoachTechnicalFouls:
                    handler.string_value("NCAAMBCoachTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_NCAAMBDefensiveRebounds:
                    handler.string_value("NCAAMBDefensiveRebounds");
                    break;
                case TypeValueKnownValues.Value_NCAAMBDefensiveReboundsPerGame:
                    handler.string_value("NCAAMBDefensiveReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBEjections:
                    handler.string_value("NCAAMBEjections");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFastBreakPoints:
                    handler.string_value("NCAAMBFastBreakPoints");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFastBreakPointsPerGame:
                    handler.string_value("NCAAMBFastBreakPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFieldGoalAttempts:
                    handler.string_value("NCAAMBFieldGoalAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFieldGoalAttemptsPerGame:
                    handler.string_value("NCAAMBFieldGoalAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFieldGoalPercentage:
                    handler.string_value("NCAAMBFieldGoalPercentage");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFieldGoalsMade:
                    handler.string_value("NCAAMBFieldGoalsMade");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFieldGoalsMadePerGame:
                    handler.string_value("NCAAMBFieldGoalsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFlagrantFouls:
                    handler.string_value("NCAAMBFlagrantFouls");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFlagrantFoulsPerGame:
                    handler.string_value("NCAAMBFlagrantFoulsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFreeThrowAttempts:
                    handler.string_value("NCAAMBFreeThrowAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFreeThrowAttemptsPerGame:
                    handler.string_value("NCAAMBFreeThrowAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFreeThrowPercentage:
                    handler.string_value("NCAAMBFreeThrowPercentage");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFreeThrowsMade:
                    handler.string_value("NCAAMBFreeThrowsMade");
                    break;
                case TypeValueKnownValues.Value_NCAAMBFreeThrowsMadePerGame:
                    handler.string_value("NCAAMBFreeThrowsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBGamesPlayed:
                    handler.string_value("NCAAMBGamesPlayed");
                    break;
                case TypeValueKnownValues.Value_NCAAMBGamesStarted:
                    handler.string_value("NCAAMBGamesStarted");
                    break;
                case TypeValueKnownValues.Value_NCAAMBMinutesPlayed:
                    handler.string_value("NCAAMBMinutesPlayed");
                    break;
                case TypeValueKnownValues.Value_NCAAMBMinutesPlayedPerGame:
                    handler.string_value("NCAAMBMinutesPlayedPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBOffensiveRebounds:
                    handler.string_value("NCAAMBOffensiveRebounds");
                    break;
                case TypeValueKnownValues.Value_NCAAMBOffensiveReboundsPerGame:
                    handler.string_value("NCAAMBOffensiveReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPersonalFouls:
                    handler.string_value("NCAAMBPersonalFouls");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPersonalFoulsPerGame:
                    handler.string_value("NCAAMBPersonalFoulsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPoints:
                    handler.string_value("NCAAMBPoints");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPointsPerGame:
                    handler.string_value("NCAAMBPointsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPointsInPaint:
                    handler.string_value("NCAAMBPointsInPaint");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPointsInPaintPerGame:
                    handler.string_value("NCAAMBPointsInPaintPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPointsOffTurnovers:
                    handler.string_value("NCAAMBPointsOffTurnovers");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPointsOffTurnoversPerGame:
                    handler.string_value("NCAAMBPointsOffTurnoversPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBRebounds:
                    handler.string_value("NCAAMBRebounds");
                    break;
                case TypeValueKnownValues.Value_NCAAMBReboundsPerGame:
                    handler.string_value("NCAAMBReboundsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBSecondChancePoints:
                    handler.string_value("NCAAMBSecondChancePoints");
                    break;
                case TypeValueKnownValues.Value_NCAAMBSecondChancePointsPerGame:
                    handler.string_value("NCAAMBSecondChancePointsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBSteals:
                    handler.string_value("NCAAMBSteals");
                    break;
                case TypeValueKnownValues.Value_NCAAMBStealsPerGame:
                    handler.string_value("NCAAMBStealsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTeamTechnicalFouls:
                    handler.string_value("NCAAMBTeamTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_NCAAMBPlayerTechnicalFouls:
                    handler.string_value("NCAAMBPlayerTechnicalFouls");
                    break;
                case TypeValueKnownValues.Value_NCAAMBThreePointAttempts:
                    handler.string_value("NCAAMBThreePointAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAMBThreePointAttemptsPerGame:
                    handler.string_value("NCAAMBThreePointAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBThreePointPercentage:
                    handler.string_value("NCAAMBThreePointPercentage");
                    break;
                case TypeValueKnownValues.Value_NCAAMBThreePointsMade:
                    handler.string_value("NCAAMBThreePointsMade");
                    break;
                case TypeValueKnownValues.Value_NCAAMBThreePointsMadePerGame:
                    handler.string_value("NCAAMBThreePointsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTurnovers:
                    handler.string_value("NCAAMBTurnovers");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTurnoversPerGame:
                    handler.string_value("NCAAMBTurnoversPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTwoPointAttempts:
                    handler.string_value("NCAAMBTwoPointAttempts");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTwoPointAttemptsPerGame:
                    handler.string_value("NCAAMBTwoPointAttemptsPerGame");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTwoPointPercentage:
                    handler.string_value("NCAAMBTwoPointPercentage");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTwoPointsMade:
                    handler.string_value("NCAAMBTwoPointsMade");
                    break;
                case TypeValueKnownValues.Value_NCAAMBTwoPointsMadePerGame:
                    handler.string_value("NCAAMBTwoPointsMadePerGame");
                    break;
                case TypeValueKnownValues.Value_SoccerBallPossessions:
                    handler.string_value("SoccerBallPossessions");
                    break;
                case TypeValueKnownValues.Value_SoccerCardsGiven:
                    handler.string_value("SoccerCardsGiven");
                    break;
                case TypeValueKnownValues.Value_SoccerCornerKicks:
                    handler.string_value("SoccerCornerKicks");
                    break;
                case TypeValueKnownValues.Value_SoccerFreeKicks:
                    handler.string_value("SoccerFreeKicks");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalAttempts:
                    handler.string_value("SoccerGoalAttempts");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByFoot:
                    handler.string_value("SoccerGoalsByFoot");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByHeaders:
                    handler.string_value("SoccerGoalsByHeaders");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime00To15:
                    handler.string_value("SoccerGoalsByTime00To15");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime16To30:
                    handler.string_value("SoccerGoalsByTime16To30");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime31To45:
                    handler.string_value("SoccerGoalsByTime31To45");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime46To60:
                    handler.string_value("SoccerGoalsByTime46To60");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime61To75:
                    handler.string_value("SoccerGoalsByTime61To75");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsByTime76To90:
                    handler.string_value("SoccerGoalsByTime76To90");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConceded:
                    handler.string_value("SoccerGoalsConceded");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime00To15:
                    handler.string_value("SoccerGoalsConcededByTime00To15");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime16To30:
                    handler.string_value("SoccerGoalsConcededByTime16To30");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime31To45:
                    handler.string_value("SoccerGoalsConcededByTime31To45");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime46To60:
                    handler.string_value("SoccerGoalsConcededByTime46To60");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime61To75:
                    handler.string_value("SoccerGoalsConcededByTime61To75");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsConcededByTime76To90:
                    handler.string_value("SoccerGoalsConcededByTime76To90");
                    break;
                case TypeValueKnownValues.Value_SoccerGoalsScored:
                    handler.string_value("SoccerGoalsScored");
                    break;
                case TypeValueKnownValues.Value_SoccerMatchesPlayed:
                    handler.string_value("SoccerMatchesPlayed");
                    break;
                case TypeValueKnownValues.Value_SoccerOffsides:
                    handler.string_value("SoccerOffsides");
                    break;
                case TypeValueKnownValues.Value_SoccerOwnGoals:
                    handler.string_value("SoccerOwnGoals");
                    break;
                case TypeValueKnownValues.Value_SoccerShotsBlocked:
                    handler.string_value("SoccerShotsBlocked");
                    break;
                case TypeValueKnownValues.Value_SoccerShotsOffGoal:
                    handler.string_value("SoccerShotsOffGoal");
                    break;
                case TypeValueKnownValues.Value_SoccerShotsOnGoal:
                    handler.string_value("SoccerShotsOnGoal");
                    break;
                case TypeValueKnownValues.Value_SoccerSubstitutedIn:
                    handler.string_value("SoccerSubstitutedIn");
                    break;
                case TypeValueKnownValues.Value_SoccerSubstitutedOut:
                    handler.string_value("SoccerSubstitutedOut");
                    break;
                default:
                    Debug.Assert(false);
                    break;
              }
          }
        else
          {
                    handler.string_value(storeValue.string_value);
          }
      }

    public static SportsStatsTypeJSON from_json(JSONValue json_value, bool ignore_extras, bool allow_incomplete, bool allow_unpolished)
      {
        SportsStatsTypeJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type SportsStatsType", ignore_extras);
            generator.set_allow_incomplete(allow_incomplete);
            generator.set_allow_unpolished(allow_unpolished);
            if (allow_incomplete || allow_unpolished)
                json_value.write(generator);
            else
                json_value.write(generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public static SportsStatsTypeJSON from_json(JSONValue json_value, bool ignore_extras, bool allow_incomplete)
  {
    return from_json(json_value, ignore_extras, allow_incomplete, false);
  }
    public static SportsStatsTypeJSON from_json(JSONBase json_value, bool ignore_extras, bool allow_incomplete, bool allow_unpolished)
      {
        SportsStatsTypeJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type SportsStatsType", ignore_extras);
            generator.set_allow_incomplete(allow_incomplete);
            generator.set_allow_unpolished(allow_unpolished);
            if (allow_incomplete || allow_unpolished)
                json_value.write_partial_as_json(generator);
            else
                json_value.write_as_json(generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public static SportsStatsTypeJSON from_json(JSONBase json_value, bool ignore_extras, bool allow_incomplete)
  {
    return from_json(json_value, ignore_extras, allow_incomplete, false);
  }
    public static SportsStatsTypeJSON from_text(string text, bool ignore_extras)
      {
        SportsStatsTypeJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type SportsStatsType", ignore_extras);
            JSONParse.parse_json_value(text, "Text for SportsStatsTypeJSON", generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public static SportsStatsTypeJSON from_file(TextReader fp, string file_name, bool ignore_extras)
      {
        SportsStatsTypeJSON result;
          {
            HoldingGenerator generator = new HoldingGenerator("Type SportsStatsType", ignore_extras);
            JSONParse.parse_json_value(fp, file_name, generator);
            Debug.Assert(generator.have_value);
            result = generator.value;
          };
        return result;
      }
    public abstract class FieldGeneratorValue : JSONStringGenerator
      {
        protected FieldGeneratorValue(string what)
          {
            set_what(what);
          }
        protected FieldGeneratorValue()
          {
          }
        protected override void handle_result(string result)
          {
            TypeValueKnownValues known = stringToValue(result);
            TypeValue new_value = new TypeValue();
            if (known == TypeValueKnownValues.Value__none)
              {
                new_value.in_known_list = false;
                new_value.string_value = result;
              }
            else
              {
                new_value.in_known_list = true;
                new_value.list_value = known;
              }
            handle_result(new_value);
          }
        protected abstract void handle_result(TypeValue result);
      };
    public class FieldHoldingGeneratorValue : FieldGeneratorValue
  {
    protected override void handle_result(TypeValue result)
      {
//@@@        Debug.Assert(!have_value);
        have_value = true;
        value = result;
      }

    public FieldHoldingGeneratorValue(String what)
      {
        have_value = false;
        base.set_what(what);
      }

    public override void reset()
      {
        have_value = false;
        base.reset();
      }

    public bool have_value;
    public TypeValue value;
  };
    public class FieldHoldingArrayGeneratorValue : JSONArrayGenerator
  {
    protected class ElementHandler : FieldGeneratorValue
      {
        private FieldHoldingArrayGeneratorValue top;

        protected override void handle_result(TypeValue result)
          {
            top.value.Add(result);
          }
        protected override string get_what()
          {
            return "element " + top.value.Count + " of " + top.get_what();
          }

        public ElementHandler(FieldHoldingArrayGeneratorValue init_top)
          {
            top = init_top;
          }
      };

    private ElementHandler element_handler;

    protected override JSONHandler start()
      {
        have_value = true;
        value.Clear();
        return element_handler;
      }
    protected override void finish()
      {
        Debug.Assert(have_value);
        handle_result(value);
        element_handler.reset();
      }
    protected virtual void handle_result(List<TypeValue> result)
      {
      }

    public FieldHoldingArrayGeneratorValue(string what)
      {
        element_handler = new ElementHandler(this);
        have_value = false;
        value = new List<TypeValue>();
        base.set_what(what);
      }
    public FieldHoldingArrayGeneratorValue()
      {
        element_handler = new ElementHandler(this);
        have_value = false;
        value = new List<TypeValue>();
      }

    public override void reset()
      {
        element_handler.reset();
        have_value = false;
        value.Clear();
        base.reset();
      }

    public bool have_value;
    public List<TypeValue> value;
  };
    public abstract class Generator : FieldGeneratorValue
      {
        protected override void handle_result(TypeValue new_value)
          {
            SportsStatsTypeJSON result = new SportsStatsTypeJSON();
            result.setValue(new_value);
            handle_result(result);
          }
        protected abstract void handle_result(SportsStatsTypeJSON new_result);
        public Generator(bool ignore_extras) : base("Type SportsStatsType")
          {
          }
        public void set_allow_incomplete(bool new_allow_incomplete)
          {
          }
        public void set_allow_unpolished(bool new_allow_unpolished)
          {
          }
      };
    public class HoldingGenerator : Generator
      {
        protected override void handle_result(SportsStatsTypeJSON  result)
          {
//@@@            Debug.Assert(!have_value);
            have_value = true;
            value = result;
          }

        public HoldingGenerator(String what, bool ignore_extras) : base(ignore_extras)
          {
            have_value = false;
            base.set_what(what);
          }

        public HoldingGenerator(String what) : base(false)
          {
            have_value = false;
            base.set_what(what);
          }

        public override void reset()
          {
            have_value = false;
            base.reset();
          }

        public bool have_value;
        public SportsStatsTypeJSON value;
      };
    public class HoldingArrayGenerator : JSONArrayGenerator
  {
    protected class ElementHandler : Generator
      {
        private HoldingArrayGenerator top;

        protected override void handle_result(SportsStatsTypeJSON  result)
          {
            top.value.Add(result);
          }
        protected override string get_what()
          {
            return "element " + top.value.Count + " of " + top.get_what();
          }

        public ElementHandler(HoldingArrayGenerator init_top, bool ignore_extras) : base(ignore_extras)
          {
            top = init_top;
          }
      };

    private ElementHandler element_handler;

    protected override JSONHandler start()
      {
        have_value = true;
        value.Clear();
        return element_handler;
      }
    protected override void finish()
      {
        Debug.Assert(have_value);
        handle_result(value);
        element_handler.reset();
      }
    protected virtual void handle_result(List<SportsStatsTypeJSON> result)

      {
      }

    public HoldingArrayGenerator(string what, bool ignore_extras)
      {
        element_handler = new ElementHandler(this, ignore_extras);
        have_value = false;
        value = new List<SportsStatsTypeJSON>();
        base.set_what(what);
      }
    public HoldingArrayGenerator(bool ignore_extras)
      {
        element_handler = new ElementHandler(this, ignore_extras);
        value = new List<SportsStatsTypeJSON>();
        have_value = false;
      }

    public override void reset()
      {
        element_handler.reset();
        have_value = false;
        value.Clear();
        base.reset();
      }

    public bool have_value;
    public List<SportsStatsTypeJSON> value;
  };
  };
